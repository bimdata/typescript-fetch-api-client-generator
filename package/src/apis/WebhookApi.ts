/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PatchedWebHookRequest,
    PatchedWebHookRequestFromJSON,
    PatchedWebHookRequestToJSON,
    WebHook,
    WebHookFromJSON,
    WebHookToJSON,
    WebHookRequest,
    WebHookRequestFromJSON,
    WebHookRequestToJSON,
} from '../models';

export interface CreateWebHookRequest {
    cloudPk: number;
    webHookRequest: WebHookRequest;
}

export interface DeleteWebHookRequest {
    cloudPk: number;
    id: number;
}

export interface GetWebHookRequest {
    cloudPk: number;
    id: number;
}

export interface GetWebHooksRequest {
    cloudPk: number;
}

export interface PingWebHookRequest {
    cloudPk: number;
    id: number;
    webHookRequest: WebHookRequest;
}

export interface UpdateWebHookRequest {
    cloudPk: number;
    id: number;
    patchedWebHookRequest?: PatchedWebHookRequest;
}

/**
 * 
 */
export class WebhookApi extends runtime.BaseAPI {

    /**
     * Create a new Webhook  Required scopes: webhook:manage
     * Create a new Webhook
     */
    async createWebHookRaw(requestParameters: CreateWebHookRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<WebHook>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createWebHook.');
        }

        if (requestParameters.webHookRequest === null || requestParameters.webHookRequest === undefined) {
            throw new runtime.RequiredError('webHookRequest','Required parameter requestParameters.webHookRequest was null or undefined when calling createWebHook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/webhook`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebHookRequestToJSON(requestParameters.webHookRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebHookFromJSON(jsonValue));
    }

    /**
     * Create a new Webhook  Required scopes: webhook:manage
     * Create a new Webhook
     */
    async createWebHook(cloudPk: number, webHookRequest: WebHookRequest, initOverrides?: RequestInit): Promise<WebHook> {
        const response = await this.createWebHookRaw({ cloudPk: cloudPk, webHookRequest: webHookRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a webhook  Required scopes: webhook:manage
     * Delete a webhook
     */
    async deleteWebHookRaw(requestParameters: DeleteWebHookRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteWebHook.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWebHook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/webhook/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a webhook  Required scopes: webhook:manage
     * Delete a webhook
     */
    async deleteWebHook(cloudPk: number, id: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteWebHookRaw({ cloudPk: cloudPk, id: id }, initOverrides);
    }

    /**
     * Retrieve one configured webhook  Required scopes: webhook:manage
     * Retrieve one configured webhook
     */
    async getWebHookRaw(requestParameters: GetWebHookRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<WebHook>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getWebHook.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWebHook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/webhook/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebHookFromJSON(jsonValue));
    }

    /**
     * Retrieve one configured webhook  Required scopes: webhook:manage
     * Retrieve one configured webhook
     */
    async getWebHook(cloudPk: number, id: number, initOverrides?: RequestInit): Promise<WebHook> {
        const response = await this.getWebHookRaw({ cloudPk: cloudPk, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all configured webhooks  Required scopes: webhook:manage
     * Retrieve all configured webhooks
     */
    async getWebHooksRaw(requestParameters: GetWebHooksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<WebHook>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getWebHooks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/webhook`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebHookFromJSON));
    }

    /**
     * Retrieve all configured webhooks  Required scopes: webhook:manage
     * Retrieve all configured webhooks
     */
    async getWebHooks(cloudPk: number, initOverrides?: RequestInit): Promise<Array<WebHook>> {
        const response = await this.getWebHooksRaw({ cloudPk: cloudPk }, initOverrides);
        return await response.value();
    }

    /**
     * Trigger a Ping Event sending {\"ok\": true} to the webhook URL. Useful to test your app  Required scopes: webhook:manage
     * Test a webhook
     */
    async pingWebHookRaw(requestParameters: PingWebHookRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<WebHook>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling pingWebHook.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pingWebHook.');
        }

        if (requestParameters.webHookRequest === null || requestParameters.webHookRequest === undefined) {
            throw new runtime.RequiredError('webHookRequest','Required parameter requestParameters.webHookRequest was null or undefined when calling pingWebHook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/webhook/{id}/ping`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebHookRequestToJSON(requestParameters.webHookRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebHookFromJSON(jsonValue));
    }

    /**
     * Trigger a Ping Event sending {\"ok\": true} to the webhook URL. Useful to test your app  Required scopes: webhook:manage
     * Test a webhook
     */
    async pingWebHook(cloudPk: number, id: number, webHookRequest: WebHookRequest, initOverrides?: RequestInit): Promise<WebHook> {
        const response = await this.pingWebHookRaw({ cloudPk: cloudPk, id: id, webHookRequest: webHookRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some field of a webhook  Required scopes: webhook:manage
     * Update some field of a webhook
     */
    async updateWebHookRaw(requestParameters: UpdateWebHookRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<WebHook>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateWebHook.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWebHook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/webhook/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedWebHookRequestToJSON(requestParameters.patchedWebHookRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebHookFromJSON(jsonValue));
    }

    /**
     * Update some field of a webhook  Required scopes: webhook:manage
     * Update some field of a webhook
     */
    async updateWebHook(cloudPk: number, id: number, patchedWebHookRequest?: PatchedWebHookRequest, initOverrides?: RequestInit): Promise<WebHook> {
        const response = await this.updateWebHookRaw({ cloudPk: cloudPk, id: id, patchedWebHookRequest: patchedWebHookRequest }, initOverrides);
        return await response.value();
    }

}
