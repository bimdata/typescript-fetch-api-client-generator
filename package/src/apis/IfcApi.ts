/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Classification,
    ClassificationFromJSON,
    ClassificationToJSON,
    Element,
    ElementFromJSON,
    ElementToJSON,
    ElementClassificationRelation,
    ElementClassificationRelationFromJSON,
    ElementClassificationRelationToJSON,
    ElementPropertySetRelation,
    ElementPropertySetRelationFromJSON,
    ElementPropertySetRelationToJSON,
    Ifc,
    IfcFromJSON,
    IfcToJSON,
    IfcAccessToken,
    IfcAccessTokenFromJSON,
    IfcAccessTokenToJSON,
    IfcErrors,
    IfcErrorsFromJSON,
    IfcErrorsToJSON,
    IfcExport,
    IfcExportFromJSON,
    IfcExportToJSON,
    IfcFiles,
    IfcFilesFromJSON,
    IfcFilesToJSON,
    IfcMerge,
    IfcMergeFromJSON,
    IfcMergeToJSON,
    IfcOptimize,
    IfcOptimizeFromJSON,
    IfcOptimizeToJSON,
    Layer,
    LayerFromJSON,
    LayerToJSON,
    ProcessorHandler,
    ProcessorHandlerFromJSON,
    ProcessorHandlerToJSON,
    Property,
    PropertyFromJSON,
    PropertyToJSON,
    PropertyDefinition,
    PropertyDefinitionFromJSON,
    PropertyDefinitionToJSON,
    PropertySet,
    PropertySetFromJSON,
    PropertySetToJSON,
    RawElements,
    RawElementsFromJSON,
    RawElementsToJSON,
    SimpleElement,
    SimpleElementFromJSON,
    SimpleElementToJSON,
    Space,
    SpaceFromJSON,
    SpaceToJSON,
    System,
    SystemFromJSON,
    SystemToJSON,
    Unit,
    UnitFromJSON,
    UnitToJSON,
    Zone,
    ZoneFromJSON,
    ZoneToJSON,
    ZoneSpace,
    ZoneSpaceFromJSON,
    ZoneSpaceToJSON,
} from '../models';

export interface AddIfcErrorsRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
    data: IfcErrors;
}

export interface BulkDeleteIfcClassificationsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface BulkDeleteIfcPropertiesRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface BulkDeleteIfcPropertyDefinitionsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface BulkDeleteIfcUnitsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface BulkDeletePropertySetRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface BulkFullUpdateElementsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<Element>;
}

export interface BulkFullUpdateIfcPropertyRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<Property>;
}

export interface BulkRemoveClassificationsOfElementRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
}

export interface BulkRemoveElementsFromClassificationRequest {
    cloudPk: string;
    ifcClassificationPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface BulkUpdateElementsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<Element>;
}

export interface BulkUpdateIfcPropertyRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<Property>;
}

export interface CreateAccessTokenRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: IfcAccessToken;
}

export interface CreateClassificationElementRelationsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<ElementClassificationRelation>;
}

export interface CreateClassificationsOfElementRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
    data: Array<Classification>;
}

export interface CreateElementRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<Element>;
}

export interface CreateElementPropertySetRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
    data: PropertySet;
}

export interface CreateElementPropertySetPropertyRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
    propertysetPk: string;
    data: Property;
}

export interface CreateElementPropertySetPropertyDefinitionRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
    propertyPk: string;
    propertysetPk: string;
    data: PropertyDefinition;
}

export interface CreateElementPropertySetPropertyDefinitionUnitRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
    propertyPk: string;
    propertydefinitionPk: string;
    propertysetPk: string;
    data: Unit;
}

export interface CreateIfcPropertyDefinitionRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<PropertyDefinition>;
}

export interface CreateIfcUnitRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<Unit>;
}

export interface CreateLayerRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Layer;
}

export interface CreatePropertySetRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<PropertySet>;
}

export interface CreatePropertySetElementRelationsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<ElementPropertySetRelation>;
}

export interface CreateRawElementsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: RawElements;
}

export interface CreateSpaceRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<Space>;
}

export interface CreateSystemRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: System;
}

export interface CreateZoneRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: Array<Zone>;
}

export interface CreateZoneSpaceRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    zonePk: string;
    data: ZoneSpace;
}

export interface DeleteAccessTokenRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    token: string;
}

export interface DeleteElementRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    uuid: string;
}

export interface DeleteIfcRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface DeleteIfcPropertyRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface DeleteIfcPropertyDefinitionRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface DeleteIfcUnitRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface DeleteLayerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface DeletePropertySetRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface DeleteSpaceRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface DeleteSystemRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    uuid: string;
}

export interface DeleteZoneRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface DeleteZoneSpaceRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    zonePk: string;
}

export interface ExportIfcRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
    data: IfcExport;
}

export interface FullUpdateAccessTokenRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    token: string;
    data: IfcAccessToken;
}

export interface FullUpdateElementRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    uuid: string;
    data: Element;
}

export interface FullUpdateElementPropertySetPropertyRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    propertysetPk: string;
    data: Property;
}

export interface FullUpdateIfcRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
    data: Ifc;
}

export interface FullUpdateIfcPropertyRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: Property;
}

export interface FullUpdateIfcPropertyDefinitionRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: PropertyDefinition;
}

export interface FullUpdateIfcUnitRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: Unit;
}

export interface FullUpdateLayerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: Layer;
}

export interface FullUpdateProcessorHandlerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: ProcessorHandler;
}

export interface FullUpdatePropertySetRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: PropertySet;
}

export interface FullUpdateSpaceRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: Space;
}

export interface FullUpdateSystemRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    uuid: string;
    data: System;
}

export interface FullUpdateZoneRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: Zone;
}

export interface FullUpdateZoneSpaceRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    zonePk: string;
    data: ZoneSpace;
}

export interface GetAccessTokenRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    token: string;
}

export interface GetAccessTokensRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetClassificationsOfElementRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetElementRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    uuid: string;
}

export interface GetElementPropertySetRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetElementPropertySetPropertiesRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
    propertysetPk: string;
}

export interface GetElementPropertySetPropertyRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    propertysetPk: string;
}

export interface GetElementPropertySetPropertyDefinitionRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    propertyPk: string;
    propertysetPk: string;
}

export interface GetElementPropertySetPropertyDefinitionUnitRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    propertyPk: string;
    propertydefinitionPk: string;
    propertysetPk: string;
}

export interface GetElementPropertySetPropertyDefinitionUnitsRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
    propertyPk: string;
    propertydefinitionPk: string;
    propertysetPk: string;
}

export interface GetElementPropertySetPropertyDefinitionsRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
    propertyPk: string;
    propertysetPk: string;
}

export interface GetElementPropertySetsRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetElementsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    type?: string;
    classification?: string;
    classificationNotation?: string;
}

export interface GetElementsFromClassificationRequest {
    cloudPk: string;
    ifcClassificationPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetIfcRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface GetIfcBVHRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface GetIfcClassificationsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetIfcGLTFRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface GetIfcMapRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface GetIfcPropertiesRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetIfcPropertyRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetIfcPropertyDefinitionRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetIfcPropertyDefinitionsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetIfcStructureRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface GetIfcSystemsRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface GetIfcUnitRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetIfcUnitsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetIfcsRequest {
    cloudPk: string;
    projectPk: string;
    status?: string;
    source?: string;
}

export interface GetLayerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetLayersRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetProcessorHandlerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetProcessorHandlersRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetPropertySetRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetPropertySetsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetRawElementsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    type?: string;
    classification?: string;
    classificationNotation?: string;
}

export interface GetSimpleElementRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    uuid: string;
}

export interface GetSimpleElementsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    type?: string;
    classification?: string;
    classificationNotation?: string;
}

export interface GetSpaceRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetSpacesRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetSystemRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    uuid: string;
}

export interface GetSystemsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetZoneRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetZoneSpaceRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    zonePk: string;
}

export interface GetZoneSpacesRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    zonePk: string;
}

export interface GetZonesRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    color?: string;
}

export interface ListClassificationElementRelationsRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface MergeIfcsRequest {
    cloudPk: string;
    projectPk: string;
    data: IfcMerge;
}

export interface OptimizeIfcRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
    data: IfcOptimize;
}

export interface RemoveAllElementPropertySetRequest {
    cloudPk: string;
    elementUuid: string;
    ifcPk: string;
    projectPk: string;
}

export interface RemoveClassificationOfElementRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface RemoveElementPropertySetRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface RemoveElementPropertySetPropertyRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    propertysetPk: string;
}

export interface RemoveElementPropertySetPropertyDefinitionRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    propertyPk: string;
    propertysetPk: string;
}

export interface RemoveElementPropertySetPropertyDefinitionUnitRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    propertyPk: string;
    propertydefinitionPk: string;
    propertysetPk: string;
}

export interface RemoveElementsFromClassificationRequest {
    cloudPk: string;
    ifcClassificationPk: string;
    ifcPk: string;
    projectPk: string;
    uuid: string;
}

export interface ReprocessIfcRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface UpdateAccessTokenRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    token: string;
    data: IfcAccessToken;
}

export interface UpdateElementRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    uuid: string;
    data: Element;
}

export interface UpdateElementPropertySetPropertyRequest {
    cloudPk: string;
    elementUuid: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    propertysetPk: string;
    data: Property;
}

export interface UpdateIfcRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
    data: Ifc;
}

export interface UpdateIfcFilesRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
    structureFile?: Blob | null;
    systemsFile?: Blob | null;
    mapFile?: Blob | null;
    gltfFile?: Blob | null;
    gltfWithOpeningsFile?: Blob | null;
    bvhTreeFile?: Blob | null;
    viewer360File?: Blob | null;
    xktFile?: Blob | null;
}

export interface UpdateIfcPropertyRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: Property;
}

export interface UpdateIfcPropertyDefinitionRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: PropertyDefinition;
}

export interface UpdateIfcUnitRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: Unit;
}

export interface UpdateLayerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: Layer;
}

export interface UpdateProcessorHandlerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: ProcessorHandler;
}

export interface UpdatePropertySetRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: PropertySet;
}

export interface UpdateSpaceRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: Space;
}

export interface UpdateSystemRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    uuid: string;
    data: System;
}

export interface UpdateZoneRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: Zone;
}

export interface UpdateZoneSpaceRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    zonePk: string;
    data: ZoneSpace;
}

/**
 * no description
 */
export class IfcApi extends runtime.BaseAPI {

    /**
     * IFC errors are warnings and errors during IFC process. They alert about missing elements or malformed files Required scopes: ifc:write
     * Add errors to IFC
     */
    async addIfcErrorsRaw(requestParameters: AddIfcErrorsRequest): Promise<runtime.ApiResponse<IfcErrors>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling addIfcErrors.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addIfcErrors.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling addIfcErrors.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling addIfcErrors.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/errors`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcErrorsToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcErrorsFromJSON(jsonValue));
    }

    /**
     * IFC errors are warnings and errors during IFC process. They alert about missing elements or malformed files Required scopes: ifc:write
     * Add errors to IFC
     */
    async addIfcErrors(requestParameters: AddIfcErrorsRequest): Promise<IfcErrors> {
        const response = await this.addIfcErrorsRaw(requestParameters);
        return await response.value();
    }

    /**
     *              Delete relation between filtered classifications (eg. /classifications?name=untec) and all ifc\'s elements.             No classification will be deleted on this endpoint, only the relation between ifc\'s elements and their classification.  Required scopes: ifc:write
     * Remove all classifications from model\'s elements
     */
    async bulkDeleteIfcClassificationsRaw(requestParameters: BulkDeleteIfcClassificationsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkDeleteIfcClassifications.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkDeleteIfcClassifications.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkDeleteIfcClassifications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *              Delete relation between filtered classifications (eg. /classifications?name=untec) and all ifc\'s elements.             No classification will be deleted on this endpoint, only the relation between ifc\'s elements and their classification.  Required scopes: ifc:write
     * Remove all classifications from model\'s elements
     */
    async bulkDeleteIfcClassifications(requestParameters: BulkDeleteIfcClassificationsRequest): Promise<void> {
        await this.bulkDeleteIfcClassificationsRaw(requestParameters);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Delete many Property of a model
     */
    async bulkDeleteIfcPropertiesRaw(requestParameters: BulkDeleteIfcPropertiesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkDeleteIfcProperties.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkDeleteIfcProperties.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkDeleteIfcProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Delete many Property of a model
     */
    async bulkDeleteIfcProperties(requestParameters: BulkDeleteIfcPropertiesRequest): Promise<void> {
        await this.bulkDeleteIfcPropertiesRaw(requestParameters);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Delete many PropertyDefinitions of a model
     */
    async bulkDeleteIfcPropertyDefinitionsRaw(requestParameters: BulkDeleteIfcPropertyDefinitionsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkDeleteIfcPropertyDefinitions.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkDeleteIfcPropertyDefinitions.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkDeleteIfcPropertyDefinitions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Delete many PropertyDefinitions of a model
     */
    async bulkDeleteIfcPropertyDefinitions(requestParameters: BulkDeleteIfcPropertyDefinitionsRequest): Promise<void> {
        await this.bulkDeleteIfcPropertyDefinitionsRaw(requestParameters);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Delete many Units of a model
     */
    async bulkDeleteIfcUnitsRaw(requestParameters: BulkDeleteIfcUnitsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkDeleteIfcUnits.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkDeleteIfcUnits.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkDeleteIfcUnits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Delete many Units of a model
     */
    async bulkDeleteIfcUnits(requestParameters: BulkDeleteIfcUnitsRequest): Promise<void> {
        await this.bulkDeleteIfcUnitsRaw(requestParameters);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Delete many PropertySet of a model
     */
    async bulkDeletePropertySetRaw(requestParameters: BulkDeletePropertySetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkDeletePropertySet.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkDeletePropertySet.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkDeletePropertySet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Delete many PropertySet of a model
     */
    async bulkDeletePropertySet(requestParameters: BulkDeletePropertySetRequest): Promise<void> {
        await this.bulkDeletePropertySetRaw(requestParameters);
    }

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Update many elements at once (only changing fields may be defined)
     */
    async bulkFullUpdateElementsRaw(requestParameters: BulkFullUpdateElementsRequest): Promise<runtime.ApiResponse<Array<Element>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkFullUpdateElements.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkFullUpdateElements.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkFullUpdateElements.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling bulkFullUpdateElements.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(ElementToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementFromJSON));
    }

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Update many elements at once (only changing fields may be defined)
     */
    async bulkFullUpdateElements(requestParameters: BulkFullUpdateElementsRequest): Promise<Array<Element>> {
        const response = await this.bulkFullUpdateElementsRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Update some fields of many properties of a model
     */
    async bulkFullUpdateIfcPropertyRaw(requestParameters: BulkFullUpdateIfcPropertyRequest): Promise<runtime.ApiResponse<Array<Property>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkFullUpdateIfcProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkFullUpdateIfcProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkFullUpdateIfcProperty.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling bulkFullUpdateIfcProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(PropertyToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyFromJSON));
    }

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Update some fields of many properties of a model
     */
    async bulkFullUpdateIfcProperty(requestParameters: BulkFullUpdateIfcPropertyRequest): Promise<Array<Property>> {
        const response = await this.bulkFullUpdateIfcPropertyRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Remove many classifications from an element
     */
    async bulkRemoveClassificationsOfElementRaw(requestParameters: BulkRemoveClassificationsOfElementRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkRemoveClassificationsOfElement.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling bulkRemoveClassificationsOfElement.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkRemoveClassificationsOfElement.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkRemoveClassificationsOfElement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Remove many classifications from an element
     */
    async bulkRemoveClassificationsOfElement(requestParameters: BulkRemoveClassificationsOfElementRequest): Promise<void> {
        await this.bulkRemoveClassificationsOfElementRaw(requestParameters);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Remove the classifications from all elements
     */
    async bulkRemoveElementsFromClassificationRaw(requestParameters: BulkRemoveElementsFromClassificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkRemoveElementsFromClassification.');
        }

        if (requestParameters.ifcClassificationPk === null || requestParameters.ifcClassificationPk === undefined) {
            throw new runtime.RequiredError('ifcClassificationPk','Required parameter requestParameters.ifcClassificationPk was null or undefined when calling bulkRemoveElementsFromClassification.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkRemoveElementsFromClassification.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkRemoveElementsFromClassification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_classification_pk"}}`, encodeURIComponent(String(requestParameters.ifcClassificationPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          Bulk delete.         You should send a list of ids in the body.         These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted  Required scopes: ifc:write
     * Remove the classifications from all elements
     */
    async bulkRemoveElementsFromClassification(requestParameters: BulkRemoveElementsFromClassificationRequest): Promise<void> {
        await this.bulkRemoveElementsFromClassificationRaw(requestParameters);
    }

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Update many elements at once (all field must be defined)
     */
    async bulkUpdateElementsRaw(requestParameters: BulkUpdateElementsRequest): Promise<runtime.ApiResponse<Array<Element>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkUpdateElements.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkUpdateElements.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkUpdateElements.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling bulkUpdateElements.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(ElementToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementFromJSON));
    }

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Update many elements at once (all field must be defined)
     */
    async bulkUpdateElements(requestParameters: BulkUpdateElementsRequest): Promise<Array<Element>> {
        const response = await this.bulkUpdateElementsRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Update all fields of many properties of a model
     */
    async bulkUpdateIfcPropertyRaw(requestParameters: BulkUpdateIfcPropertyRequest): Promise<runtime.ApiResponse<Array<Property>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkUpdateIfcProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkUpdateIfcProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkUpdateIfcProperty.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling bulkUpdateIfcProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(PropertyToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyFromJSON));
    }

    /**
     *          Bulk update.         Similar to update, but the body should be a list of objects to patch or put         The response will be a list (in the same order) of updated objects or of errors if any         If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Update all fields of many properties of a model
     */
    async bulkUpdateIfcProperty(requestParameters: BulkUpdateIfcPropertyRequest): Promise<Array<Property>> {
        const response = await this.bulkUpdateIfcPropertyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Tokens are read_only by default and are valid 1 day Required scopes: ifc:token_manage
     * Create a token for this model
     */
    async createAccessTokenRaw(requestParameters: CreateAccessTokenRequest): Promise<runtime.ApiResponse<IfcAccessToken>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createAccessToken.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createAccessToken.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createAccessToken.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createAccessToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcAccessTokenToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcAccessTokenFromJSON(jsonValue));
    }

    /**
     * Tokens are read_only by default and are valid 1 day Required scopes: ifc:token_manage
     * Create a token for this model
     */
    async createAccessToken(requestParameters: CreateAccessTokenRequest): Promise<IfcAccessToken> {
        const response = await this.createAccessTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create association between existing classification and existing element Required scopes: ifc:write
     * Create association between existing classification and existing element
     */
    async createClassificationElementRelationsRaw(requestParameters: CreateClassificationElementRelationsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createClassificationElementRelations.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createClassificationElementRelations.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createClassificationElementRelations.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createClassificationElementRelations.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(ElementClassificationRelationToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create association between existing classification and existing element Required scopes: ifc:write
     * Create association between existing classification and existing element
     */
    async createClassificationElementRelations(requestParameters: CreateClassificationElementRelationsRequest): Promise<void> {
        await this.createClassificationElementRelationsRaw(requestParameters);
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors      If classification created already exists, it will just be added to item\'s classifications and will not be duplicated  Required scopes: ifc:write
     * Create one or many classifications to an element
     */
    async createClassificationsOfElementRaw(requestParameters: CreateClassificationsOfElementRequest): Promise<runtime.ApiResponse<Array<Classification>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createClassificationsOfElement.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling createClassificationsOfElement.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createClassificationsOfElement.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createClassificationsOfElement.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createClassificationsOfElement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(ClassificationToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationFromJSON));
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors      If classification created already exists, it will just be added to item\'s classifications and will not be duplicated  Required scopes: ifc:write
     * Create one or many classifications to an element
     */
    async createClassificationsOfElement(requestParameters: CreateClassificationsOfElementRequest): Promise<Array<Classification>> {
        const response = await this.createClassificationsOfElementRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Create an element in the model
     */
    async createElementRaw(requestParameters: CreateElementRequest): Promise<runtime.ApiResponse<Array<Element>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createElement.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createElement.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createElement.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createElement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(ElementToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementFromJSON));
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Create an element in the model
     */
    async createElement(requestParameters: CreateElementRequest): Promise<Array<Element>> {
        const response = await this.createElementRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a PropertySets that will be automatically linked to the element Required scopes: ifc:write
     * Create a PropertySets to an element
     */
    async createElementPropertySetRaw(requestParameters: CreateElementPropertySetRequest): Promise<runtime.ApiResponse<PropertySet>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createElementPropertySet.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling createElementPropertySet.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createElementPropertySet.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createElementPropertySet.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createElementPropertySet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertySetToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertySetFromJSON(jsonValue));
    }

    /**
     * Create a PropertySets that will be automatically linked to the element Required scopes: ifc:write
     * Create a PropertySets to an element
     */
    async createElementPropertySet(requestParameters: CreateElementPropertySetRequest): Promise<PropertySet> {
        const response = await this.createElementPropertySetRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:write
     * Create a property to a PropertySet
     */
    async createElementPropertySetPropertyRaw(requestParameters: CreateElementPropertySetPropertyRequest): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createElementPropertySetProperty.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling createElementPropertySetProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createElementPropertySetProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createElementPropertySetProperty.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling createElementPropertySetProperty.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createElementPropertySetProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     *  Required scopes: ifc:write
     * Create a property to a PropertySet
     */
    async createElementPropertySetProperty(requestParameters: CreateElementPropertySetPropertyRequest): Promise<Property> {
        const response = await this.createElementPropertySetPropertyRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:write
     * Create a Definition to a Property
     */
    async createElementPropertySetPropertyDefinitionRaw(requestParameters: CreateElementPropertySetPropertyDefinitionRequest): Promise<runtime.ApiResponse<PropertyDefinition>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling createElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling createElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling createElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createElementPropertySetPropertyDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyDefinitionToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDefinitionFromJSON(jsonValue));
    }

    /**
     *  Required scopes: ifc:write
     * Create a Definition to a Property
     */
    async createElementPropertySetPropertyDefinition(requestParameters: CreateElementPropertySetPropertyDefinitionRequest): Promise<PropertyDefinition> {
        const response = await this.createElementPropertySetPropertyDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a Unit to a Definition Required scopes: ifc:write
     * Create a Unit to a Definition
     */
    async createElementPropertySetPropertyDefinitionUnitRaw(requestParameters: CreateElementPropertySetPropertyDefinitionUnitRequest): Promise<runtime.ApiResponse<Unit>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling createElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.propertydefinitionPk === null || requestParameters.propertydefinitionPk === undefined) {
            throw new runtime.RequiredError('propertydefinitionPk','Required parameter requestParameters.propertydefinitionPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createElementPropertySetPropertyDefinitionUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertydefinition_pk"}}`, encodeURIComponent(String(requestParameters.propertydefinitionPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnitToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitFromJSON(jsonValue));
    }

    /**
     * Create a Unit to a Definition Required scopes: ifc:write
     * Create a Unit to a Definition
     */
    async createElementPropertySetPropertyDefinitionUnit(requestParameters: CreateElementPropertySetPropertyDefinitionUnitRequest): Promise<Unit> {
        const response = await this.createElementPropertySetPropertyDefinitionUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Create a PropertyDefinition on the model
     */
    async createIfcPropertyDefinitionRaw(requestParameters: CreateIfcPropertyDefinitionRequest): Promise<runtime.ApiResponse<Array<PropertyDefinition>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createIfcPropertyDefinition.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createIfcPropertyDefinition.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createIfcPropertyDefinition.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createIfcPropertyDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(PropertyDefinitionToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyDefinitionFromJSON));
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Create a PropertyDefinition on the model
     */
    async createIfcPropertyDefinition(requestParameters: CreateIfcPropertyDefinitionRequest): Promise<Array<PropertyDefinition>> {
        const response = await this.createIfcPropertyDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Create a Unit on a model
     */
    async createIfcUnitRaw(requestParameters: CreateIfcUnitRequest): Promise<runtime.ApiResponse<Array<Unit>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createIfcUnit.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createIfcUnit.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createIfcUnit.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createIfcUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(UnitToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UnitFromJSON));
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Create a Unit on a model
     */
    async createIfcUnit(requestParameters: CreateIfcUnitRequest): Promise<Array<Unit>> {
        const response = await this.createIfcUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     * The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Create a layer in the model
     */
    async createLayerRaw(requestParameters: CreateLayerRequest): Promise<runtime.ApiResponse<Layer>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createLayer.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createLayer.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createLayer.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createLayer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LayerToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerFromJSON(jsonValue));
    }

    /**
     * The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Create a layer in the model
     */
    async createLayer(requestParameters: CreateLayerRequest): Promise<Layer> {
        const response = await this.createLayerRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Create a PropertySet
     */
    async createPropertySetRaw(requestParameters: CreatePropertySetRequest): Promise<runtime.ApiResponse<Array<PropertySet>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createPropertySet.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createPropertySet.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createPropertySet.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createPropertySet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(PropertySetToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertySetFromJSON));
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Create a PropertySet
     */
    async createPropertySet(requestParameters: CreatePropertySetRequest): Promise<Array<PropertySet>> {
        const response = await this.createPropertySetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create association between existing PropertySet and existing element Required scopes: ifc:write
     * Create association between PropertySet and element
     */
    async createPropertySetElementRelationsRaw(requestParameters: CreatePropertySetElementRelationsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createPropertySetElementRelations.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createPropertySetElementRelations.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createPropertySetElementRelations.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createPropertySetElementRelations.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(ElementPropertySetRelationToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create association between existing PropertySet and existing element Required scopes: ifc:write
     * Create association between PropertySet and element
     */
    async createPropertySetElementRelations(requestParameters: CreatePropertySetElementRelationsRequest): Promise<void> {
        await this.createPropertySetElementRelationsRaw(requestParameters);
    }

    /**
     *          You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once.         For performance reasons, we do not check the validity of the json. If the json is malformed, an error 500 without more explaination may be returned instead of a 400.  Required scopes: ifc:write
     * Create elements in an optimized format
     */
    async createRawElementsRaw(requestParameters: CreateRawElementsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createRawElements.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createRawElements.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createRawElements.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createRawElements.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RawElementsToJSON(requestParameters.data),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once.         For performance reasons, we do not check the validity of the json. If the json is malformed, an error 500 without more explaination may be returned instead of a 400.  Required scopes: ifc:write
     * Create elements in an optimized format
     */
    async createRawElements(requestParameters: CreateRawElementsRequest): Promise<void> {
        await this.createRawElementsRaw(requestParameters);
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Create a space in the model
     */
    async createSpaceRaw(requestParameters: CreateSpaceRequest): Promise<runtime.ApiResponse<Array<Space>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createSpace.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createSpace.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createSpace.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createSpace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(SpaceToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpaceFromJSON));
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  Required scopes: ifc:write
     * Create a space in the model
     */
    async createSpace(requestParameters: CreateSpaceRequest): Promise<Array<Space>> {
        const response = await this.createSpaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Create a system in the model
     */
    async createSystemRaw(requestParameters: CreateSystemRequest): Promise<runtime.ApiResponse<System>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createSystem.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createSystem.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createSystem.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createSystem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemFromJSON(jsonValue));
    }

    /**
     * The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Create a system in the model
     */
    async createSystem(requestParameters: CreateSystemRequest): Promise<System> {
        const response = await this.createSystemRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Create a zone in the model
     */
    async createZoneRaw(requestParameters: CreateZoneRequest): Promise<runtime.ApiResponse<Array<Zone>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createZone.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createZone.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createZone.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createZone.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data.map(ZoneToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ZoneFromJSON));
    }

    /**
     *          Bulk create available.         You can either post an object or a list of objects.         Is you post a list, the response will be a list (in the same order) of created objects or of errors if any         If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Create a zone in the model
     */
    async createZone(requestParameters: CreateZoneRequest): Promise<Array<Zone>> {
        const response = await this.createZoneRaw(requestParameters);
        return await response.value();
    }

    /**
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Create a space in a zone
     */
    async createZoneSpaceRaw(requestParameters: CreateZoneSpaceRequest): Promise<runtime.ApiResponse<ZoneSpace>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createZoneSpace.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createZoneSpace.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createZoneSpace.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling createZoneSpace.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createZoneSpace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ZoneSpaceToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneSpaceFromJSON(jsonValue));
    }

    /**
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Create a space in a zone
     */
    async createZoneSpace(requestParameters: CreateZoneSpaceRequest): Promise<ZoneSpace> {
        const response = await this.createZoneSpaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deleting a token will revoke it. Required scopes: ifc:token_manage
     * Delete a token
     */
    async deleteAccessTokenRaw(requestParameters: DeleteAccessTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteAccessToken.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteAccessToken.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteAccessToken.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling deleteAccessToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deleting a token will revoke it. Required scopes: ifc:token_manage
     * Delete a token
     */
    async deleteAccessToken(requestParameters: DeleteAccessTokenRequest): Promise<void> {
        await this.deleteAccessTokenRaw(requestParameters);
    }

    /**
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a zone of a model
     */
    async deleteElementRaw(requestParameters: DeleteElementRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteElement.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteElement.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteElement.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteElement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a zone of a model
     */
    async deleteElement(requestParameters: DeleteElementRequest): Promise<void> {
        await this.deleteElementRaw(requestParameters);
    }

    /**
     * It will delete the related document too Required scopes: ifc:write
     * Delete a model
     */
    async deleteIfcRaw(requestParameters: DeleteIfcRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteIfc.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIfc.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteIfc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * It will delete the related document too Required scopes: ifc:write
     * Delete a model
     */
    async deleteIfc(requestParameters: DeleteIfcRequest): Promise<void> {
        await this.deleteIfcRaw(requestParameters);
    }

    /**
     * Delete a Property of a model Required scopes: ifc:write
     * Delete a Property of a model
     */
    async deleteIfcPropertyRaw(requestParameters: DeleteIfcPropertyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteIfcProperty.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIfcProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteIfcProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteIfcProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Property of a model Required scopes: ifc:write
     * Delete a Property of a model
     */
    async deleteIfcProperty(requestParameters: DeleteIfcPropertyRequest): Promise<void> {
        await this.deleteIfcPropertyRaw(requestParameters);
    }

    /**
     * Delete a PropertyDefinitions of a model Required scopes: ifc:write
     * Delete a PropertyDefinitions of a model
     */
    async deleteIfcPropertyDefinitionRaw(requestParameters: DeleteIfcPropertyDefinitionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteIfcPropertyDefinition.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIfcPropertyDefinition.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteIfcPropertyDefinition.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteIfcPropertyDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a PropertyDefinitions of a model Required scopes: ifc:write
     * Delete a PropertyDefinitions of a model
     */
    async deleteIfcPropertyDefinition(requestParameters: DeleteIfcPropertyDefinitionRequest): Promise<void> {
        await this.deleteIfcPropertyDefinitionRaw(requestParameters);
    }

    /**
     * Delete a Unit of a model Required scopes: ifc:write
     * Delete a Unit of a model
     */
    async deleteIfcUnitRaw(requestParameters: DeleteIfcUnitRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteIfcUnit.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIfcUnit.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteIfcUnit.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteIfcUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Unit of a model Required scopes: ifc:write
     * Delete a Unit of a model
     */
    async deleteIfcUnit(requestParameters: DeleteIfcUnitRequest): Promise<void> {
        await this.deleteIfcUnitRaw(requestParameters);
    }

    /**
     * The IFC file will not be updated. The remaining layers are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a layer of a model
     */
    async deleteLayerRaw(requestParameters: DeleteLayerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteLayer.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLayer.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteLayer.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteLayer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The IFC file will not be updated. The remaining layers are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a layer of a model
     */
    async deleteLayer(requestParameters: DeleteLayerRequest): Promise<void> {
        await this.deleteLayerRaw(requestParameters);
    }

    /**
     * Delete a PropertySet of a model Required scopes: ifc:write
     * Delete a PropertySet of a model
     */
    async deletePropertySetRaw(requestParameters: DeletePropertySetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deletePropertySet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePropertySet.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deletePropertySet.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deletePropertySet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a PropertySet of a model Required scopes: ifc:write
     * Delete a PropertySet of a model
     */
    async deletePropertySet(requestParameters: DeletePropertySetRequest): Promise<void> {
        await this.deletePropertySetRaw(requestParameters);
    }

    /**
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a space
     */
    async deleteSpaceRaw(requestParameters: DeleteSpaceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteSpace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSpace.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteSpace.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteSpace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a space
     */
    async deleteSpace(requestParameters: DeleteSpaceRequest): Promise<void> {
        await this.deleteSpaceRaw(requestParameters);
    }

    /**
     * The IFC file will not be updated. The remaining systems are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a system of a model
     */
    async deleteSystemRaw(requestParameters: DeleteSystemRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteSystem.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteSystem.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteSystem.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteSystem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The IFC file will not be updated. The remaining systems are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a system of a model
     */
    async deleteSystem(requestParameters: DeleteSystemRequest): Promise<void> {
        await this.deleteSystemRaw(requestParameters);
    }

    /**
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a zone of a model
     */
    async deleteZoneRaw(requestParameters: DeleteZoneRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteZone.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteZone.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteZone.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteZone.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a zone of a model
     */
    async deleteZone(requestParameters: DeleteZoneRequest): Promise<void> {
        await this.deleteZoneRaw(requestParameters);
    }

    /**
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a space of a zone
     */
    async deleteZoneSpaceRaw(requestParameters: DeleteZoneSpaceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteZoneSpace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteZoneSpace.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteZoneSpace.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteZoneSpace.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling deleteZoneSpace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file Required scopes: ifc:write
     * Delete a space of a zone
     */
    async deleteZoneSpace(requestParameters: DeleteZoneSpaceRequest): Promise<void> {
        await this.deleteZoneSpaceRaw(requestParameters);
    }

    /**
     * Export IFC as requested in parameters. When the export is finished, a new IFC file with will be created in the same folder than the original IFC. You can query the folder or subscribe to the new document webhook to retrieve the result Required scopes: ifc:write
     * Export IFC
     */
    async exportIfcRaw(requestParameters: ExportIfcRequest): Promise<runtime.ApiResponse<IfcExport>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling exportIfc.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exportIfc.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling exportIfc.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling exportIfc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/export`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcExportToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcExportFromJSON(jsonValue));
    }

    /**
     * Export IFC as requested in parameters. When the export is finished, a new IFC file with will be created in the same folder than the original IFC. You can query the folder or subscribe to the new document webhook to retrieve the result Required scopes: ifc:write
     * Export IFC
     */
    async exportIfc(requestParameters: ExportIfcRequest): Promise<IfcExport> {
        const response = await this.exportIfcRaw(requestParameters);
        return await response.value();
    }

    /**
     * You can update the expiration date or the read_only field Required scopes: ifc:token_manage
     * Update all fields of a token
     */
    async fullUpdateAccessTokenRaw(requestParameters: FullUpdateAccessTokenRequest): Promise<runtime.ApiResponse<IfcAccessToken>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateAccessToken.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateAccessToken.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateAccessToken.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling fullUpdateAccessToken.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateAccessToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IfcAccessTokenToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcAccessTokenFromJSON(jsonValue));
    }

    /**
     * You can update the expiration date or the read_only field Required scopes: ifc:token_manage
     * Update all fields of a token
     */
    async fullUpdateAccessToken(requestParameters: FullUpdateAccessTokenRequest): Promise<IfcAccessToken> {
        const response = await this.fullUpdateAccessTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of an element
     */
    async fullUpdateElementRaw(requestParameters: FullUpdateElementRequest): Promise<runtime.ApiResponse<Element>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateElement.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateElement.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateElement.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling fullUpdateElement.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateElement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ElementToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ElementFromJSON(jsonValue));
    }

    /**
     * Update all fields of a element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of an element
     */
    async fullUpdateElement(requestParameters: FullUpdateElementRequest): Promise<Element> {
        const response = await this.fullUpdateElementRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new propertySet will be created to replace the propertyset for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty
     * Update a property from an element
     */
    async fullUpdateElementPropertySetPropertyRaw(requestParameters: FullUpdateElementPropertySetPropertyRequest): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateElementPropertySetProperty.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling fullUpdateElementPropertySetProperty.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateElementPropertySetProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateElementPropertySetProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateElementPropertySetProperty.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling fullUpdateElementPropertySetProperty.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateElementPropertySetProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new propertySet will be created to replace the propertyset for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty
     * Update a property from an element
     */
    async fullUpdateElementPropertySetProperty(requestParameters: FullUpdateElementPropertySetPropertyRequest): Promise<Property> {
        const response = await this.fullUpdateElementPropertySetPropertyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a model Required scopes: ifc:write
     * Update all fields of a model
     */
    async fullUpdateIfcRaw(requestParameters: FullUpdateIfcRequest): Promise<runtime.ApiResponse<Ifc>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateIfc.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateIfc.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateIfc.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateIfc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IfcToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcFromJSON(jsonValue));
    }

    /**
     * Update all fields of a model Required scopes: ifc:write
     * Update all fields of a model
     */
    async fullUpdateIfc(requestParameters: FullUpdateIfcRequest): Promise<Ifc> {
        const response = await this.fullUpdateIfcRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a Property Required scopes: ifc:write
     * Update some fields of a Property
     */
    async fullUpdateIfcPropertyRaw(requestParameters: FullUpdateIfcPropertyRequest): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateIfcProperty.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateIfcProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateIfcProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateIfcProperty.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateIfcProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Property Required scopes: ifc:write
     * Update some fields of a Property
     */
    async fullUpdateIfcProperty(requestParameters: FullUpdateIfcPropertyRequest): Promise<Property> {
        const response = await this.fullUpdateIfcPropertyRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:write
     * Update all fields of many PropertyDefinitions of a model
     */
    async fullUpdateIfcPropertyDefinitionRaw(requestParameters: FullUpdateIfcPropertyDefinitionRequest): Promise<runtime.ApiResponse<PropertyDefinition>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateIfcPropertyDefinition.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateIfcPropertyDefinition.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateIfcPropertyDefinition.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateIfcPropertyDefinition.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateIfcPropertyDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyDefinitionToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDefinitionFromJSON(jsonValue));
    }

    /**
     *  Required scopes: ifc:write
     * Update all fields of many PropertyDefinitions of a model
     */
    async fullUpdateIfcPropertyDefinition(requestParameters: FullUpdateIfcPropertyDefinitionRequest): Promise<PropertyDefinition> {
        const response = await this.fullUpdateIfcPropertyDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:write
     * Update all fields of a Unit of a model
     */
    async fullUpdateIfcUnitRaw(requestParameters: FullUpdateIfcUnitRequest): Promise<runtime.ApiResponse<Unit>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateIfcUnit.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateIfcUnit.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateIfcUnit.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateIfcUnit.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateIfcUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UnitToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitFromJSON(jsonValue));
    }

    /**
     *  Required scopes: ifc:write
     * Update all fields of a Unit of a model
     */
    async fullUpdateIfcUnit(requestParameters: FullUpdateIfcUnitRequest): Promise<Unit> {
        const response = await this.fullUpdateIfcUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of a layer
     */
    async fullUpdateLayerRaw(requestParameters: FullUpdateLayerRequest): Promise<runtime.ApiResponse<Layer>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateLayer.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateLayer.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateLayer.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateLayer.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateLayer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LayerToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerFromJSON(jsonValue));
    }

    /**
     * Update all fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of a layer
     */
    async fullUpdateLayer(requestParameters: FullUpdateLayerRequest): Promise<Layer> {
        const response = await this.fullUpdateLayerRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:write
     * Update the status of a processor handler
     */
    async fullUpdateProcessorHandlerRaw(requestParameters: FullUpdateProcessorHandlerRequest): Promise<runtime.ApiResponse<ProcessorHandler>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateProcessorHandler.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateProcessorHandler.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateProcessorHandler.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateProcessorHandler.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateProcessorHandler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorHandlerToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorHandlerFromJSON(jsonValue));
    }

    /**
     *  Required scopes: ifc:write
     * Update the status of a processor handler
     */
    async fullUpdateProcessorHandler(requestParameters: FullUpdateProcessorHandlerRequest): Promise<ProcessorHandler> {
        const response = await this.fullUpdateProcessorHandlerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a PropertySet Required scopes: ifc:write
     * Update all fields of a PropertySet
     */
    async fullUpdatePropertySetRaw(requestParameters: FullUpdatePropertySetRequest): Promise<runtime.ApiResponse<PropertySet>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdatePropertySet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdatePropertySet.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdatePropertySet.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdatePropertySet.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdatePropertySet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PropertySetToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertySetFromJSON(jsonValue));
    }

    /**
     * Update all fields of a PropertySet Required scopes: ifc:write
     * Update all fields of a PropertySet
     */
    async fullUpdatePropertySet(requestParameters: FullUpdatePropertySetRequest): Promise<PropertySet> {
        const response = await this.fullUpdatePropertySetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of a space
     */
    async fullUpdateSpaceRaw(requestParameters: FullUpdateSpaceRequest): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateSpace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateSpace.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateSpace.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateSpace.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateSpace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SpaceToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceFromJSON(jsonValue));
    }

    /**
     * Update all fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of a space
     */
    async fullUpdateSpace(requestParameters: FullUpdateSpaceRequest): Promise<Space> {
        const response = await this.fullUpdateSpaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of a system
     */
    async fullUpdateSystemRaw(requestParameters: FullUpdateSystemRequest): Promise<runtime.ApiResponse<System>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateSystem.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateSystem.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateSystem.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling fullUpdateSystem.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateSystem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SystemToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemFromJSON(jsonValue));
    }

    /**
     * Update all fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of a system
     */
    async fullUpdateSystem(requestParameters: FullUpdateSystemRequest): Promise<System> {
        const response = await this.fullUpdateSystemRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of a zone
     */
    async fullUpdateZoneRaw(requestParameters: FullUpdateZoneRequest): Promise<runtime.ApiResponse<Zone>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateZone.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateZone.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateZone.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateZone.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateZone.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ZoneToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneFromJSON(jsonValue));
    }

    /**
     * Update all fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of a zone
     */
    async fullUpdateZone(requestParameters: FullUpdateZoneRequest): Promise<Zone> {
        const response = await this.fullUpdateZoneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of a space
     */
    async fullUpdateZoneSpaceRaw(requestParameters: FullUpdateZoneSpaceRequest): Promise<runtime.ApiResponse<ZoneSpace>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateZoneSpace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateZoneSpace.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateZoneSpace.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateZoneSpace.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling fullUpdateZoneSpace.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateZoneSpace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ZoneSpaceToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneSpaceFromJSON(jsonValue));
    }

    /**
     * Update all fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update all fields of a space
     */
    async fullUpdateZoneSpace(requestParameters: FullUpdateZoneSpaceRequest): Promise<ZoneSpace> {
        const response = await this.fullUpdateZoneSpaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve one token created for this model Required scopes: ifc:token_manage
     * Retrieve one token created for this model
     */
    async getAccessTokenRaw(requestParameters: GetAccessTokenRequest): Promise<runtime.ApiResponse<IfcAccessToken>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getAccessToken.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getAccessToken.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getAccessToken.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling getAccessToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcAccessTokenFromJSON(jsonValue));
    }

    /**
     * Retrieve one token created for this model Required scopes: ifc:token_manage
     * Retrieve one token created for this model
     */
    async getAccessToken(requestParameters: GetAccessTokenRequest): Promise<IfcAccessToken> {
        const response = await this.getAccessTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all tokens created for this model Required scopes: ifc:token_manage
     * Retrieve all tokens created for this model
     */
    async getAccessTokensRaw(requestParameters: GetAccessTokensRequest): Promise<runtime.ApiResponse<Array<IfcAccessToken>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getAccessTokens.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getAccessTokens.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getAccessTokens.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IfcAccessTokenFromJSON));
    }

    /**
     * Retrieve all tokens created for this model Required scopes: ifc:token_manage
     * Retrieve all tokens created for this model
     */
    async getAccessTokens(requestParameters: GetAccessTokensRequest): Promise<Array<IfcAccessToken>> {
        const response = await this.getAccessTokensRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all classifications of an element Required scopes: ifc:read
     * Retrieve all classifications of an element
     */
    async getClassificationsOfElementRaw(requestParameters: GetClassificationsOfElementRequest): Promise<runtime.ApiResponse<Array<Classification>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getClassificationsOfElement.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getClassificationsOfElement.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getClassificationsOfElement.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getClassificationsOfElement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationFromJSON));
    }

    /**
     * Retrieve all classifications of an element Required scopes: ifc:read
     * Retrieve all classifications of an element
     */
    async getClassificationsOfElement(requestParameters: GetClassificationsOfElementRequest): Promise<Array<Classification>> {
        const response = await this.getClassificationsOfElementRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve an element of a model Required scopes: ifc:read
     * Retrieve an element of a model
     */
    async getElementRaw(requestParameters: GetElementRequest): Promise<runtime.ApiResponse<Element>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElement.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElement.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElement.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getElement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ElementFromJSON(jsonValue));
    }

    /**
     * Retrieve an element of a model Required scopes: ifc:read
     * Retrieve an element of a model
     */
    async getElement(requestParameters: GetElementRequest): Promise<Element> {
        const response = await this.getElementRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a PropertySet of an element Required scopes: ifc:read
     * Retrieve a PropertySet of an element
     */
    async getElementPropertySetRaw(requestParameters: GetElementPropertySetRequest): Promise<runtime.ApiResponse<PropertySet>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySet.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getElementPropertySet.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySet.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertySetFromJSON(jsonValue));
    }

    /**
     * Retrieve a PropertySet of an element Required scopes: ifc:read
     * Retrieve a PropertySet of an element
     */
    async getElementPropertySet(requestParameters: GetElementPropertySetRequest): Promise<PropertySet> {
        const response = await this.getElementPropertySetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all Properties of a PropertySet Required scopes: ifc:read
     * Retrieve all Properties of a PropertySet
     */
    async getElementPropertySetPropertiesRaw(requestParameters: GetElementPropertySetPropertiesRequest): Promise<runtime.ApiResponse<Array<Property>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetProperties.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetProperties.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetProperties.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetProperties.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyFromJSON));
    }

    /**
     * Retrieve all Properties of a PropertySet Required scopes: ifc:read
     * Retrieve all Properties of a PropertySet
     */
    async getElementPropertySetProperties(requestParameters: GetElementPropertySetPropertiesRequest): Promise<Array<Property>> {
        const response = await this.getElementPropertySetPropertiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a Property of a PropertySet Required scopes: ifc:read
     * Retrieve a Property of a PropertySet
     */
    async getElementPropertySetPropertyRaw(requestParameters: GetElementPropertySetPropertyRequest): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetProperty.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetProperty.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getElementPropertySetProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetProperty.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Retrieve a Property of a PropertySet Required scopes: ifc:read
     * Retrieve a Property of a PropertySet
     */
    async getElementPropertySetProperty(requestParameters: GetElementPropertySetPropertyRequest): Promise<Property> {
        const response = await this.getElementPropertySetPropertyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a Definition of a Property Required scopes: ifc:read
     * Retrieve a Definition of a Property
     */
    async getElementPropertySetPropertyDefinitionRaw(requestParameters: GetElementPropertySetPropertyDefinitionRequest): Promise<runtime.ApiResponse<PropertyDefinition>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling getElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetPropertyDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDefinitionFromJSON(jsonValue));
    }

    /**
     * Retrieve a Definition of a Property Required scopes: ifc:read
     * Retrieve a Definition of a Property
     */
    async getElementPropertySetPropertyDefinition(requestParameters: GetElementPropertySetPropertyDefinitionRequest): Promise<PropertyDefinition> {
        const response = await this.getElementPropertySetPropertyDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a Unit of a Definition Required scopes: ifc:read
     * Retrieve a Unit of a Definition
     */
    async getElementPropertySetPropertyDefinitionUnitRaw(requestParameters: GetElementPropertySetPropertyDefinitionUnitRequest): Promise<runtime.ApiResponse<Unit>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.propertydefinitionPk === null || requestParameters.propertydefinitionPk === undefined) {
            throw new runtime.RequiredError('propertydefinitionPk','Required parameter requestParameters.propertydefinitionPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertydefinition_pk"}}`, encodeURIComponent(String(requestParameters.propertydefinitionPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitFromJSON(jsonValue));
    }

    /**
     * Retrieve a Unit of a Definition Required scopes: ifc:read
     * Retrieve a Unit of a Definition
     */
    async getElementPropertySetPropertyDefinitionUnit(requestParameters: GetElementPropertySetPropertyDefinitionUnitRequest): Promise<Unit> {
        const response = await this.getElementPropertySetPropertyDefinitionUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all Units of a Definition Required scopes: ifc:read
     * Retrieve all Units of a Definition
     */
    async getElementPropertySetPropertyDefinitionUnitsRaw(requestParameters: GetElementPropertySetPropertyDefinitionUnitsRequest): Promise<runtime.ApiResponse<Array<Unit>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnits.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetPropertyDefinitionUnits.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnits.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnits.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnits.');
        }

        if (requestParameters.propertydefinitionPk === null || requestParameters.propertydefinitionPk === undefined) {
            throw new runtime.RequiredError('propertydefinitionPk','Required parameter requestParameters.propertydefinitionPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnits.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertydefinition_pk"}}`, encodeURIComponent(String(requestParameters.propertydefinitionPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UnitFromJSON));
    }

    /**
     * Retrieve all Units of a Definition Required scopes: ifc:read
     * Retrieve all Units of a Definition
     */
    async getElementPropertySetPropertyDefinitionUnits(requestParameters: GetElementPropertySetPropertyDefinitionUnitsRequest): Promise<Array<Unit>> {
        const response = await this.getElementPropertySetPropertyDefinitionUnitsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all Definitions of a PropertySet Required scopes: ifc:read
     * Retrieve all Definitions of a PropertySet
     */
    async getElementPropertySetPropertyDefinitionsRaw(requestParameters: GetElementPropertySetPropertyDefinitionsRequest): Promise<runtime.ApiResponse<Array<PropertyDefinition>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetPropertyDefinitions.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetPropertyDefinitions.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetPropertyDefinitions.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetPropertyDefinitions.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling getElementPropertySetPropertyDefinitions.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetPropertyDefinitions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyDefinitionFromJSON));
    }

    /**
     * Retrieve all Definitions of a PropertySet Required scopes: ifc:read
     * Retrieve all Definitions of a PropertySet
     */
    async getElementPropertySetPropertyDefinitions(requestParameters: GetElementPropertySetPropertyDefinitionsRequest): Promise<Array<PropertyDefinition>> {
        const response = await this.getElementPropertySetPropertyDefinitionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all PropertySets of an element Required scopes: ifc:read
     * Retrieve all PropertySets of an element
     */
    async getElementPropertySetsRaw(requestParameters: GetElementPropertySetsRequest): Promise<runtime.ApiResponse<Array<PropertySet>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySets.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySets.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySets.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySets.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertySetFromJSON));
    }

    /**
     * Retrieve all PropertySets of an element Required scopes: ifc:read
     * Retrieve all PropertySets of an element
     */
    async getElementPropertySets(requestParameters: GetElementPropertySetsRequest): Promise<Array<PropertySet>> {
        const response = await this.getElementPropertySetsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements Required scopes: ifc:read
     * Retrieve all elements of a model
     */
    async getElementsRaw(requestParameters: GetElementsRequest): Promise<runtime.ApiResponse<Array<Element>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElements.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElements.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElements.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.classification !== undefined) {
            queryParameters['classification'] = requestParameters.classification;
        }

        if (requestParameters.classificationNotation !== undefined) {
            queryParameters['classification__notation'] = requestParameters.classificationNotation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementFromJSON));
    }

    /**
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements Required scopes: ifc:read
     * Retrieve all elements of a model
     */
    async getElements(requestParameters: GetElementsRequest): Promise<Array<Element>> {
        const response = await this.getElementsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all elements with the classification Required scopes: ifc:read
     * Retrieve all elements with the classification
     */
    async getElementsFromClassificationRaw(requestParameters: GetElementsFromClassificationRequest): Promise<runtime.ApiResponse<Array<Element>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementsFromClassification.');
        }

        if (requestParameters.ifcClassificationPk === null || requestParameters.ifcClassificationPk === undefined) {
            throw new runtime.RequiredError('ifcClassificationPk','Required parameter requestParameters.ifcClassificationPk was null or undefined when calling getElementsFromClassification.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementsFromClassification.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementsFromClassification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_classification_pk"}}`, encodeURIComponent(String(requestParameters.ifcClassificationPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementFromJSON));
    }

    /**
     * Retrieve all elements with the classification Required scopes: ifc:read
     * Retrieve all elements with the classification
     */
    async getElementsFromClassification(requestParameters: GetElementsFromClassificationRequest): Promise<Array<Element>> {
        const response = await this.getElementsFromClassificationRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:read
     * Retrieve one model
     */
    async getIfcRaw(requestParameters: GetIfcRequest): Promise<runtime.ApiResponse<Ifc>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfc.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfc.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcFromJSON(jsonValue));
    }

    /**
     *  Required scopes: ifc:read
     * Retrieve one model
     */
    async getIfc(requestParameters: GetIfcRequest): Promise<Ifc> {
        const response = await this.getIfcRaw(requestParameters);
        return await response.value();
    }

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the map file  Required scopes: ifc:read
     * Get svg file
     */
    async getIfcBVHRaw(requestParameters: GetIfcBVHRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcBVH.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcBVH.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcBVH.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/map`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the map file  Required scopes: ifc:read
     * Get svg file
     */
    async getIfcBVH(requestParameters: GetIfcBVHRequest): Promise<void> {
        await this.getIfcBVHRaw(requestParameters);
    }

    /**
     * Retrieve all classifications in a model Required scopes: ifc:read
     * Retrieve all classifications in a model
     */
    async getIfcClassificationsRaw(requestParameters: GetIfcClassificationsRequest): Promise<runtime.ApiResponse<Array<Classification>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcClassifications.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcClassifications.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcClassifications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationFromJSON));
    }

    /**
     * Retrieve all classifications in a model Required scopes: ifc:read
     * Retrieve all classifications in a model
     */
    async getIfcClassifications(requestParameters: GetIfcClassificationsRequest): Promise<Array<Classification>> {
        const response = await this.getIfcClassificationsRaw(requestParameters);
        return await response.value();
    }

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the gltf file  Required scopes: ifc:read
     * Get gltf file
     */
    async getIfcGLTFRaw(requestParameters: GetIfcGLTFRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcGLTF.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcGLTF.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcGLTF.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/gltf`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the gltf file  Required scopes: ifc:read
     * Get gltf file
     */
    async getIfcGLTF(requestParameters: GetIfcGLTFRequest): Promise<void> {
        await this.getIfcGLTFRaw(requestParameters);
    }

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the bvh file  Required scopes: ifc:read
     * Get bvh file
     */
    async getIfcMapRaw(requestParameters: GetIfcMapRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcMap.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcMap.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcMap.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/bvh`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the bvh file  Required scopes: ifc:read
     * Get bvh file
     */
    async getIfcMap(requestParameters: GetIfcMapRequest): Promise<void> {
        await this.getIfcMapRaw(requestParameters);
    }

    /**
     * Retrieve all PropertySets of a model Required scopes: ifc:read
     * Retrieve all Properties of a model
     */
    async getIfcPropertiesRaw(requestParameters: GetIfcPropertiesRequest): Promise<runtime.ApiResponse<Array<Property>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcProperties.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcProperties.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcProperties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyFromJSON));
    }

    /**
     * Retrieve all PropertySets of a model Required scopes: ifc:read
     * Retrieve all Properties of a model
     */
    async getIfcProperties(requestParameters: GetIfcPropertiesRequest): Promise<Array<Property>> {
        const response = await this.getIfcPropertiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a Property of a model Required scopes: ifc:read
     * Retrieve a Property of a model
     */
    async getIfcPropertyRaw(requestParameters: GetIfcPropertyRequest): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcProperty.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Retrieve a Property of a model Required scopes: ifc:read
     * Retrieve a Property of a model
     */
    async getIfcProperty(requestParameters: GetIfcPropertyRequest): Promise<Property> {
        const response = await this.getIfcPropertyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a PropertyDefinition of a model Required scopes: ifc:read
     * Retrieve a PropertyDefinition of a model
     */
    async getIfcPropertyDefinitionRaw(requestParameters: GetIfcPropertyDefinitionRequest): Promise<runtime.ApiResponse<PropertyDefinition>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcPropertyDefinition.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcPropertyDefinition.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcPropertyDefinition.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcPropertyDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDefinitionFromJSON(jsonValue));
    }

    /**
     * Retrieve a PropertyDefinition of a model Required scopes: ifc:read
     * Retrieve a PropertyDefinition of a model
     */
    async getIfcPropertyDefinition(requestParameters: GetIfcPropertyDefinitionRequest): Promise<PropertyDefinition> {
        const response = await this.getIfcPropertyDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all PropertyDefinitions of a model Required scopes: ifc:read
     * Retrieve all PropertyDefinitions of a model
     */
    async getIfcPropertyDefinitionsRaw(requestParameters: GetIfcPropertyDefinitionsRequest): Promise<runtime.ApiResponse<Array<PropertyDefinition>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcPropertyDefinitions.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcPropertyDefinitions.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcPropertyDefinitions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyDefinitionFromJSON));
    }

    /**
     * Retrieve all PropertyDefinitions of a model Required scopes: ifc:read
     * Retrieve all PropertyDefinitions of a model
     */
    async getIfcPropertyDefinitions(requestParameters: GetIfcPropertyDefinitionsRequest): Promise<Array<PropertyDefinition>> {
        const response = await this.getIfcPropertyDefinitionsRaw(requestParameters);
        return await response.value();
    }

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the structure file  Required scopes: ifc:read
     * Get structure file
     */
    async getIfcStructureRaw(requestParameters: GetIfcStructureRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcStructure.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcStructure.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcStructure.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/structure`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the structure file  Required scopes: ifc:read
     * Get structure file
     */
    async getIfcStructure(requestParameters: GetIfcStructureRequest): Promise<void> {
        await this.getIfcStructureRaw(requestParameters);
    }

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the system file  Required scopes: ifc:read
     * Get systems file
     */
    async getIfcSystemsRaw(requestParameters: GetIfcSystemsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcSystems.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcSystems.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcSystems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/systems`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *          DEPRECATED: Now, retrieve the file url in the ifc object itself         Returns the system file  Required scopes: ifc:read
     * Get systems file
     */
    async getIfcSystems(requestParameters: GetIfcSystemsRequest): Promise<void> {
        await this.getIfcSystemsRaw(requestParameters);
    }

    /**
     * Retrieve a Unit of a model Required scopes: ifc:read
     * Retrieve a Unit of a model
     */
    async getIfcUnitRaw(requestParameters: GetIfcUnitRequest): Promise<runtime.ApiResponse<Unit>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcUnit.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcUnit.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcUnit.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitFromJSON(jsonValue));
    }

    /**
     * Retrieve a Unit of a model Required scopes: ifc:read
     * Retrieve a Unit of a model
     */
    async getIfcUnit(requestParameters: GetIfcUnitRequest): Promise<Unit> {
        const response = await this.getIfcUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all Units of a model Required scopes: ifc:read
     * Retrieve all Units of a model
     */
    async getIfcUnitsRaw(requestParameters: GetIfcUnitsRequest): Promise<runtime.ApiResponse<Array<Unit>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcUnits.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcUnits.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcUnits.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UnitFromJSON));
    }

    /**
     * Retrieve all Units of a model Required scopes: ifc:read
     * Retrieve all Units of a model
     */
    async getIfcUnits(requestParameters: GetIfcUnitsRequest): Promise<Array<Unit>> {
        const response = await this.getIfcUnitsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all models Required scopes: ifc:read
     * Retrieve all models
     */
    async getIfcsRaw(requestParameters: GetIfcsRequest): Promise<runtime.ApiResponse<Array<Ifc>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcs.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.source !== undefined) {
            queryParameters['source'] = requestParameters.source;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IfcFromJSON));
    }

    /**
     * Retrieve all models Required scopes: ifc:read
     * Retrieve all models
     */
    async getIfcs(requestParameters: GetIfcsRequest): Promise<Array<Ifc>> {
        const response = await this.getIfcsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a layer of a model Required scopes: ifc:read
     * Retrieve a layer of a model
     */
    async getLayerRaw(requestParameters: GetLayerRequest): Promise<runtime.ApiResponse<Layer>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getLayer.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLayer.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getLayer.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getLayer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerFromJSON(jsonValue));
    }

    /**
     * Retrieve a layer of a model Required scopes: ifc:read
     * Retrieve a layer of a model
     */
    async getLayer(requestParameters: GetLayerRequest): Promise<Layer> {
        const response = await this.getLayerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all layers of a model. Required scopes: ifc:read
     * Retrieve all layers of a model
     */
    async getLayersRaw(requestParameters: GetLayersRequest): Promise<runtime.ApiResponse<Array<Layer>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getLayers.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getLayers.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getLayers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LayerFromJSON));
    }

    /**
     * Retrieve all layers of a model. Required scopes: ifc:read
     * Retrieve all layers of a model
     */
    async getLayers(requestParameters: GetLayersRequest): Promise<Array<Layer>> {
        const response = await this.getLayersRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:read
     * Retrieve a processor handler
     */
    async getProcessorHandlerRaw(requestParameters: GetProcessorHandlerRequest): Promise<runtime.ApiResponse<ProcessorHandler>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getProcessorHandler.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProcessorHandler.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getProcessorHandler.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getProcessorHandler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorHandlerFromJSON(jsonValue));
    }

    /**
     *  Required scopes: ifc:read
     * Retrieve a processor handler
     */
    async getProcessorHandler(requestParameters: GetProcessorHandlerRequest): Promise<ProcessorHandler> {
        const response = await this.getProcessorHandlerRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:read
     * Get all processor handlers
     */
    async getProcessorHandlersRaw(requestParameters: GetProcessorHandlersRequest): Promise<runtime.ApiResponse<Array<ProcessorHandler>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getProcessorHandlers.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getProcessorHandlers.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getProcessorHandlers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessorHandlerFromJSON));
    }

    /**
     *  Required scopes: ifc:read
     * Get all processor handlers
     */
    async getProcessorHandlers(requestParameters: GetProcessorHandlersRequest): Promise<Array<ProcessorHandler>> {
        const response = await this.getProcessorHandlersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a PropertySet of a model Required scopes: ifc:read
     * Retrieve a PropertySet of a model
     */
    async getPropertySetRaw(requestParameters: GetPropertySetRequest): Promise<runtime.ApiResponse<PropertySet>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getPropertySet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPropertySet.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getPropertySet.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getPropertySet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertySetFromJSON(jsonValue));
    }

    /**
     * Retrieve a PropertySet of a model Required scopes: ifc:read
     * Retrieve a PropertySet of a model
     */
    async getPropertySet(requestParameters: GetPropertySetRequest): Promise<PropertySet> {
        const response = await this.getPropertySetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all PropertySets of a model Required scopes: ifc:read
     * Retrieve all PropertySets of a model
     */
    async getPropertySetsRaw(requestParameters: GetPropertySetsRequest): Promise<runtime.ApiResponse<Array<PropertySet>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getPropertySets.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getPropertySets.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getPropertySets.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertySetFromJSON));
    }

    /**
     * Retrieve all PropertySets of a model Required scopes: ifc:read
     * Retrieve all PropertySets of a model
     */
    async getPropertySets(requestParameters: GetPropertySetsRequest): Promise<Array<PropertySet>> {
        const response = await this.getPropertySetsRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Returns elements, property_sets, properties, definitions and units in a JSON optimized structure  Required scopes: ifc:read
     * Retrieve all elements in a optimized format
     */
    async getRawElementsRaw(requestParameters: GetRawElementsRequest): Promise<runtime.ApiResponse<RawElements>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRawElements.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getRawElements.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRawElements.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.classification !== undefined) {
            queryParameters['classification'] = requestParameters.classification;
        }

        if (requestParameters.classificationNotation !== undefined) {
            queryParameters['classification__notation'] = requestParameters.classificationNotation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RawElementsFromJSON(jsonValue));
    }

    /**
     *          Returns elements, property_sets, properties, definitions and units in a JSON optimized structure  Required scopes: ifc:read
     * Retrieve all elements in a optimized format
     */
    async getRawElements(requestParameters: GetRawElementsRequest): Promise<RawElements> {
        const response = await this.getRawElementsRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Retrieve an element of a model with a simple value representation         Format response :             {                 :element_uuid: {                     \"attributes\": {                         :property_name: value,                         :property_name: value                     },                     :property_set_name: {                         :property_name: value,                         :property_name: value                     }                 }             }  Required scopes: ifc:read
     * Retrieve an element of a model with a simple value representation
     */
    async getSimpleElementRaw(requestParameters: GetSimpleElementRequest): Promise<runtime.ApiResponse<SimpleElement>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSimpleElement.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSimpleElement.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSimpleElement.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getSimpleElement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}/simple`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleElementFromJSON(jsonValue));
    }

    /**
     *          Retrieve an element of a model with a simple value representation         Format response :             {                 :element_uuid: {                     \"attributes\": {                         :property_name: value,                         :property_name: value                     },                     :property_set_name: {                         :property_name: value,                         :property_name: value                     }                 }             }  Required scopes: ifc:read
     * Retrieve an element of a model with a simple value representation
     */
    async getSimpleElement(requestParameters: GetSimpleElementRequest): Promise<SimpleElement> {
        const response = await this.getSimpleElementRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Retrieve all elements of a model with a simple value representation         Format response :             {                 :element_uuid: {                     \"attributes\": {                         :property_name: value,                         :property_name: value                     },                     :property_set_name: {                         :property_name: value,                         :property_name: value                     }                 }             }  Required scopes: ifc:read
     * Retrieve all elements of a model with a simple value representation
     */
    async getSimpleElementsRaw(requestParameters: GetSimpleElementsRequest): Promise<runtime.ApiResponse<SimpleElement>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSimpleElements.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSimpleElements.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSimpleElements.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.classification !== undefined) {
            queryParameters['classification'] = requestParameters.classification;
        }

        if (requestParameters.classificationNotation !== undefined) {
            queryParameters['classification__notation'] = requestParameters.classificationNotation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/simple`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleElementFromJSON(jsonValue));
    }

    /**
     *          Retrieve all elements of a model with a simple value representation         Format response :             {                 :element_uuid: {                     \"attributes\": {                         :property_name: value,                         :property_name: value                     },                     :property_set_name: {                         :property_name: value,                         :property_name: value                     }                 }             }  Required scopes: ifc:read
     * Retrieve all elements of a model with a simple value representation
     */
    async getSimpleElements(requestParameters: GetSimpleElementsRequest): Promise<SimpleElement> {
        const response = await this.getSimpleElementsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve one space of the model Required scopes: ifc:read
     * Retrieve one space of the model
     */
    async getSpaceRaw(requestParameters: GetSpaceRequest): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSpace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSpace.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSpace.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSpace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceFromJSON(jsonValue));
    }

    /**
     * Retrieve one space of the model Required scopes: ifc:read
     * Retrieve one space of the model
     */
    async getSpace(requestParameters: GetSpaceRequest): Promise<Space> {
        const response = await this.getSpaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all spaces of the model Required scopes: ifc:read
     * Retrieve all spaces of the model
     */
    async getSpacesRaw(requestParameters: GetSpacesRequest): Promise<runtime.ApiResponse<Array<Space>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSpaces.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSpaces.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSpaces.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpaceFromJSON));
    }

    /**
     * Retrieve all spaces of the model Required scopes: ifc:read
     * Retrieve all spaces of the model
     */
    async getSpaces(requestParameters: GetSpacesRequest): Promise<Array<Space>> {
        const response = await this.getSpacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a system of a model Required scopes: ifc:read
     * Retrieve a system of a model
     */
    async getSystemRaw(requestParameters: GetSystemRequest): Promise<runtime.ApiResponse<System>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSystem.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSystem.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSystem.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getSystem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemFromJSON(jsonValue));
    }

    /**
     * Retrieve a system of a model Required scopes: ifc:read
     * Retrieve a system of a model
     */
    async getSystem(requestParameters: GetSystemRequest): Promise<System> {
        const response = await this.getSystemRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all systems of a model. Required scopes: ifc:read
     * Retrieve all systems of a model
     */
    async getSystemsRaw(requestParameters: GetSystemsRequest): Promise<runtime.ApiResponse<Array<System>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSystems.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSystems.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSystems.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SystemFromJSON));
    }

    /**
     * Retrieve all systems of a model. Required scopes: ifc:read
     * Retrieve all systems of a model
     */
    async getSystems(requestParameters: GetSystemsRequest): Promise<Array<System>> {
        const response = await this.getSystemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve one zone of a model Required scopes: ifc:read
     * Retrieve one zone of a model
     */
    async getZoneRaw(requestParameters: GetZoneRequest): Promise<runtime.ApiResponse<Zone>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getZone.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getZone.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getZone.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getZone.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneFromJSON(jsonValue));
    }

    /**
     * Retrieve one zone of a model Required scopes: ifc:read
     * Retrieve one zone of a model
     */
    async getZone(requestParameters: GetZoneRequest): Promise<Zone> {
        const response = await this.getZoneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve one space of a zone Required scopes: ifc:read
     * Retrieve one space of a zone
     */
    async getZoneSpaceRaw(requestParameters: GetZoneSpaceRequest): Promise<runtime.ApiResponse<ZoneSpace>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getZoneSpace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getZoneSpace.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getZoneSpace.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getZoneSpace.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling getZoneSpace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneSpaceFromJSON(jsonValue));
    }

    /**
     * Retrieve one space of a zone Required scopes: ifc:read
     * Retrieve one space of a zone
     */
    async getZoneSpace(requestParameters: GetZoneSpaceRequest): Promise<ZoneSpace> {
        const response = await this.getZoneSpaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all spaces of a zone Required scopes: ifc:read
     * Retrieve all spaces of a zone
     */
    async getZoneSpacesRaw(requestParameters: GetZoneSpacesRequest): Promise<runtime.ApiResponse<Array<ZoneSpace>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getZoneSpaces.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getZoneSpaces.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getZoneSpaces.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling getZoneSpaces.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ZoneSpaceFromJSON));
    }

    /**
     * Retrieve all spaces of a zone Required scopes: ifc:read
     * Retrieve all spaces of a zone
     */
    async getZoneSpaces(requestParameters: GetZoneSpacesRequest): Promise<Array<ZoneSpace>> {
        const response = await this.getZoneSpacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve parent zones of a model. Children zones we\'ll be in the \'zones\' field Required scopes: ifc:read
     * Retrieve zones of a model
     */
    async getZonesRaw(requestParameters: GetZonesRequest): Promise<runtime.ApiResponse<Array<Zone>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getZones.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getZones.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getZones.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.color !== undefined) {
            queryParameters['color'] = requestParameters.color;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ZoneFromJSON));
    }

    /**
     * Retrieve parent zones of a model. Children zones we\'ll be in the \'zones\' field Required scopes: ifc:read
     * Retrieve zones of a model
     */
    async getZones(requestParameters: GetZonesRequest): Promise<Array<Zone>> {
        const response = await this.getZonesRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all associations between classifications and elements Required scopes: ifc:read
     * List all associations between classifications and elements
     */
    async listClassificationElementRelationsRaw(requestParameters: ListClassificationElementRelationsRequest): Promise<runtime.ApiResponse<Array<ElementClassificationRelation>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling listClassificationElementRelations.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling listClassificationElementRelations.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling listClassificationElementRelations.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementClassificationRelationFromJSON));
    }

    /**
     * List all associations between classifications and elements Required scopes: ifc:read
     * List all associations between classifications and elements
     */
    async listClassificationElementRelations(requestParameters: ListClassificationElementRelationsRequest): Promise<Array<ElementClassificationRelation>> {
        const response = await this.listClassificationElementRelationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Merge IFC files. The merged IFC file will be put in the same folder that the first IFC of the list Required scopes: ifc:write
     * Merge IFC files
     */
    async mergeIfcsRaw(requestParameters: MergeIfcsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling mergeIfcs.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling mergeIfcs.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling mergeIfcs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/merge`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcMergeToJSON(requestParameters.data),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Merge IFC files. The merged IFC file will be put in the same folder that the first IFC of the list Required scopes: ifc:write
     * Merge IFC files
     */
    async mergeIfcs(requestParameters: MergeIfcsRequest): Promise<void> {
        await this.mergeIfcsRaw(requestParameters);
    }

    /**
     * Optimize the IFC. A new optimized IFC file will be put in the same folder that the original IFC Required scopes: ifc:write
     * Optimize the IFC
     */
    async optimizeIfcRaw(requestParameters: OptimizeIfcRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling optimizeIfc.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling optimizeIfc.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling optimizeIfc.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling optimizeIfc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/optimize`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcOptimizeToJSON(requestParameters.data),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Optimize the IFC. A new optimized IFC file will be put in the same folder that the original IFC Required scopes: ifc:write
     * Optimize the IFC
     */
    async optimizeIfc(requestParameters: OptimizeIfcRequest): Promise<void> {
        await this.optimizeIfcRaw(requestParameters);
    }

    /**
     * Remove all property sets from element. Property Sets will not be deleted, just detached from element Required scopes: ifc:write
     * Remove all property sets from element
     */
    async removeAllElementPropertySetRaw(requestParameters: RemoveAllElementPropertySetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeAllElementPropertySet.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeAllElementPropertySet.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeAllElementPropertySet.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeAllElementPropertySet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/all`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove all property sets from element. Property Sets will not be deleted, just detached from element Required scopes: ifc:write
     * Remove all property sets from element
     */
    async removeAllElementPropertySet(requestParameters: RemoveAllElementPropertySetRequest): Promise<void> {
        await this.removeAllElementPropertySetRaw(requestParameters);
    }

    /**
     * The classification will not be deleted Required scopes: ifc:write
     * Remove a classification from an element
     */
    async removeClassificationOfElementRaw(requestParameters: RemoveClassificationOfElementRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeClassificationOfElement.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeClassificationOfElement.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeClassificationOfElement.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeClassificationOfElement.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeClassificationOfElement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The classification will not be deleted Required scopes: ifc:write
     * Remove a classification from an element
     */
    async removeClassificationOfElement(requestParameters: RemoveClassificationOfElementRequest): Promise<void> {
        await this.removeClassificationOfElementRaw(requestParameters);
    }

    /**
     * Delete the relation between the element and the property set. Does not delete any object Required scopes: ifc:write
     * Remove a PropertySet from an element
     */
    async removeElementPropertySetRaw(requestParameters: RemoveElementPropertySetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeElementPropertySet.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeElementPropertySet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeElementPropertySet.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeElementPropertySet.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeElementPropertySet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the relation between the element and the property set. Does not delete any object Required scopes: ifc:write
     * Remove a PropertySet from an element
     */
    async removeElementPropertySet(requestParameters: RemoveElementPropertySetRequest): Promise<void> {
        await this.removeElementPropertySetRaw(requestParameters);
    }

    /**
     *  Required scopes: ifc:write
     * Remove a property from a PropertySet
     */
    async removeElementPropertySetPropertyRaw(requestParameters: RemoveElementPropertySetPropertyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeElementPropertySetProperty.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeElementPropertySetProperty.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeElementPropertySetProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeElementPropertySetProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeElementPropertySetProperty.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling removeElementPropertySetProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Required scopes: ifc:write
     * Remove a property from a PropertySet
     */
    async removeElementPropertySetProperty(requestParameters: RemoveElementPropertySetPropertyRequest): Promise<void> {
        await this.removeElementPropertySetPropertyRaw(requestParameters);
    }

    /**
     *  Required scopes: ifc:write
     * Remove a Definition from a Property
     */
    async removeElementPropertySetPropertyDefinitionRaw(requestParameters: RemoveElementPropertySetPropertyDefinitionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling removeElementPropertySetPropertyDefinition.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling removeElementPropertySetPropertyDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Required scopes: ifc:write
     * Remove a Definition from a Property
     */
    async removeElementPropertySetPropertyDefinition(requestParameters: RemoveElementPropertySetPropertyDefinitionRequest): Promise<void> {
        await this.removeElementPropertySetPropertyDefinitionRaw(requestParameters);
    }

    /**
     * Remove a Unit from a Definition Required scopes: ifc:write
     * Remove a Unit from a Definition
     */
    async removeElementPropertySetPropertyDefinitionUnitRaw(requestParameters: RemoveElementPropertySetPropertyDefinitionUnitRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.propertydefinitionPk === null || requestParameters.propertydefinitionPk === undefined) {
            throw new runtime.RequiredError('propertydefinitionPk','Required parameter requestParameters.propertydefinitionPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnit.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertydefinition_pk"}}`, encodeURIComponent(String(requestParameters.propertydefinitionPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a Unit from a Definition Required scopes: ifc:write
     * Remove a Unit from a Definition
     */
    async removeElementPropertySetPropertyDefinitionUnit(requestParameters: RemoveElementPropertySetPropertyDefinitionUnitRequest): Promise<void> {
        await this.removeElementPropertySetPropertyDefinitionUnitRaw(requestParameters);
    }

    /**
     * Remove the classification from all elements. No element nor classification will be deleted Required scopes: ifc:write
     * Remove the classification from all elements
     */
    async removeElementsFromClassificationRaw(requestParameters: RemoveElementsFromClassificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeElementsFromClassification.');
        }

        if (requestParameters.ifcClassificationPk === null || requestParameters.ifcClassificationPk === undefined) {
            throw new runtime.RequiredError('ifcClassificationPk','Required parameter requestParameters.ifcClassificationPk was null or undefined when calling removeElementsFromClassification.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeElementsFromClassification.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeElementsFromClassification.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling removeElementsFromClassification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{ifc_classification_pk}/element/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_classification_pk"}}`, encodeURIComponent(String(requestParameters.ifcClassificationPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the classification from all elements. No element nor classification will be deleted Required scopes: ifc:write
     * Remove the classification from all elements
     */
    async removeElementsFromClassification(requestParameters: RemoveElementsFromClassificationRequest): Promise<void> {
        await this.removeElementsFromClassificationRaw(requestParameters);
    }

    /**
     * Reprocess the IFC. All data that are not in the original IFC files will be lost Required scopes: ifc:write
     * Reprocess IFC file
     */
    async reprocessIfcRaw(requestParameters: ReprocessIfcRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling reprocessIfc.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reprocessIfc.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling reprocessIfc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/reprocess`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reprocess the IFC. All data that are not in the original IFC files will be lost Required scopes: ifc:write
     * Reprocess IFC file
     */
    async reprocessIfc(requestParameters: ReprocessIfcRequest): Promise<void> {
        await this.reprocessIfcRaw(requestParameters);
    }

    /**
     * You can update the expiration date or the read_only field Required scopes: ifc:token_manage
     * Update some fields of a token
     */
    async updateAccessTokenRaw(requestParameters: UpdateAccessTokenRequest): Promise<runtime.ApiResponse<IfcAccessToken>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateAccessToken.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateAccessToken.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateAccessToken.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling updateAccessToken.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateAccessToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IfcAccessTokenToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcAccessTokenFromJSON(jsonValue));
    }

    /**
     * You can update the expiration date or the read_only field Required scopes: ifc:token_manage
     * Update some fields of a token
     */
    async updateAccessToken(requestParameters: UpdateAccessTokenRequest): Promise<IfcAccessToken> {
        const response = await this.updateAccessTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a zone. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a zone
     */
    async updateElementRaw(requestParameters: UpdateElementRequest): Promise<runtime.ApiResponse<Element>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateElement.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateElement.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateElement.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateElement.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateElement.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ElementToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ElementFromJSON(jsonValue));
    }

    /**
     * Update some fields of a zone. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a zone
     */
    async updateElement(requestParameters: UpdateElementRequest): Promise<Element> {
        const response = await this.updateElementRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new property will be created to replace the property for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty Required scopes: ifc:write
     * Update a property from an element
     */
    async updateElementPropertySetPropertyRaw(requestParameters: UpdateElementPropertySetPropertyRequest): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateElementPropertySetProperty.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling updateElementPropertySetProperty.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateElementPropertySetProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateElementPropertySetProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateElementPropertySetProperty.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling updateElementPropertySetProperty.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateElementPropertySetProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new property will be created to replace the property for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty Required scopes: ifc:write
     * Update a property from an element
     */
    async updateElementPropertySetProperty(requestParameters: UpdateElementPropertySetPropertyRequest): Promise<Property> {
        const response = await this.updateElementPropertySetPropertyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a model Required scopes: ifc:write
     * Update some fields of a model
     */
    async updateIfcRaw(requestParameters: UpdateIfcRequest): Promise<runtime.ApiResponse<Ifc>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateIfc.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIfc.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateIfc.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateIfc.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IfcToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcFromJSON(jsonValue));
    }

    /**
     * Update some fields of a model Required scopes: ifc:write
     * Update some fields of a model
     */
    async updateIfc(requestParameters: UpdateIfcRequest): Promise<Ifc> {
        const response = await this.updateIfcRaw(requestParameters);
        return await response.value();
    }

    /**
     *          Patch ifc files (gltf, structure, svg, etc)  Required scopes: ifc:write
     * Update models file (gltf, svg, structure, etc)
     */
    async updateIfcFilesRaw(requestParameters: UpdateIfcFilesRequest): Promise<runtime.ApiResponse<IfcFiles>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateIfcFiles.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIfcFiles.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateIfcFiles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.structureFile !== undefined) {
            formParams.append('structure_file', requestParameters.structureFile as any);
        }

        if (requestParameters.systemsFile !== undefined) {
            formParams.append('systems_file', requestParameters.systemsFile as any);
        }

        if (requestParameters.mapFile !== undefined) {
            formParams.append('map_file', requestParameters.mapFile as any);
        }

        if (requestParameters.gltfFile !== undefined) {
            formParams.append('gltf_file', requestParameters.gltfFile as any);
        }

        if (requestParameters.gltfWithOpeningsFile !== undefined) {
            formParams.append('gltf_with_openings_file', requestParameters.gltfWithOpeningsFile as any);
        }

        if (requestParameters.bvhTreeFile !== undefined) {
            formParams.append('bvh_tree_file', requestParameters.bvhTreeFile as any);
        }

        if (requestParameters.viewer360File !== undefined) {
            formParams.append('viewer_360_file', requestParameters.viewer360File as any);
        }

        if (requestParameters.xktFile !== undefined) {
            formParams.append('xkt_file', requestParameters.xktFile as any);
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/files`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcFilesFromJSON(jsonValue));
    }

    /**
     *          Patch ifc files (gltf, structure, svg, etc)  Required scopes: ifc:write
     * Update models file (gltf, svg, structure, etc)
     */
    async updateIfcFiles(requestParameters: UpdateIfcFilesRequest): Promise<IfcFiles> {
        const response = await this.updateIfcFilesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a Property Required scopes: ifc:write
     * Update some fields of a Property
     */
    async updateIfcPropertyRaw(requestParameters: UpdateIfcPropertyRequest): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateIfcProperty.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIfcProperty.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateIfcProperty.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateIfcProperty.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateIfcProperty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Property Required scopes: ifc:write
     * Update some fields of a Property
     */
    async updateIfcProperty(requestParameters: UpdateIfcPropertyRequest): Promise<Property> {
        const response = await this.updateIfcPropertyRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:write
     * Update some fields of many PropertyDefinitions of a model
     */
    async updateIfcPropertyDefinitionRaw(requestParameters: UpdateIfcPropertyDefinitionRequest): Promise<runtime.ApiResponse<PropertyDefinition>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateIfcPropertyDefinition.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIfcPropertyDefinition.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateIfcPropertyDefinition.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateIfcPropertyDefinition.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateIfcPropertyDefinition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyDefinitionToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDefinitionFromJSON(jsonValue));
    }

    /**
     *  Required scopes: ifc:write
     * Update some fields of many PropertyDefinitions of a model
     */
    async updateIfcPropertyDefinition(requestParameters: UpdateIfcPropertyDefinitionRequest): Promise<PropertyDefinition> {
        const response = await this.updateIfcPropertyDefinitionRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:write
     * Update some fields of a Unit of a model
     */
    async updateIfcUnitRaw(requestParameters: UpdateIfcUnitRequest): Promise<runtime.ApiResponse<Unit>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateIfcUnit.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIfcUnit.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateIfcUnit.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateIfcUnit.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateIfcUnit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UnitToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitFromJSON(jsonValue));
    }

    /**
     *  Required scopes: ifc:write
     * Update some fields of a Unit of a model
     */
    async updateIfcUnit(requestParameters: UpdateIfcUnitRequest): Promise<Unit> {
        const response = await this.updateIfcUnitRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a layer
     */
    async updateLayerRaw(requestParameters: UpdateLayerRequest): Promise<runtime.ApiResponse<Layer>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateLayer.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLayer.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateLayer.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateLayer.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateLayer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LayerToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerFromJSON(jsonValue));
    }

    /**
     * Update some fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a layer
     */
    async updateLayer(requestParameters: UpdateLayerRequest): Promise<Layer> {
        const response = await this.updateLayerRaw(requestParameters);
        return await response.value();
    }

    /**
     *  Required scopes: ifc:write
     * Update the status of a processor handler
     */
    async updateProcessorHandlerRaw(requestParameters: UpdateProcessorHandlerRequest): Promise<runtime.ApiResponse<ProcessorHandler>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateProcessorHandler.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProcessorHandler.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateProcessorHandler.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateProcessorHandler.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateProcessorHandler.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessorHandlerToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorHandlerFromJSON(jsonValue));
    }

    /**
     *  Required scopes: ifc:write
     * Update the status of a processor handler
     */
    async updateProcessorHandler(requestParameters: UpdateProcessorHandlerRequest): Promise<ProcessorHandler> {
        const response = await this.updateProcessorHandlerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a PropertySet Required scopes: ifc:write
     * Update some fields of a PropertySet
     */
    async updatePropertySetRaw(requestParameters: UpdatePropertySetRequest): Promise<runtime.ApiResponse<PropertySet>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updatePropertySet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePropertySet.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updatePropertySet.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updatePropertySet.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updatePropertySet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PropertySetToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertySetFromJSON(jsonValue));
    }

    /**
     * Update some fields of a PropertySet Required scopes: ifc:write
     * Update some fields of a PropertySet
     */
    async updatePropertySet(requestParameters: UpdatePropertySetRequest): Promise<PropertySet> {
        const response = await this.updatePropertySetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a space
     */
    async updateSpaceRaw(requestParameters: UpdateSpaceRequest): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateSpace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSpace.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateSpace.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateSpace.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateSpace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SpaceToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceFromJSON(jsonValue));
    }

    /**
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a space
     */
    async updateSpace(requestParameters: UpdateSpaceRequest): Promise<Space> {
        const response = await this.updateSpaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a system
     */
    async updateSystemRaw(requestParameters: UpdateSystemRequest): Promise<runtime.ApiResponse<System>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateSystem.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateSystem.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateSystem.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateSystem.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateSystem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SystemToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemFromJSON(jsonValue));
    }

    /**
     * Update some fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a system
     */
    async updateSystem(requestParameters: UpdateSystemRequest): Promise<System> {
        const response = await this.updateSystemRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a zone
     */
    async updateZoneRaw(requestParameters: UpdateZoneRequest): Promise<runtime.ApiResponse<Zone>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateZone.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateZone.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateZone.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateZone.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateZone.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ZoneToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneFromJSON(jsonValue));
    }

    /**
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a zone
     */
    async updateZone(requestParameters: UpdateZoneRequest): Promise<Zone> {
        const response = await this.updateZoneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a space
     */
    async updateZoneSpaceRaw(requestParameters: UpdateZoneSpaceRequest): Promise<runtime.ApiResponse<ZoneSpace>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateZoneSpace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateZoneSpace.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateZoneSpace.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateZoneSpace.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling updateZoneSpace.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateZoneSpace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ZoneSpaceToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneSpaceFromJSON(jsonValue));
    }

    /**
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file Required scopes: ifc:write
     * Update some fields of a space
     */
    async updateZoneSpace(requestParameters: UpdateZoneSpaceRequest): Promise<ZoneSpace> {
        const response = await this.updateZoneSpaceRaw(requestParameters);
        return await response.value();
    }

}
