/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Building,
    BuildingFromJSON,
    BuildingToJSON,
    CheckerResult,
    CheckerResultFromJSON,
    CheckerResultToJSON,
    CheckerResultRequest,
    CheckerResultRequestFromJSON,
    CheckerResultRequestToJSON,
    Classification,
    ClassificationFromJSON,
    ClassificationToJSON,
    ClassificationRequest,
    ClassificationRequestFromJSON,
    ClassificationRequestToJSON,
    CreateBuildingByNameRequest,
    CreateBuildingByNameRequestFromJSON,
    CreateBuildingByNameRequestToJSON,
    CreateModelRequest,
    CreateModelRequestFromJSON,
    CreateModelRequestToJSON,
    Document,
    DocumentFromJSON,
    DocumentToJSON,
    DocumentWithElementList,
    DocumentWithElementListFromJSON,
    DocumentWithElementListToJSON,
    Element,
    ElementFromJSON,
    ElementToJSON,
    ElementClassificationRelation,
    ElementClassificationRelationFromJSON,
    ElementClassificationRelationToJSON,
    ElementClassificationRelationRequest,
    ElementClassificationRelationRequestFromJSON,
    ElementClassificationRelationRequestToJSON,
    ElementPropertySetRelationRequest,
    ElementPropertySetRelationRequestFromJSON,
    ElementPropertySetRelationRequestToJSON,
    ElementRequest,
    ElementRequestFromJSON,
    ElementRequestToJSON,
    IfcAccessToken,
    IfcAccessTokenFromJSON,
    IfcAccessTokenToJSON,
    IfcAccessTokenRequest,
    IfcAccessTokenRequestFromJSON,
    IfcAccessTokenRequestToJSON,
    IfcChecker,
    IfcCheckerFromJSON,
    IfcCheckerToJSON,
    IfcCheckerRequest,
    IfcCheckerRequestFromJSON,
    IfcCheckerRequestToJSON,
    IfcExport,
    IfcExportFromJSON,
    IfcExportToJSON,
    IfcExportRequest,
    IfcExportRequestFromJSON,
    IfcExportRequestToJSON,
    IfcMergeRequest,
    IfcMergeRequestFromJSON,
    IfcMergeRequestToJSON,
    IfcOptimizeRequest,
    IfcOptimizeRequestFromJSON,
    IfcOptimizeRequestToJSON,
    Layer,
    LayerFromJSON,
    LayerToJSON,
    LayerRequest,
    LayerRequestFromJSON,
    LayerRequestToJSON,
    Material,
    MaterialFromJSON,
    MaterialToJSON,
    Model,
    ModelFromJSON,
    ModelToJSON,
    ModelErrors,
    ModelErrorsFromJSON,
    ModelErrorsToJSON,
    ModelErrorsRequest,
    ModelErrorsRequestFromJSON,
    ModelErrorsRequestToJSON,
    ModelFiles,
    ModelFilesFromJSON,
    ModelFilesToJSON,
    PatchedCheckerResultRequest,
    PatchedCheckerResultRequestFromJSON,
    PatchedCheckerResultRequestToJSON,
    PatchedElementRequest,
    PatchedElementRequestFromJSON,
    PatchedElementRequestToJSON,
    PatchedIfcAccessTokenRequest,
    PatchedIfcAccessTokenRequestFromJSON,
    PatchedIfcAccessTokenRequestToJSON,
    PatchedIfcCheckerRequest,
    PatchedIfcCheckerRequestFromJSON,
    PatchedIfcCheckerRequestToJSON,
    PatchedLayerRequest,
    PatchedLayerRequestFromJSON,
    PatchedLayerRequestToJSON,
    PatchedModelRequest,
    PatchedModelRequestFromJSON,
    PatchedModelRequestToJSON,
    PatchedPositioningPlanRequest,
    PatchedPositioningPlanRequestFromJSON,
    PatchedPositioningPlanRequestToJSON,
    PatchedProcessorHandlerRequest,
    PatchedProcessorHandlerRequestFromJSON,
    PatchedProcessorHandlerRequestToJSON,
    PatchedPropertyDefinitionRequest,
    PatchedPropertyDefinitionRequestFromJSON,
    PatchedPropertyDefinitionRequestToJSON,
    PatchedPropertyRequest,
    PatchedPropertyRequestFromJSON,
    PatchedPropertyRequestToJSON,
    PatchedPropertySetRequest,
    PatchedPropertySetRequestFromJSON,
    PatchedPropertySetRequestToJSON,
    PatchedSpaceRequest,
    PatchedSpaceRequestFromJSON,
    PatchedSpaceRequestToJSON,
    PatchedSystemRequest,
    PatchedSystemRequestFromJSON,
    PatchedSystemRequestToJSON,
    PatchedUnitRequest,
    PatchedUnitRequestFromJSON,
    PatchedUnitRequestToJSON,
    PatchedZoneRequest,
    PatchedZoneRequestFromJSON,
    PatchedZoneRequestToJSON,
    PatchedZoneSpaceRequest,
    PatchedZoneSpaceRequestFromJSON,
    PatchedZoneSpaceRequestToJSON,
    PositioningPlan,
    PositioningPlanFromJSON,
    PositioningPlanToJSON,
    ProcessorHandler,
    ProcessorHandlerFromJSON,
    ProcessorHandlerToJSON,
    Property,
    PropertyFromJSON,
    PropertyToJSON,
    PropertyDefinition,
    PropertyDefinitionFromJSON,
    PropertyDefinitionToJSON,
    PropertyDefinitionRequest,
    PropertyDefinitionRequestFromJSON,
    PropertyDefinitionRequestToJSON,
    PropertyRequest,
    PropertyRequestFromJSON,
    PropertyRequestToJSON,
    PropertySet,
    PropertySetFromJSON,
    PropertySetToJSON,
    PropertySetRequest,
    PropertySetRequestFromJSON,
    PropertySetRequestToJSON,
    RawElements,
    RawElementsFromJSON,
    RawElementsToJSON,
    RawElementsRequest,
    RawElementsRequestFromJSON,
    RawElementsRequestToJSON,
    SimpleElement,
    SimpleElementFromJSON,
    SimpleElementToJSON,
    Space,
    SpaceFromJSON,
    SpaceToJSON,
    SpaceRequest,
    SpaceRequestFromJSON,
    SpaceRequestToJSON,
    Storey,
    StoreyFromJSON,
    StoreyToJSON,
    System,
    SystemFromJSON,
    SystemToJSON,
    SystemRequest,
    SystemRequestFromJSON,
    SystemRequestToJSON,
    Unit,
    UnitFromJSON,
    UnitToJSON,
    UnitRequest,
    UnitRequestFromJSON,
    UnitRequestToJSON,
    Zone,
    ZoneFromJSON,
    ZoneToJSON,
    ZoneRequest,
    ZoneRequestFromJSON,
    ZoneRequestToJSON,
    ZoneSpace,
    ZoneSpaceFromJSON,
    ZoneSpaceToJSON,
    ZoneSpaceRequest,
    ZoneSpaceRequestFromJSON,
    ZoneSpaceRequestToJSON,
} from '../models';

export interface AddIfcErrorsDeprecatedRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
    modelErrorsRequest?: ModelErrorsRequest;
}

export interface BulkDeleteIfcClassificationsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface BulkDeleteIfcPropertiesDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface BulkDeleteIfcPropertyDefinitionsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface BulkDeleteIfcUnitsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface BulkDeletePropertySetDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface BulkFullUpdateElementsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    elementRequest: Array<ElementRequest>;
    classification?: string;
    classificationNotation?: string;
    type?: string;
}

export interface BulkFullUpdateIfcPropertyDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    propertyRequest: Array<PropertyRequest>;
}

export interface BulkRemoveClassificationsOfElementDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
}

export interface BulkRemoveDocumentsOfElementDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
}

export interface BulkRemoveElementsFromClassificationDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    modelClassificationPk: number;
    projectPk: number;
}

export interface BulkUpdateElementsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    elementRequest: Array<ElementRequest>;
    classification?: string;
    classificationNotation?: string;
    type?: string;
}

export interface BulkUpdateIfcPropertyDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    propertyRequest: Array<PropertyRequest>;
}

export interface CreateAccessTokenDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    ifcAccessTokenRequest?: IfcAccessTokenRequest;
}

export interface CreateBuildingDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface CreateBuildingPlanDeprecatedRequest {
    buildingUuid: string;
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface CreateCheckerDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    ifcCheckerRequest?: IfcCheckerRequest;
}

export interface CreateCheckerResultDeprecatedRequest {
    checkerPk: number;
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    checkerResultRequest?: CheckerResultRequest;
}

export interface CreateClassificationElementRelationsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    elementClassificationRelationRequest: Array<ElementClassificationRelationRequest>;
}

export interface CreateClassificationsOfElementDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
    classificationRequest: Array<ClassificationRequest>;
}

export interface CreateElementDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    elementRequest: Array<ElementRequest>;
    classification?: string;
    classificationNotation?: string;
    type?: string;
}

export interface CreateElementPropertySetDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
    propertySetRequest?: PropertySetRequest;
}

export interface CreateElementPropertySetPropertyDefinitionDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
    propertyPk: number;
    propertysetPk: number;
    propertyDefinitionRequest?: PropertyDefinitionRequest;
}

export interface CreateElementPropertySetPropertyDefinitionUnitDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
    propertyPk: number;
    propertydefinitionPk: number;
    propertysetPk: number;
    unitRequest: UnitRequest;
}

export interface CreateElementPropertySetPropertyDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
    propertysetPk: number;
    propertyRequest: PropertyRequest;
}

export interface CreateIfcDeprecatedRequest {
    cloudPk: number;
    projectPk: number;
    createModelRequest: CreateModelRequest;
}

export interface CreateIfcPropertyDefinitionDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    propertyDefinitionRequest: Array<PropertyDefinitionRequest>;
}

export interface CreateIfcUnitDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    unitRequest: Array<UnitRequest>;
}

export interface CreateLayerDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    layerRequest: LayerRequest;
}

export interface CreateMetaBuildingDeprecatedRequest {
    cloudPk: number;
    projectPk: number;
    createBuildingByNameRequest: CreateBuildingByNameRequest;
}

export interface CreatePropertySetDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    propertySetRequest: Array<PropertySetRequest>;
}

export interface CreatePropertySetElementRelationsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    elementPropertySetRelationRequest: Array<ElementPropertySetRelationRequest>;
}

export interface CreateRawElementsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    rawElementsRequest: RawElementsRequest;
}

export interface CreateSpaceDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    spaceRequest: Array<SpaceRequest>;
}

export interface CreateStoreyDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface CreateStoreyPlanDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    storeyUuid: string;
}

export interface CreateSystemDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    systemRequest: SystemRequest;
}

export interface CreateZoneDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    zoneRequest: Array<ZoneRequest>;
    color?: string;
}

export interface CreateZoneSpaceDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    zonePk: number;
    zoneSpaceRequest: ZoneSpaceRequest;
}

export interface DeleteAccessTokenDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    token: string;
}

export interface DeleteBuildingDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface DeleteBuildingPlanDeprecatedRequest {
    buildingUuid: string;
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface DeleteCheckerDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface DeleteCheckerResultDeprecatedRequest {
    checkerPk: number;
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface DeleteElementDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface DeleteIfcDeprecatedRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
}

export interface DeleteIfcPropertyDefinitionDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface DeleteIfcPropertyDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface DeleteIfcUnitDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface DeleteIfcWithoutDocDeprecatedRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
}

export interface DeleteLayerDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface DeletePropertySetDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface DeleteSpaceDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface DeleteStoreyDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface DeleteStoreyPlanDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    storeyUuid: string;
}

export interface DeleteSystemDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface DeleteZoneDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface DeleteZoneSpaceDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    zonePk: number;
}

export interface ExportIfcDeprecatedRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
    ifcExportRequest: IfcExportRequest;
}

export interface FullUpdateElementDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
    elementRequest: ElementRequest;
}

export interface GetAccessTokenDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    token: string;
}

export interface GetAccessTokensDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetBuildingDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface GetBuildingPlanPositioningDeprecatedRequest {
    buildingUuid: string;
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetBuildingsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetCheckerDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetCheckerResultDeprecatedRequest {
    checkerPk: number;
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetCheckerResultsDeprecatedRequest {
    checkerPk: number;
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetCheckersDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetClassificationsOfElementDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
}

export interface GetDocumentsOfElementDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
}

export interface GetElementDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface GetElementLinkedDocumentsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    classification?: string;
    classificationNotation?: string;
    type?: string;
}

export interface GetElementPropertySetDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetElementPropertySetPropertiesDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
    propertysetPk: number;
}

export interface GetElementPropertySetPropertyDefinitionDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
    propertyPk: number;
    propertysetPk: number;
}

export interface GetElementPropertySetPropertyDefinitionUnitDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
    propertyPk: number;
    propertydefinitionPk: number;
    propertysetPk: number;
}

export interface GetElementPropertySetPropertyDefinitionUnitsDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
    propertyPk: number;
    propertydefinitionPk: number;
    propertysetPk: number;
}

export interface GetElementPropertySetPropertyDefinitionsDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
    propertyPk: number;
    propertysetPk: number;
}

export interface GetElementPropertySetPropertyDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
    propertysetPk: number;
}

export interface GetElementPropertySetsDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
}

export interface GetElementsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    classification?: string;
    classificationNotation?: string;
    type?: string;
}

export interface GetElementsFromClassificationDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    modelClassificationPk: number;
    projectPk: number;
}

export interface GetIfcClassificationsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetIfcDeprecatedRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
}

export interface GetIfcMaterialDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetIfcMaterialsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetIfcPropertiesDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetIfcPropertyDefinitionDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetIfcPropertyDefinitionsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetIfcPropertyDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetIfcUnitDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetIfcUnitsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetIfcsDeprecatedRequest {
    cloudPk: number;
    projectPk: number;
    source?: GetIfcsDeprecatedSourceEnum;
    status?: Array<GetIfcsDeprecatedStatusEnum>;
    type?: Array<GetIfcsDeprecatedTypeEnum>;
}

export interface GetLayerDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetLayersDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetMaterialDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetMaterialsDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
}

export interface GetProcessorHandlerDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetProcessorHandlersDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetPropertySetDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetPropertySetsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetRawElementsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetSimpleElementDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface GetSimpleElementsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetSpaceDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetSpacesDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetStoreyDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface GetStoreyPlanPositioningDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    storeyUuid: string;
}

export interface GetStoreysDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetSystemDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface GetSystemsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetZoneDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface GetZoneSpaceDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    zonePk: number;
}

export interface GetZoneSpacesDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    zonePk: number;
}

export interface GetZonesDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    color?: string;
}

export interface LaunchNewCheckDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    ifcCheckerRequest?: IfcCheckerRequest;
}

export interface LinkDocumentsOfElementDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
}

export interface ListClassificationElementRelationsDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
}

export interface MergeIfcsDeprecatedRequest {
    cloudPk: number;
    projectPk: number;
    ifcMergeRequest: IfcMergeRequest;
}

export interface OptimizeIfcDeprecatedRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
    ifcOptimizeRequest?: IfcOptimizeRequest;
}

export interface RemoveAllElementPropertySetDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    ifcPk: number;
    projectPk: number;
}

export interface RemoveClassificationOfElementDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface RemoveDocumentOfElementDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface RemoveElementPropertySetDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
}

export interface RemoveElementPropertySetPropertyDefinitionDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
    propertyPk: number;
    propertysetPk: number;
}

export interface RemoveElementPropertySetPropertyDefinitionUnitDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
    propertyPk: number;
    propertydefinitionPk: number;
    propertysetPk: number;
}

export interface RemoveElementPropertySetPropertyDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
    propertysetPk: number;
}

export interface RemoveElementsFromClassificationDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    modelClassificationPk: number;
    projectPk: number;
    uuid: string;
}

export interface ReprocessIfcDeprecatedRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
}

export interface UpdateAccessTokenDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    token: string;
    patchedIfcAccessTokenRequest?: PatchedIfcAccessTokenRequest;
}

export interface UpdateBuildingDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface UpdateBuildingPlanPositioningDeprecatedRequest {
    buildingUuid: string;
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedPositioningPlanRequest?: PatchedPositioningPlanRequest;
}

export interface UpdateCheckerDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedIfcCheckerRequest?: PatchedIfcCheckerRequest;
}

export interface UpdateCheckerResultDeprecatedRequest {
    checkerPk: number;
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedCheckerResultRequest?: PatchedCheckerResultRequest;
}

export interface UpdateElementDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
    patchedElementRequest?: PatchedElementRequest;
}

export interface UpdateElementPropertySetPropertyDeprecatedRequest {
    cloudPk: number;
    elementUuid: string;
    id: number;
    ifcPk: number;
    projectPk: number;
    propertysetPk: number;
    patchedPropertyRequest?: PatchedPropertyRequest;
}

export interface UpdateIfcDeprecatedRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
    patchedModelRequest?: PatchedModelRequest;
}

export interface UpdateIfcFilesDeprecatedRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
    structureFile?: Blob | null;
    systemsFile?: Blob | null;
    mapFile?: Blob | null;
    gltfFile?: Blob | null;
    gltfWithOpeningsFile?: Blob | null;
    bvhTreeFile?: Blob | null;
    viewer360File?: Blob | null;
    xktFile?: Blob | null;
}

export interface UpdateIfcPropertyDefinitionDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedPropertyDefinitionRequest?: PatchedPropertyDefinitionRequest;
}

export interface UpdateIfcPropertyDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedPropertyRequest?: PatchedPropertyRequest;
}

export interface UpdateIfcUnitDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedUnitRequest?: PatchedUnitRequest;
}

export interface UpdateLayerDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedLayerRequest?: PatchedLayerRequest;
}

export interface UpdateOrderBuildingPlanDeprecatedRequest {
    buildingUuid: string;
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    requestBody: Array<number>;
}

export interface UpdateOrderStoreyPlanDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    storeyUuid: string;
    requestBody: Array<number>;
}

export interface UpdateOrderStoreysDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    requestBody: Array<string>;
}

export interface UpdateProcessorHandlerDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedProcessorHandlerRequest?: PatchedProcessorHandlerRequest;
}

export interface UpdatePropertySetDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedPropertySetRequest?: PatchedPropertySetRequest;
}

export interface UpdateSpaceDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedSpaceRequest?: PatchedSpaceRequest;
}

export interface UpdateStoreyDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
}

export interface UpdateStoreyPlanPositioningDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    storeyUuid: string;
    patchedPositioningPlanRequest?: PatchedPositioningPlanRequest;
}

export interface UpdateSystemDeprecatedRequest {
    cloudPk: number;
    ifcPk: number;
    projectPk: number;
    uuid: string;
    patchedSystemRequest?: PatchedSystemRequest;
}

export interface UpdateZoneDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    patchedZoneRequest?: PatchedZoneRequest;
}

export interface UpdateZoneSpaceDeprecatedRequest {
    cloudPk: number;
    id: number;
    ifcPk: number;
    projectPk: number;
    zonePk: number;
    patchedZoneSpaceRequest?: PatchedZoneSpaceRequest;
}

/**
 * 
 */
export class IfcApi extends runtime.BaseAPI {

    /**
     * Model errors are warnings and errors during model process. They alert about missing elements or malformed files  Required scopes: ifc:write, model:write
     * Add errors to model
     */
    async addIfcErrorsDeprecatedRaw(requestParameters: AddIfcErrorsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelErrors>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling addIfcErrorsDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addIfcErrorsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling addIfcErrorsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/errors`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelErrorsRequestToJSON(requestParameters.modelErrorsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelErrorsFromJSON(jsonValue));
    }

    /**
     * Model errors are warnings and errors during model process. They alert about missing elements or malformed files  Required scopes: ifc:write, model:write
     * Add errors to model
     */
    async addIfcErrorsDeprecated(cloudPk: number, id: number, projectPk: number, modelErrorsRequest?: ModelErrorsRequest, initOverrides?: RequestInit): Promise<ModelErrors> {
        const response = await this.addIfcErrorsDeprecatedRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk, modelErrorsRequest: modelErrorsRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete relation between filtered classifications (eg. /classifications?name=untec) and all mode\'s elements. No classification will be deleted on this endpoint, only the relation between model\'s elements and their classification.  Required scopes: ifc:write, model:write
     * Remove all classifications from model\'s elements
     */
    async bulkDeleteIfcClassificationsDeprecatedRaw(requestParameters: BulkDeleteIfcClassificationsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkDeleteIfcClassificationsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkDeleteIfcClassificationsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkDeleteIfcClassificationsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete relation between filtered classifications (eg. /classifications?name=untec) and all mode\'s elements. No classification will be deleted on this endpoint, only the relation between model\'s elements and their classification.  Required scopes: ifc:write, model:write
     * Remove all classifications from model\'s elements
     */
    async bulkDeleteIfcClassificationsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.bulkDeleteIfcClassificationsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Delete many Property of a model
     */
    async bulkDeleteIfcPropertiesDeprecatedRaw(requestParameters: BulkDeleteIfcPropertiesDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkDeleteIfcPropertiesDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkDeleteIfcPropertiesDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkDeleteIfcPropertiesDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Delete many Property of a model
     */
    async bulkDeleteIfcPropertiesDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.bulkDeleteIfcPropertiesDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Delete many PropertyDefinitions of a model
     */
    async bulkDeleteIfcPropertyDefinitionsDeprecatedRaw(requestParameters: BulkDeleteIfcPropertyDefinitionsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkDeleteIfcPropertyDefinitionsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkDeleteIfcPropertyDefinitionsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkDeleteIfcPropertyDefinitionsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Delete many PropertyDefinitions of a model
     */
    async bulkDeleteIfcPropertyDefinitionsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.bulkDeleteIfcPropertyDefinitionsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Delete many Units of a model
     */
    async bulkDeleteIfcUnitsDeprecatedRaw(requestParameters: BulkDeleteIfcUnitsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkDeleteIfcUnitsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkDeleteIfcUnitsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkDeleteIfcUnitsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Delete many Units of a model
     */
    async bulkDeleteIfcUnitsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.bulkDeleteIfcUnitsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Delete many PropertySet of a model
     */
    async bulkDeletePropertySetDeprecatedRaw(requestParameters: BulkDeletePropertySetDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkDeletePropertySetDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkDeletePropertySetDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkDeletePropertySetDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Delete many PropertySet of a model
     */
    async bulkDeletePropertySetDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.bulkDeletePropertySetDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Update many elements at once (only changing fields may be defined)
     */
    async bulkFullUpdateElementsDeprecatedRaw(requestParameters: BulkFullUpdateElementsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Element>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkFullUpdateElementsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkFullUpdateElementsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkFullUpdateElementsDeprecated.');
        }

        if (requestParameters.elementRequest === null || requestParameters.elementRequest === undefined) {
            throw new runtime.RequiredError('elementRequest','Required parameter requestParameters.elementRequest was null or undefined when calling bulkFullUpdateElementsDeprecated.');
        }

        const queryParameters: any = {};

        if (requestParameters.classification !== undefined) {
            queryParameters['classification'] = requestParameters.classification;
        }

        if (requestParameters.classificationNotation !== undefined) {
            queryParameters['classification__notation'] = requestParameters.classificationNotation;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.elementRequest.map(ElementRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementFromJSON));
    }

    /**
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Update many elements at once (only changing fields may be defined)
     */
    async bulkFullUpdateElementsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, elementRequest: Array<ElementRequest>, classification?: string, classificationNotation?: string, type?: string, initOverrides?: RequestInit): Promise<Array<Element>> {
        const response = await this.bulkFullUpdateElementsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, elementRequest: elementRequest, classification: classification, classificationNotation: classificationNotation, type: type }, initOverrides);
        return await response.value();
    }

    /**
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Update some fields of many properties of a model
     */
    async bulkFullUpdateIfcPropertyDeprecatedRaw(requestParameters: BulkFullUpdateIfcPropertyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Property>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkFullUpdateIfcPropertyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkFullUpdateIfcPropertyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkFullUpdateIfcPropertyDeprecated.');
        }

        if (requestParameters.propertyRequest === null || requestParameters.propertyRequest === undefined) {
            throw new runtime.RequiredError('propertyRequest','Required parameter requestParameters.propertyRequest was null or undefined when calling bulkFullUpdateIfcPropertyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.propertyRequest.map(PropertyRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyFromJSON));
    }

    /**
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Update some fields of many properties of a model
     */
    async bulkFullUpdateIfcPropertyDeprecated(cloudPk: number, ifcPk: number, projectPk: number, propertyRequest: Array<PropertyRequest>, initOverrides?: RequestInit): Promise<Array<Property>> {
        const response = await this.bulkFullUpdateIfcPropertyDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, propertyRequest: propertyRequest }, initOverrides);
        return await response.value();
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Remove many classifications from an element
     */
    async bulkRemoveClassificationsOfElementDeprecatedRaw(requestParameters: BulkRemoveClassificationsOfElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkRemoveClassificationsOfElementDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling bulkRemoveClassificationsOfElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkRemoveClassificationsOfElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkRemoveClassificationsOfElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Remove many classifications from an element
     */
    async bulkRemoveClassificationsOfElementDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.bulkRemoveClassificationsOfElementDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Remove many documents from an element
     */
    async bulkRemoveDocumentsOfElementDeprecatedRaw(requestParameters: BulkRemoveDocumentsOfElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkRemoveDocumentsOfElementDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling bulkRemoveDocumentsOfElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkRemoveDocumentsOfElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkRemoveDocumentsOfElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Remove many documents from an element
     */
    async bulkRemoveDocumentsOfElementDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.bulkRemoveDocumentsOfElementDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Remove the classifications from all elements
     */
    async bulkRemoveElementsFromClassificationDeprecatedRaw(requestParameters: BulkRemoveElementsFromClassificationDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkRemoveElementsFromClassificationDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkRemoveElementsFromClassificationDeprecated.');
        }

        if (requestParameters.modelClassificationPk === null || requestParameters.modelClassificationPk === undefined) {
            throw new runtime.RequiredError('modelClassificationPk','Required parameter requestParameters.modelClassificationPk was null or undefined when calling bulkRemoveElementsFromClassificationDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkRemoveElementsFromClassificationDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element/bulk_destroy`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"model_classification_pk"}}`, encodeURIComponent(String(requestParameters.modelClassificationPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write
     * Remove the classifications from all elements
     */
    async bulkRemoveElementsFromClassificationDeprecated(cloudPk: number, ifcPk: number, modelClassificationPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.bulkRemoveElementsFromClassificationDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, modelClassificationPk: modelClassificationPk, projectPk: projectPk }, initOverrides);
    }

    /**
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Update many elements at once (all field must be defined)
     */
    async bulkUpdateElementsDeprecatedRaw(requestParameters: BulkUpdateElementsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Element>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkUpdateElementsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkUpdateElementsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkUpdateElementsDeprecated.');
        }

        if (requestParameters.elementRequest === null || requestParameters.elementRequest === undefined) {
            throw new runtime.RequiredError('elementRequest','Required parameter requestParameters.elementRequest was null or undefined when calling bulkUpdateElementsDeprecated.');
        }

        const queryParameters: any = {};

        if (requestParameters.classification !== undefined) {
            queryParameters['classification'] = requestParameters.classification;
        }

        if (requestParameters.classificationNotation !== undefined) {
            queryParameters['classification__notation'] = requestParameters.classificationNotation;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.elementRequest.map(ElementRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementFromJSON));
    }

    /**
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Update many elements at once (all field must be defined)
     */
    async bulkUpdateElementsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, elementRequest: Array<ElementRequest>, classification?: string, classificationNotation?: string, type?: string, initOverrides?: RequestInit): Promise<Array<Element>> {
        const response = await this.bulkUpdateElementsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, elementRequest: elementRequest, classification: classification, classificationNotation: classificationNotation, type: type }, initOverrides);
        return await response.value();
    }

    /**
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors 
     * Update all fields of many properties of a model
     */
    async bulkUpdateIfcPropertyDeprecatedRaw(requestParameters: BulkUpdateIfcPropertyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Property>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling bulkUpdateIfcPropertyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling bulkUpdateIfcPropertyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling bulkUpdateIfcPropertyDeprecated.');
        }

        if (requestParameters.propertyRequest === null || requestParameters.propertyRequest === undefined) {
            throw new runtime.RequiredError('propertyRequest','Required parameter requestParameters.propertyRequest was null or undefined when calling bulkUpdateIfcPropertyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.propertyRequest.map(PropertyRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyFromJSON));
    }

    /**
     *  Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we\'ll be 400 with the list of errors 
     * Update all fields of many properties of a model
     */
    async bulkUpdateIfcPropertyDeprecated(cloudPk: number, ifcPk: number, projectPk: number, propertyRequest: Array<PropertyRequest>, initOverrides?: RequestInit): Promise<Array<Property>> {
        const response = await this.bulkUpdateIfcPropertyDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, propertyRequest: propertyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Tokens are read_only by default and are valid 1 day  Required scopes: ifc:token_manage, model:token_manage
     * Create a token for this model
     */
    async createAccessTokenDeprecatedRaw(requestParameters: CreateAccessTokenDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcAccessToken>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createAccessTokenDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createAccessTokenDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createAccessTokenDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcAccessTokenRequestToJSON(requestParameters.ifcAccessTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcAccessTokenFromJSON(jsonValue));
    }

    /**
     * Tokens are read_only by default and are valid 1 day  Required scopes: ifc:token_manage, model:token_manage
     * Create a token for this model
     */
    async createAccessTokenDeprecated(cloudPk: number, ifcPk: number, projectPk: number, ifcAccessTokenRequest?: IfcAccessTokenRequest, initOverrides?: RequestInit): Promise<IfcAccessToken> {
        const response = await this.createAccessTokenDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, ifcAccessTokenRequest: ifcAccessTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a building of a model.  Required scopes: ifc:write, model:write
     * Create a building of a model
     */
    async createBuildingDeprecatedRaw(requestParameters: CreateBuildingDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Building>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createBuildingDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createBuildingDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createBuildingDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildingFromJSON(jsonValue));
    }

    /**
     * Create a building of a model.  Required scopes: ifc:write, model:write
     * Create a building of a model
     */
    async createBuildingDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Building> {
        const response = await this.createBuildingDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Create a relation between a 2d model and a building. The model type must be one of : (\'DWG\', \'DXF\', \'PDF\', \'JPEG\', \'PNG\')  Required scopes: ifc:write, model:write
     * Create a relation between a 2d model and a building
     */
    async createBuildingPlanDeprecatedRaw(requestParameters: CreateBuildingPlanDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Building>> {
        if (requestParameters.buildingUuid === null || requestParameters.buildingUuid === undefined) {
            throw new runtime.RequiredError('buildingUuid','Required parameter requestParameters.buildingUuid was null or undefined when calling createBuildingPlanDeprecated.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createBuildingPlanDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createBuildingPlanDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createBuildingPlanDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/add`.replace(`{${"building_uuid"}}`, encodeURIComponent(String(requestParameters.buildingUuid))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildingFromJSON(jsonValue));
    }

    /**
     * Create a relation between a 2d model and a building. The model type must be one of : (\'DWG\', \'DXF\', \'PDF\', \'JPEG\', \'PNG\')  Required scopes: ifc:write, model:write
     * Create a relation between a 2d model and a building
     */
    async createBuildingPlanDeprecated(buildingUuid: string, cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Building> {
        const response = await this.createBuildingPlanDeprecatedRaw({ buildingUuid: buildingUuid, cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Create a checker to a model
     */
    async createCheckerDeprecatedRaw(requestParameters: CreateCheckerDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createCheckerDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createCheckerDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createCheckerDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcCheckerRequestToJSON(requestParameters.ifcCheckerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Create a checker to a model
     */
    async createCheckerDeprecated(cloudPk: number, ifcPk: number, projectPk: number, ifcCheckerRequest?: IfcCheckerRequest, initOverrides?: RequestInit): Promise<IfcChecker> {
        const response = await this.createCheckerDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, ifcCheckerRequest: ifcCheckerRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a CheckerResult  Required scopes: check:write
     * Create a CheckerResult
     */
    async createCheckerResultDeprecatedRaw(requestParameters: CreateCheckerResultDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling createCheckerResultDeprecated.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createCheckerResultDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createCheckerResultDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createCheckerResultDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckerResultRequestToJSON(requestParameters.checkerResultRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * TCreate a CheckerResult  Required scopes: check:write
     * Create a CheckerResult
     */
    async createCheckerResultDeprecated(checkerPk: number, cloudPk: number, ifcPk: number, projectPk: number, checkerResultRequest?: CheckerResultRequest, initOverrides?: RequestInit): Promise<CheckerResult> {
        const response = await this.createCheckerResultDeprecatedRaw({ checkerPk: checkerPk, cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, checkerResultRequest: checkerResultRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create association between existing classification and existing element  Required scopes: ifc:write, model:write
     * Create association between existing classification and existing element
     */
    async createClassificationElementRelationsDeprecatedRaw(requestParameters: CreateClassificationElementRelationsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createClassificationElementRelationsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createClassificationElementRelationsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createClassificationElementRelationsDeprecated.');
        }

        if (requestParameters.elementClassificationRelationRequest === null || requestParameters.elementClassificationRelationRequest === undefined) {
            throw new runtime.RequiredError('elementClassificationRelationRequest','Required parameter requestParameters.elementClassificationRelationRequest was null or undefined when calling createClassificationElementRelationsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.elementClassificationRelationRequest.map(ElementClassificationRelationRequestToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create association between existing classification and existing element  Required scopes: ifc:write, model:write
     * Create association between existing classification and existing element
     */
    async createClassificationElementRelationsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, elementClassificationRelationRequest: Array<ElementClassificationRelationRequest>, initOverrides?: RequestInit): Promise<void> {
        await this.createClassificationElementRelationsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, elementClassificationRelationRequest: elementClassificationRelationRequest }, initOverrides);
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors If classification created already exists, it will just be added to item\'s classifications and will not be duplicated  Required scopes: ifc:write, model:write
     * Create one or many classifications to an element
     */
    async createClassificationsOfElementDeprecatedRaw(requestParameters: CreateClassificationsOfElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Classification>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createClassificationsOfElementDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling createClassificationsOfElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createClassificationsOfElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createClassificationsOfElementDeprecated.');
        }

        if (requestParameters.classificationRequest === null || requestParameters.classificationRequest === undefined) {
            throw new runtime.RequiredError('classificationRequest','Required parameter requestParameters.classificationRequest was null or undefined when calling createClassificationsOfElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.classificationRequest.map(ClassificationRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationFromJSON));
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors If classification created already exists, it will just be added to item\'s classifications and will not be duplicated  Required scopes: ifc:write, model:write
     * Create one or many classifications to an element
     */
    async createClassificationsOfElementDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, classificationRequest: Array<ClassificationRequest>, initOverrides?: RequestInit): Promise<Array<Classification>> {
        const response = await this.createClassificationsOfElementDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk, classificationRequest: classificationRequest }, initOverrides);
        return await response.value();
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create an element in the model
     */
    async createElementDeprecatedRaw(requestParameters: CreateElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Element>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createElementDeprecated.');
        }

        if (requestParameters.elementRequest === null || requestParameters.elementRequest === undefined) {
            throw new runtime.RequiredError('elementRequest','Required parameter requestParameters.elementRequest was null or undefined when calling createElementDeprecated.');
        }

        const queryParameters: any = {};

        if (requestParameters.classification !== undefined) {
            queryParameters['classification'] = requestParameters.classification;
        }

        if (requestParameters.classificationNotation !== undefined) {
            queryParameters['classification__notation'] = requestParameters.classificationNotation;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.elementRequest.map(ElementRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementFromJSON));
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create an element in the model
     */
    async createElementDeprecated(cloudPk: number, ifcPk: number, projectPk: number, elementRequest: Array<ElementRequest>, classification?: string, classificationNotation?: string, type?: string, initOverrides?: RequestInit): Promise<Array<Element>> {
        const response = await this.createElementDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, elementRequest: elementRequest, classification: classification, classificationNotation: classificationNotation, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Create a PropertySets that will be automatically linked to the element  Required scopes: ifc:write, model:write
     * Create a PropertySets to an element
     */
    async createElementPropertySetDeprecatedRaw(requestParameters: CreateElementPropertySetDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PropertySet>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createElementPropertySetDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling createElementPropertySetDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createElementPropertySetDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createElementPropertySetDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertySetRequestToJSON(requestParameters.propertySetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertySetFromJSON(jsonValue));
    }

    /**
     * Create a PropertySets that will be automatically linked to the element  Required scopes: ifc:write, model:write
     * Create a PropertySets to an element
     */
    async createElementPropertySetDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, propertySetRequest?: PropertySetRequest, initOverrides?: RequestInit): Promise<PropertySet> {
        const response = await this.createElementPropertySetDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk, propertySetRequest: propertySetRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a Definition to a Property  Required scopes: ifc:write, model:write
     * Create a Definition to a Property
     */
    async createElementPropertySetPropertyDefinitionDeprecatedRaw(requestParameters: CreateElementPropertySetPropertyDefinitionDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PropertyDefinition>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling createElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling createElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling createElementPropertySetPropertyDefinitionDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyDefinitionRequestToJSON(requestParameters.propertyDefinitionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDefinitionFromJSON(jsonValue));
    }

    /**
     * Create a Definition to a Property  Required scopes: ifc:write, model:write
     * Create a Definition to a Property
     */
    async createElementPropertySetPropertyDefinitionDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, propertyPk: number, propertysetPk: number, propertyDefinitionRequest?: PropertyDefinitionRequest, initOverrides?: RequestInit): Promise<PropertyDefinition> {
        const response = await this.createElementPropertySetPropertyDefinitionDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk, propertyPk: propertyPk, propertysetPk: propertysetPk, propertyDefinitionRequest: propertyDefinitionRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a Unit to a Definition  Required scopes: ifc:write, model:write
     * Create a Unit to a Definition
     */
    async createElementPropertySetPropertyDefinitionUnitDeprecatedRaw(requestParameters: CreateElementPropertySetPropertyDefinitionUnitDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Unit>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling createElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.propertydefinitionPk === null || requestParameters.propertydefinitionPk === undefined) {
            throw new runtime.RequiredError('propertydefinitionPk','Required parameter requestParameters.propertydefinitionPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling createElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.unitRequest === null || requestParameters.unitRequest === undefined) {
            throw new runtime.RequiredError('unitRequest','Required parameter requestParameters.unitRequest was null or undefined when calling createElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertydefinition_pk"}}`, encodeURIComponent(String(requestParameters.propertydefinitionPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnitRequestToJSON(requestParameters.unitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitFromJSON(jsonValue));
    }

    /**
     * Create a Unit to a Definition  Required scopes: ifc:write, model:write
     * Create a Unit to a Definition
     */
    async createElementPropertySetPropertyDefinitionUnitDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, propertyPk: number, propertydefinitionPk: number, propertysetPk: number, unitRequest: UnitRequest, initOverrides?: RequestInit): Promise<Unit> {
        const response = await this.createElementPropertySetPropertyDefinitionUnitDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk, propertyPk: propertyPk, propertydefinitionPk: propertydefinitionPk, propertysetPk: propertysetPk, unitRequest: unitRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a property to a PropertySet  Required scopes: ifc:write, model:write
     * Create a property to a PropertySet
     */
    async createElementPropertySetPropertyDeprecatedRaw(requestParameters: CreateElementPropertySetPropertyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling createElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling createElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.propertyRequest === null || requestParameters.propertyRequest === undefined) {
            throw new runtime.RequiredError('propertyRequest','Required parameter requestParameters.propertyRequest was null or undefined when calling createElementPropertySetPropertyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyRequestToJSON(requestParameters.propertyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Create a property to a PropertySet  Required scopes: ifc:write, model:write
     * Create a property to a PropertySet
     */
    async createElementPropertySetPropertyDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, propertysetPk: number, propertyRequest: PropertyRequest, initOverrides?: RequestInit): Promise<Property> {
        const response = await this.createElementPropertySetPropertyDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk, propertysetPk: propertysetPk, propertyRequest: propertyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Make a PDF or Image file a Model to be used in BIMData services. If a model already exists, this route does nothing and returns a 201 with the model  Required scopes: ifc:write, model:write
     * Make a PDF or Image file a Model
     */
    async createIfcDeprecatedRaw(requestParameters: CreateIfcDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Model>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createIfcDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createIfcDeprecated.');
        }

        if (requestParameters.createModelRequest === null || requestParameters.createModelRequest === undefined) {
            throw new runtime.RequiredError('createModelRequest','Required parameter requestParameters.createModelRequest was null or undefined when calling createIfcDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/create-model`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateModelRequestToJSON(requestParameters.createModelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * Make a PDF or Image file a Model to be used in BIMData services. If a model already exists, this route does nothing and returns a 201 with the model  Required scopes: ifc:write, model:write
     * Make a PDF or Image file a Model
     */
    async createIfcDeprecated(cloudPk: number, projectPk: number, createModelRequest: CreateModelRequest, initOverrides?: RequestInit): Promise<Model> {
        const response = await this.createIfcDeprecatedRaw({ cloudPk: cloudPk, projectPk: projectPk, createModelRequest: createModelRequest }, initOverrides);
        return await response.value();
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Create a PropertyDefinition on the model
     */
    async createIfcPropertyDefinitionDeprecatedRaw(requestParameters: CreateIfcPropertyDefinitionDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PropertyDefinition>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.propertyDefinitionRequest === null || requestParameters.propertyDefinitionRequest === undefined) {
            throw new runtime.RequiredError('propertyDefinitionRequest','Required parameter requestParameters.propertyDefinitionRequest was null or undefined when calling createIfcPropertyDefinitionDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.propertyDefinitionRequest.map(PropertyDefinitionRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyDefinitionFromJSON));
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Create a PropertyDefinition on the model
     */
    async createIfcPropertyDefinitionDeprecated(cloudPk: number, ifcPk: number, projectPk: number, propertyDefinitionRequest: Array<PropertyDefinitionRequest>, initOverrides?: RequestInit): Promise<Array<PropertyDefinition>> {
        const response = await this.createIfcPropertyDefinitionDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, propertyDefinitionRequest: propertyDefinitionRequest }, initOverrides);
        return await response.value();
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Create a Unit on a model
     */
    async createIfcUnitDeprecatedRaw(requestParameters: CreateIfcUnitDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Unit>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createIfcUnitDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createIfcUnitDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createIfcUnitDeprecated.');
        }

        if (requestParameters.unitRequest === null || requestParameters.unitRequest === undefined) {
            throw new runtime.RequiredError('unitRequest','Required parameter requestParameters.unitRequest was null or undefined when calling createIfcUnitDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.unitRequest.map(UnitRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UnitFromJSON));
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Create a Unit on a model
     */
    async createIfcUnitDeprecated(cloudPk: number, ifcPk: number, projectPk: number, unitRequest: Array<UnitRequest>, initOverrides?: RequestInit): Promise<Array<Unit>> {
        const response = await this.createIfcUnitDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, unitRequest: unitRequest }, initOverrides);
        return await response.value();
    }

    /**
     * The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create a layer in the model
     */
    async createLayerDeprecatedRaw(requestParameters: CreateLayerDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Layer>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createLayerDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createLayerDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createLayerDeprecated.');
        }

        if (requestParameters.layerRequest === null || requestParameters.layerRequest === undefined) {
            throw new runtime.RequiredError('layerRequest','Required parameter requestParameters.layerRequest was null or undefined when calling createLayerDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LayerRequestToJSON(requestParameters.layerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerFromJSON(jsonValue));
    }

    /**
     * The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create a layer in the model
     */
    async createLayerDeprecated(cloudPk: number, ifcPk: number, projectPk: number, layerRequest: LayerRequest, initOverrides?: RequestInit): Promise<Layer> {
        const response = await this.createLayerDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, layerRequest: layerRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create an empty 3D Model to be used in BIMData services  Required scopes: ifc:write, model:write
     * Create an empty 3D Model
     */
    async createMetaBuildingDeprecatedRaw(requestParameters: CreateMetaBuildingDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Model>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createMetaBuildingDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createMetaBuildingDeprecated.');
        }

        if (requestParameters.createBuildingByNameRequest === null || requestParameters.createBuildingByNameRequest === undefined) {
            throw new runtime.RequiredError('createBuildingByNameRequest','Required parameter requestParameters.createBuildingByNameRequest was null or undefined when calling createMetaBuildingDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/create-metabuilding`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBuildingByNameRequestToJSON(requestParameters.createBuildingByNameRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * Create an empty 3D Model to be used in BIMData services  Required scopes: ifc:write, model:write
     * Create an empty 3D Model
     */
    async createMetaBuildingDeprecated(cloudPk: number, projectPk: number, createBuildingByNameRequest: CreateBuildingByNameRequest, initOverrides?: RequestInit): Promise<Model> {
        const response = await this.createMetaBuildingDeprecatedRaw({ cloudPk: cloudPk, projectPk: projectPk, createBuildingByNameRequest: createBuildingByNameRequest }, initOverrides);
        return await response.value();
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Create one or many PropertySet
     */
    async createPropertySetDeprecatedRaw(requestParameters: CreatePropertySetDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PropertySet>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createPropertySetDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createPropertySetDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createPropertySetDeprecated.');
        }

        if (requestParameters.propertySetRequest === null || requestParameters.propertySetRequest === undefined) {
            throw new runtime.RequiredError('propertySetRequest','Required parameter requestParameters.propertySetRequest was null or undefined when calling createPropertySetDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.propertySetRequest.map(PropertySetRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertySetFromJSON));
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Create one or many PropertySet
     */
    async createPropertySetDeprecated(cloudPk: number, ifcPk: number, projectPk: number, propertySetRequest: Array<PropertySetRequest>, initOverrides?: RequestInit): Promise<Array<PropertySet>> {
        const response = await this.createPropertySetDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, propertySetRequest: propertySetRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create association between PropertySet and element  Required scopes: ifc:write, model:write
     * Create association between PropertySet and element
     */
    async createPropertySetElementRelationsDeprecatedRaw(requestParameters: CreatePropertySetElementRelationsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createPropertySetElementRelationsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createPropertySetElementRelationsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createPropertySetElementRelationsDeprecated.');
        }

        if (requestParameters.elementPropertySetRelationRequest === null || requestParameters.elementPropertySetRelationRequest === undefined) {
            throw new runtime.RequiredError('elementPropertySetRelationRequest','Required parameter requestParameters.elementPropertySetRelationRequest was null or undefined when calling createPropertySetElementRelationsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.elementPropertySetRelationRequest.map(ElementPropertySetRelationRequestToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create association between PropertySet and element  Required scopes: ifc:write, model:write
     * Create association between PropertySet and element
     */
    async createPropertySetElementRelationsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, elementPropertySetRelationRequest: Array<ElementPropertySetRelationRequest>, initOverrides?: RequestInit): Promise<void> {
        await this.createPropertySetElementRelationsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, elementPropertySetRelationRequest: elementPropertySetRelationRequest }, initOverrides);
    }

    /**
     * Create many elements in an optimized format to reduce JSON size and avoid redudancy. The IFC file will not be updated. The created elements will be accessible over the API and when exporting an IFC file. You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once. For performance reasons, we do not check the validity of the json. If the json is malformed, an error 500 without more explaination may be returned instead of a 400.  Required scopes: ifc:write, model:write
     * Create elements in an optimized format
     */
    async createRawElementsDeprecatedRaw(requestParameters: CreateRawElementsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createRawElementsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createRawElementsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createRawElementsDeprecated.');
        }

        if (requestParameters.rawElementsRequest === null || requestParameters.rawElementsRequest === undefined) {
            throw new runtime.RequiredError('rawElementsRequest','Required parameter requestParameters.rawElementsRequest was null or undefined when calling createRawElementsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RawElementsRequestToJSON(requestParameters.rawElementsRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create many elements in an optimized format to reduce JSON size and avoid redudancy. The IFC file will not be updated. The created elements will be accessible over the API and when exporting an IFC file. You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once. For performance reasons, we do not check the validity of the json. If the json is malformed, an error 500 without more explaination may be returned instead of a 400.  Required scopes: ifc:write, model:write
     * Create elements in an optimized format
     */
    async createRawElementsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, rawElementsRequest: RawElementsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createRawElementsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, rawElementsRequest: rawElementsRequest }, initOverrides);
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create a space in the model
     */
    async createSpaceDeprecatedRaw(requestParameters: CreateSpaceDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Space>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createSpaceDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createSpaceDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createSpaceDeprecated.');
        }

        if (requestParameters.spaceRequest === null || requestParameters.spaceRequest === undefined) {
            throw new runtime.RequiredError('spaceRequest','Required parameter requestParameters.spaceRequest was null or undefined when calling createSpaceDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.spaceRequest.map(SpaceRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpaceFromJSON));
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create a space in the model
     */
    async createSpaceDeprecated(cloudPk: number, ifcPk: number, projectPk: number, spaceRequest: Array<SpaceRequest>, initOverrides?: RequestInit): Promise<Array<Space>> {
        const response = await this.createSpaceDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, spaceRequest: spaceRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a storey of a model.  Required scopes: ifc:write, model:write
     * Create a storey of a model
     */
    async createStoreyDeprecatedRaw(requestParameters: CreateStoreyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Storey>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createStoreyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createStoreyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createStoreyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreyFromJSON(jsonValue));
    }

    /**
     * Create a storey of a model.  Required scopes: ifc:write, model:write
     * Create a storey of a model
     */
    async createStoreyDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Storey> {
        const response = await this.createStoreyDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Create a relation between a 2d model and a storey. The model type must be one of : (\'DWG\', \'DXF\', \'PDF\', \'JPEG\', \'PNG\')  Required scopes: ifc:write, model:write
     * Create a relation between a 2d model and a storey
     */
    async createStoreyPlanDeprecatedRaw(requestParameters: CreateStoreyPlanDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Storey>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createStoreyPlanDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createStoreyPlanDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createStoreyPlanDeprecated.');
        }

        if (requestParameters.storeyUuid === null || requestParameters.storeyUuid === undefined) {
            throw new runtime.RequiredError('storeyUuid','Required parameter requestParameters.storeyUuid was null or undefined when calling createStoreyPlanDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/add`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"storey_uuid"}}`, encodeURIComponent(String(requestParameters.storeyUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreyFromJSON(jsonValue));
    }

    /**
     * Create a relation between a 2d model and a storey. The model type must be one of : (\'DWG\', \'DXF\', \'PDF\', \'JPEG\', \'PNG\')  Required scopes: ifc:write, model:write
     * Create a relation between a 2d model and a storey
     */
    async createStoreyPlanDeprecated(cloudPk: number, ifcPk: number, projectPk: number, storeyUuid: string, initOverrides?: RequestInit): Promise<Storey> {
        const response = await this.createStoreyPlanDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, storeyUuid: storeyUuid }, initOverrides);
        return await response.value();
    }

    /**
     * The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create a system in the model
     */
    async createSystemDeprecatedRaw(requestParameters: CreateSystemDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<System>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createSystemDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createSystemDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createSystemDeprecated.');
        }

        if (requestParameters.systemRequest === null || requestParameters.systemRequest === undefined) {
            throw new runtime.RequiredError('systemRequest','Required parameter requestParameters.systemRequest was null or undefined when calling createSystemDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SystemRequestToJSON(requestParameters.systemRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemFromJSON(jsonValue));
    }

    /**
     * The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create a system in the model
     */
    async createSystemDeprecated(cloudPk: number, ifcPk: number, projectPk: number, systemRequest: SystemRequest, initOverrides?: RequestInit): Promise<System> {
        const response = await this.createSystemDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, systemRequest: systemRequest }, initOverrides);
        return await response.value();
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create a zone in the model
     */
    async createZoneDeprecatedRaw(requestParameters: CreateZoneDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Zone>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createZoneDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createZoneDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createZoneDeprecated.');
        }

        if (requestParameters.zoneRequest === null || requestParameters.zoneRequest === undefined) {
            throw new runtime.RequiredError('zoneRequest','Required parameter requestParameters.zoneRequest was null or undefined when calling createZoneDeprecated.');
        }

        const queryParameters: any = {};

        if (requestParameters.color !== undefined) {
            queryParameters['color'] = requestParameters.color;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.zoneRequest.map(ZoneRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ZoneFromJSON));
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create a zone in the model
     */
    async createZoneDeprecated(cloudPk: number, ifcPk: number, projectPk: number, zoneRequest: Array<ZoneRequest>, color?: string, initOverrides?: RequestInit): Promise<Array<Zone>> {
        const response = await this.createZoneDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, zoneRequest: zoneRequest, color: color }, initOverrides);
        return await response.value();
    }

    /**
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create a space in a zone
     */
    async createZoneSpaceDeprecatedRaw(requestParameters: CreateZoneSpaceDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ZoneSpace>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createZoneSpaceDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createZoneSpaceDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createZoneSpaceDeprecated.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling createZoneSpaceDeprecated.');
        }

        if (requestParameters.zoneSpaceRequest === null || requestParameters.zoneSpaceRequest === undefined) {
            throw new runtime.RequiredError('zoneSpaceRequest','Required parameter requestParameters.zoneSpaceRequest was null or undefined when calling createZoneSpaceDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ZoneSpaceRequestToJSON(requestParameters.zoneSpaceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneSpaceFromJSON(jsonValue));
    }

    /**
     * The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Create a space in a zone
     */
    async createZoneSpaceDeprecated(cloudPk: number, ifcPk: number, projectPk: number, zonePk: number, zoneSpaceRequest: ZoneSpaceRequest, initOverrides?: RequestInit): Promise<ZoneSpace> {
        const response = await this.createZoneSpaceDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, zonePk: zonePk, zoneSpaceRequest: zoneSpaceRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Deleting a token will revoke it.  Required scopes: ifc:token_manage, model:token_manage
     * Delete a token
     */
    async deleteAccessTokenDeprecatedRaw(requestParameters: DeleteAccessTokenDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteAccessTokenDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteAccessTokenDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteAccessTokenDeprecated.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling deleteAccessTokenDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deleting a token will revoke it.  Required scopes: ifc:token_manage, model:token_manage
     * Delete a token
     */
    async deleteAccessTokenDeprecated(cloudPk: number, ifcPk: number, projectPk: number, token: string, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAccessTokenDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, token: token }, initOverrides);
    }

    /**
     * Delete a building of a model  Required scopes: ifc:write, model:write
     * Delete a building of a model
     */
    async deleteBuildingDeprecatedRaw(requestParameters: DeleteBuildingDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteBuildingDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteBuildingDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteBuildingDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteBuildingDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a building of a model  Required scopes: ifc:write, model:write
     * Delete a building of a model
     */
    async deleteBuildingDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<void> {
        await this.deleteBuildingDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
    }

    /**
     * Delete the relation between a 2d model and a building  Required scopes: ifc:write, model:write
     * Delete the relation between a 2d model and a building
     */
    async deleteBuildingPlanDeprecatedRaw(requestParameters: DeleteBuildingPlanDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.buildingUuid === null || requestParameters.buildingUuid === undefined) {
            throw new runtime.RequiredError('buildingUuid','Required parameter requestParameters.buildingUuid was null or undefined when calling deleteBuildingPlanDeprecated.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteBuildingPlanDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBuildingPlanDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteBuildingPlanDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteBuildingPlanDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}`.replace(`{${"building_uuid"}}`, encodeURIComponent(String(requestParameters.buildingUuid))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the relation between a 2d model and a building  Required scopes: ifc:write, model:write
     * Delete the relation between a 2d model and a building
     */
    async deleteBuildingPlanDeprecated(buildingUuid: string, cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteBuildingPlanDeprecatedRaw({ buildingUuid: buildingUuid, cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Delete a checker of a model
     */
    async deleteCheckerDeprecatedRaw(requestParameters: DeleteCheckerDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteCheckerDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCheckerDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteCheckerDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteCheckerDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Delete a checker of a model
     */
    async deleteCheckerDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCheckerDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete a CheckerResult  Required scopes: check:write
     * Delete a CheckerResult
     */
    async deleteCheckerResultDeprecatedRaw(requestParameters: DeleteCheckerResultDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling deleteCheckerResultDeprecated.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteCheckerResultDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCheckerResultDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteCheckerResultDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteCheckerResultDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a CheckerResult  Required scopes: check:write
     * Delete a CheckerResult
     */
    async deleteCheckerResultDeprecated(checkerPk: number, cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCheckerResultDeprecatedRaw({ checkerPk: checkerPk, cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete an element of a model
     */
    async deleteElementDeprecatedRaw(requestParameters: DeleteElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteElementDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete an element of a model
     */
    async deleteElementDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<void> {
        await this.deleteElementDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
    }

    /**
     * It will also delete the related document  Required scopes: ifc:write, model:write
     * Delete a model
     */
    async deleteIfcDeprecatedRaw(requestParameters: DeleteIfcDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteIfcDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIfcDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteIfcDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * It will also delete the related document  Required scopes: ifc:write, model:write
     * Delete a model
     */
    async deleteIfcDeprecated(cloudPk: number, id: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteIfcDeprecatedRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete a PropertyDefinitions of a model  Required scopes: ifc:write, model:write
     * Delete a PropertyDefinitions of a model
     */
    async deleteIfcPropertyDefinitionDeprecatedRaw(requestParameters: DeleteIfcPropertyDefinitionDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteIfcPropertyDefinitionDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a PropertyDefinitions of a model  Required scopes: ifc:write, model:write
     * Delete a PropertyDefinitions of a model
     */
    async deleteIfcPropertyDefinitionDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteIfcPropertyDefinitionDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete a Property of a model  Required scopes: ifc:write, model:write
     * Delete a Property of a model
     */
    async deleteIfcPropertyDeprecatedRaw(requestParameters: DeleteIfcPropertyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteIfcPropertyDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIfcPropertyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteIfcPropertyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteIfcPropertyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Property of a model  Required scopes: ifc:write, model:write
     * Delete a Property of a model
     */
    async deleteIfcPropertyDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteIfcPropertyDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete a Unit of a model  Required scopes: ifc:write, model:write
     * Delete a Unit of a model
     */
    async deleteIfcUnitDeprecatedRaw(requestParameters: DeleteIfcUnitDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteIfcUnitDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIfcUnitDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteIfcUnitDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteIfcUnitDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Unit of a model  Required scopes: ifc:write, model:write
     * Delete a Unit of a model
     */
    async deleteIfcUnitDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteIfcUnitDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete the Model without deleting the related document  Required scopes: ifc:write, model:write
     * Delete the Model without deleting the related document
     */
    async deleteIfcWithoutDocDeprecatedRaw(requestParameters: DeleteIfcWithoutDocDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteIfcWithoutDocDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIfcWithoutDocDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteIfcWithoutDocDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/delete-model`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the Model without deleting the related document  Required scopes: ifc:write, model:write
     * Delete the Model without deleting the related document
     */
    async deleteIfcWithoutDocDeprecated(cloudPk: number, id: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteIfcWithoutDocDeprecatedRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk }, initOverrides);
    }

    /**
     * The IFC file will not be updated. The remaining layers are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete a layer of a model
     */
    async deleteLayerDeprecatedRaw(requestParameters: DeleteLayerDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteLayerDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLayerDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteLayerDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteLayerDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The IFC file will not be updated. The remaining layers are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete a layer of a model
     */
    async deleteLayerDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteLayerDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete a PropertySet of a model  Required scopes: ifc:write, model:write
     * Delete a PropertySet of a model
     */
    async deletePropertySetDeprecatedRaw(requestParameters: DeletePropertySetDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deletePropertySetDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePropertySetDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deletePropertySetDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deletePropertySetDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a PropertySet of a model  Required scopes: ifc:write, model:write
     * Delete a PropertySet of a model
     */
    async deletePropertySetDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deletePropertySetDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete a space
     */
    async deleteSpaceDeprecatedRaw(requestParameters: DeleteSpaceDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteSpaceDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSpaceDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteSpaceDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteSpaceDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete a space
     */
    async deleteSpaceDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteSpaceDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete a storey of a model  Required scopes: ifc:write, model:write
     * Delete a storey of a model
     */
    async deleteStoreyDeprecatedRaw(requestParameters: DeleteStoreyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteStoreyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteStoreyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteStoreyDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteStoreyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a storey of a model  Required scopes: ifc:write, model:write
     * Delete a storey of a model
     */
    async deleteStoreyDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<void> {
        await this.deleteStoreyDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
    }

    /**
     * Delete the relation between a 2d model and a storey  Required scopes: ifc:write, model:write
     * Delete the relation between a 2d model and a storey
     */
    async deleteStoreyPlanDeprecatedRaw(requestParameters: DeleteStoreyPlanDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteStoreyPlanDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStoreyPlanDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteStoreyPlanDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteStoreyPlanDeprecated.');
        }

        if (requestParameters.storeyUuid === null || requestParameters.storeyUuid === undefined) {
            throw new runtime.RequiredError('storeyUuid','Required parameter requestParameters.storeyUuid was null or undefined when calling deleteStoreyPlanDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"storey_uuid"}}`, encodeURIComponent(String(requestParameters.storeyUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the relation between a 2d model and a storey  Required scopes: ifc:write, model:write
     * Delete the relation between a 2d model and a storey
     */
    async deleteStoreyPlanDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, storeyUuid: string, initOverrides?: RequestInit): Promise<void> {
        await this.deleteStoreyPlanDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, storeyUuid: storeyUuid }, initOverrides);
    }

    /**
     * The IFC file will not be updated. The remaining systems are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete a system of a model
     */
    async deleteSystemDeprecatedRaw(requestParameters: DeleteSystemDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteSystemDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteSystemDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteSystemDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteSystemDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The IFC file will not be updated. The remaining systems are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete a system of a model
     */
    async deleteSystemDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<void> {
        await this.deleteSystemDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
    }

    /**
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete a zone of a model
     */
    async deleteZoneDeprecatedRaw(requestParameters: DeleteZoneDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteZoneDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteZoneDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteZoneDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteZoneDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete a zone of a model
     */
    async deleteZoneDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteZoneDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete a space of a zone
     */
    async deleteZoneSpaceDeprecatedRaw(requestParameters: DeleteZoneSpaceDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteZoneSpaceDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteZoneSpaceDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteZoneSpaceDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteZoneSpaceDeprecated.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling deleteZoneSpaceDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write
     * Delete a space of a zone
     */
    async deleteZoneSpaceDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, zonePk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteZoneSpaceDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, zonePk: zonePk }, initOverrides);
    }

    /**
     * Only works for IFC files. Export IFC as requested in parameters. When the export is finished, a new IFC file with will be created in the same folder than the original IFC. You can query the folder or subscribe to the new document webhook to retrieve the result  Required scopes: ifc:write, model:write
     * Export IFC
     */
    async exportIfcDeprecatedRaw(requestParameters: ExportIfcDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcExport>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling exportIfcDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exportIfcDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling exportIfcDeprecated.');
        }

        if (requestParameters.ifcExportRequest === null || requestParameters.ifcExportRequest === undefined) {
            throw new runtime.RequiredError('ifcExportRequest','Required parameter requestParameters.ifcExportRequest was null or undefined when calling exportIfcDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/export`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcExportRequestToJSON(requestParameters.ifcExportRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcExportFromJSON(jsonValue));
    }

    /**
     * Only works for IFC files. Export IFC as requested in parameters. When the export is finished, a new IFC file with will be created in the same folder than the original IFC. You can query the folder or subscribe to the new document webhook to retrieve the result  Required scopes: ifc:write, model:write
     * Export IFC
     */
    async exportIfcDeprecated(cloudPk: number, id: number, projectPk: number, ifcExportRequest: IfcExportRequest, initOverrides?: RequestInit): Promise<IfcExport> {
        const response = await this.exportIfcDeprecatedRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk, ifcExportRequest: ifcExportRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update all fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update all fields of an element
     */
    async fullUpdateElementDeprecatedRaw(requestParameters: FullUpdateElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Element>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateElementDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling fullUpdateElementDeprecated.');
        }

        if (requestParameters.elementRequest === null || requestParameters.elementRequest === undefined) {
            throw new runtime.RequiredError('elementRequest','Required parameter requestParameters.elementRequest was null or undefined when calling fullUpdateElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ElementRequestToJSON(requestParameters.elementRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ElementFromJSON(jsonValue));
    }

    /**
     * Update all fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update all fields of an element
     */
    async fullUpdateElementDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, elementRequest: ElementRequest, initOverrides?: RequestInit): Promise<Element> {
        const response = await this.fullUpdateElementDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid, elementRequest: elementRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one token created for this model  Required scopes: ifc:token_manage, model:token_manage
     * Retrieve one token created for this model
     */
    async getAccessTokenDeprecatedRaw(requestParameters: GetAccessTokenDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcAccessToken>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getAccessTokenDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getAccessTokenDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getAccessTokenDeprecated.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling getAccessTokenDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcAccessTokenFromJSON(jsonValue));
    }

    /**
     * Retrieve one token created for this model  Required scopes: ifc:token_manage, model:token_manage
     * Retrieve one token created for this model
     */
    async getAccessTokenDeprecated(cloudPk: number, ifcPk: number, projectPk: number, token: string, initOverrides?: RequestInit): Promise<IfcAccessToken> {
        const response = await this.getAccessTokenDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, token: token }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all tokens created for this model  Required scopes: ifc:token_manage, model:token_manage
     * Retrieve all tokens created for this model
     */
    async getAccessTokensDeprecatedRaw(requestParameters: GetAccessTokensDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<IfcAccessToken>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getAccessTokensDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getAccessTokensDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getAccessTokensDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IfcAccessTokenFromJSON));
    }

    /**
     * Retrieve all tokens created for this model  Required scopes: ifc:token_manage, model:token_manage
     * Retrieve all tokens created for this model
     */
    async getAccessTokensDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<IfcAccessToken>> {
        const response = await this.getAccessTokensDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a building of a model  Required scopes: ifc:read, model:read
     * Retrieve a building of a model
     */
    async getBuildingDeprecatedRaw(requestParameters: GetBuildingDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Building>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getBuildingDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getBuildingDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getBuildingDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getBuildingDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildingFromJSON(jsonValue));
    }

    /**
     * Retrieve a building of a model  Required scopes: ifc:read, model:read
     * Retrieve a building of a model
     */
    async getBuildingDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<Building> {
        const response = await this.getBuildingDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the postioning of the plan in the building  Required scopes: ifc:read, model:read
     * Retrieve the postioning of the plan in the building
     */
    async getBuildingPlanPositioningDeprecatedRaw(requestParameters: GetBuildingPlanPositioningDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PositioningPlan>> {
        if (requestParameters.buildingUuid === null || requestParameters.buildingUuid === undefined) {
            throw new runtime.RequiredError('buildingUuid','Required parameter requestParameters.buildingUuid was null or undefined when calling getBuildingPlanPositioningDeprecated.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getBuildingPlanPositioningDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBuildingPlanPositioningDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getBuildingPlanPositioningDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getBuildingPlanPositioningDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}/positioning`.replace(`{${"building_uuid"}}`, encodeURIComponent(String(requestParameters.buildingUuid))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PositioningPlanFromJSON(jsonValue));
    }

    /**
     * Retrieve the postioning of the plan in the building  Required scopes: ifc:read, model:read
     * Retrieve the postioning of the plan in the building
     */
    async getBuildingPlanPositioningDeprecated(buildingUuid: string, cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<PositioningPlan> {
        const response = await this.getBuildingPlanPositioningDeprecatedRaw({ buildingUuid: buildingUuid, cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all buildings of a model.  Required scopes: ifc:read, model:read
     * Retrieve all buildings of a model
     */
    async getBuildingsDeprecatedRaw(requestParameters: GetBuildingsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Building>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getBuildingsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getBuildingsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getBuildingsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BuildingFromJSON));
    }

    /**
     * Retrieve all buildings of a model.  Required scopes: ifc:read, model:read
     * Retrieve all buildings of a model
     */
    async getBuildingsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Building>> {
        const response = await this.getBuildingsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve a checker of a model
     */
    async getCheckerDeprecatedRaw(requestParameters: GetCheckerDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckerDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckerDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getCheckerDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckerDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve a checker of a model
     */
    async getCheckerDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<IfcChecker> {
        const response = await this.getCheckerDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one CheckerResult  Required scopes: check:read
     * Retrieve one CheckerResult
     */
    async getCheckerResultDeprecatedRaw(requestParameters: GetCheckerResultDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling getCheckerResultDeprecated.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckerResultDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckerResultDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getCheckerResultDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckerResultDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * Retrieve one CheckerResult  Required scopes: check:read
     * Retrieve one CheckerResult
     */
    async getCheckerResultDeprecated(checkerPk: number, cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<CheckerResult> {
        const response = await this.getCheckerResultDeprecatedRaw({ checkerPk: checkerPk, cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all CheckerResults  Required scopes: check:read
     * Retrieve all CheckerResults
     */
    async getCheckerResultsDeprecatedRaw(requestParameters: GetCheckerResultsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CheckerResult>>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling getCheckerResultsDeprecated.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckerResultsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getCheckerResultsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckerResultsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckerResultFromJSON));
    }

    /**
     * Retrieve all CheckerResults  Required scopes: check:read
     * Retrieve all CheckerResults
     */
    async getCheckerResultsDeprecated(checkerPk: number, cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<CheckerResult>> {
        const response = await this.getCheckerResultsDeprecatedRaw({ checkerPk: checkerPk, cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve all checkers of a model
     */
    async getCheckersDeprecatedRaw(requestParameters: GetCheckersDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<IfcChecker>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckersDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getCheckersDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckersDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IfcCheckerFromJSON));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve all checkers of a model
     */
    async getCheckersDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<IfcChecker>> {
        const response = await this.getCheckersDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all classifications of an element  Required scopes: ifc:read, model:read
     * Retrieve all classifications of an element
     */
    async getClassificationsOfElementDeprecatedRaw(requestParameters: GetClassificationsOfElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Classification>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getClassificationsOfElementDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getClassificationsOfElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getClassificationsOfElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getClassificationsOfElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationFromJSON));
    }

    /**
     * Retrieve all classifications of an element  Required scopes: ifc:read, model:read
     * Retrieve all classifications of an element
     */
    async getClassificationsOfElementDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Classification>> {
        const response = await this.getClassificationsOfElementDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all documents of an element  Required scopes: ifc:read, model:read
     * Retrieve all documents of an element
     */
    async getDocumentsOfElementDeprecatedRaw(requestParameters: GetDocumentsOfElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Document>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getDocumentsOfElementDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getDocumentsOfElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getDocumentsOfElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getDocumentsOfElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocumentFromJSON));
    }

    /**
     * Retrieve all documents of an element  Required scopes: ifc:read, model:read
     * Retrieve all documents of an element
     */
    async getDocumentsOfElementDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Document>> {
        const response = await this.getDocumentsOfElementDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an element of a model  Required scopes: ifc:read, model:read
     * Retrieve an element of a model
     */
    async getElementDeprecatedRaw(requestParameters: GetElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Element>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ElementFromJSON(jsonValue));
    }

    /**
     * Retrieve an element of a model  Required scopes: ifc:read, model:read
     * Retrieve an element of a model
     */
    async getElementDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<Element> {
        const response = await this.getElementDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all documents linked to any element with the list of uuids  Required scopes: ifc:read, model:read
     * Retrieve all documents linked to any element
     */
    async getElementLinkedDocumentsDeprecatedRaw(requestParameters: GetElementLinkedDocumentsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<DocumentWithElementList>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementLinkedDocumentsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementLinkedDocumentsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementLinkedDocumentsDeprecated.');
        }

        const queryParameters: any = {};

        if (requestParameters.classification !== undefined) {
            queryParameters['classification'] = requestParameters.classification;
        }

        if (requestParameters.classificationNotation !== undefined) {
            queryParameters['classification__notation'] = requestParameters.classificationNotation;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/documents`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocumentWithElementListFromJSON));
    }

    /**
     * Retrieve all documents linked to any element with the list of uuids  Required scopes: ifc:read, model:read
     * Retrieve all documents linked to any element
     */
    async getElementLinkedDocumentsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, classification?: string, classificationNotation?: string, type?: string, initOverrides?: RequestInit): Promise<Array<DocumentWithElementList>> {
        const response = await this.getElementLinkedDocumentsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, classification: classification, classificationNotation: classificationNotation, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a PropertySet of an element  Required scopes: ifc:read, model:read
     * Retrieve a PropertySet of an element
     */
    async getElementPropertySetDeprecatedRaw(requestParameters: GetElementPropertySetDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PropertySet>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getElementPropertySetDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertySetFromJSON(jsonValue));
    }

    /**
     * Retrieve a PropertySet of an element  Required scopes: ifc:read, model:read
     * Retrieve a PropertySet of an element
     */
    async getElementPropertySetDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<PropertySet> {
        const response = await this.getElementPropertySetDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all Properties of a PropertySet  Required scopes: ifc:read, model:read
     * Retrieve all Properties of a PropertySet
     */
    async getElementPropertySetPropertiesDeprecatedRaw(requestParameters: GetElementPropertySetPropertiesDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Property>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetPropertiesDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetPropertiesDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetPropertiesDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetPropertiesDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetPropertiesDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyFromJSON));
    }

    /**
     * Retrieve all Properties of a PropertySet  Required scopes: ifc:read, model:read
     * Retrieve all Properties of a PropertySet
     */
    async getElementPropertySetPropertiesDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, propertysetPk: number, initOverrides?: RequestInit): Promise<Array<Property>> {
        const response = await this.getElementPropertySetPropertiesDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk, propertysetPk: propertysetPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a Definition of a Property  Required scopes: ifc:read, model:read
     * Retrieve a Definition of a Property
     */
    async getElementPropertySetPropertyDefinitionDeprecatedRaw(requestParameters: GetElementPropertySetPropertyDefinitionDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PropertyDefinition>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling getElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetPropertyDefinitionDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDefinitionFromJSON(jsonValue));
    }

    /**
     * Retrieve a Definition of a Property  Required scopes: ifc:read, model:read
     * Retrieve a Definition of a Property
     */
    async getElementPropertySetPropertyDefinitionDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, propertyPk: number, propertysetPk: number, initOverrides?: RequestInit): Promise<PropertyDefinition> {
        const response = await this.getElementPropertySetPropertyDefinitionDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk, propertyPk: propertyPk, propertysetPk: propertysetPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a Unit of a Definition  Required scopes: ifc:read, model:read
     * Retrieve a Unit of a Definition
     */
    async getElementPropertySetPropertyDefinitionUnitDeprecatedRaw(requestParameters: GetElementPropertySetPropertyDefinitionUnitDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Unit>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.propertydefinitionPk === null || requestParameters.propertydefinitionPk === undefined) {
            throw new runtime.RequiredError('propertydefinitionPk','Required parameter requestParameters.propertydefinitionPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertydefinition_pk"}}`, encodeURIComponent(String(requestParameters.propertydefinitionPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitFromJSON(jsonValue));
    }

    /**
     * Retrieve a Unit of a Definition  Required scopes: ifc:read, model:read
     * Retrieve a Unit of a Definition
     */
    async getElementPropertySetPropertyDefinitionUnitDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, propertyPk: number, propertydefinitionPk: number, propertysetPk: number, initOverrides?: RequestInit): Promise<Unit> {
        const response = await this.getElementPropertySetPropertyDefinitionUnitDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk, propertyPk: propertyPk, propertydefinitionPk: propertydefinitionPk, propertysetPk: propertysetPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all Units of a Definition  Required scopes: ifc:read, model:read
     * Retrieve all Units of a Definition
     */
    async getElementPropertySetPropertyDefinitionUnitsDeprecatedRaw(requestParameters: GetElementPropertySetPropertyDefinitionUnitsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Unit>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitsDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetPropertyDefinitionUnitsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitsDeprecated.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitsDeprecated.');
        }

        if (requestParameters.propertydefinitionPk === null || requestParameters.propertydefinitionPk === undefined) {
            throw new runtime.RequiredError('propertydefinitionPk','Required parameter requestParameters.propertydefinitionPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitsDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetPropertyDefinitionUnitsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertydefinition_pk"}}`, encodeURIComponent(String(requestParameters.propertydefinitionPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UnitFromJSON));
    }

    /**
     * Retrieve all Units of a Definition  Required scopes: ifc:read, model:read
     * Retrieve all Units of a Definition
     */
    async getElementPropertySetPropertyDefinitionUnitsDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, propertyPk: number, propertydefinitionPk: number, propertysetPk: number, initOverrides?: RequestInit): Promise<Array<Unit>> {
        const response = await this.getElementPropertySetPropertyDefinitionUnitsDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk, propertyPk: propertyPk, propertydefinitionPk: propertydefinitionPk, propertysetPk: propertysetPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all Definitions of a PropertySet  Required scopes: ifc:read, model:read
     * Retrieve all Definitions of a PropertySet
     */
    async getElementPropertySetPropertyDefinitionsDeprecatedRaw(requestParameters: GetElementPropertySetPropertyDefinitionsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PropertyDefinition>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetPropertyDefinitionsDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetPropertyDefinitionsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetPropertyDefinitionsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetPropertyDefinitionsDeprecated.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling getElementPropertySetPropertyDefinitionsDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetPropertyDefinitionsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyDefinitionFromJSON));
    }

    /**
     * Retrieve all Definitions of a PropertySet  Required scopes: ifc:read, model:read
     * Retrieve all Definitions of a PropertySet
     */
    async getElementPropertySetPropertyDefinitionsDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, propertyPk: number, propertysetPk: number, initOverrides?: RequestInit): Promise<Array<PropertyDefinition>> {
        const response = await this.getElementPropertySetPropertyDefinitionsDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk, propertyPk: propertyPk, propertysetPk: propertysetPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a Property of a PropertySet  Required scopes: ifc:read, model:read
     * Retrieve a Property of a PropertySet
     */
    async getElementPropertySetPropertyDeprecatedRaw(requestParameters: GetElementPropertySetPropertyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling getElementPropertySetPropertyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Retrieve a Property of a PropertySet  Required scopes: ifc:read, model:read
     * Retrieve a Property of a PropertySet
     */
    async getElementPropertySetPropertyDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, propertysetPk: number, initOverrides?: RequestInit): Promise<Property> {
        const response = await this.getElementPropertySetPropertyDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk, propertysetPk: propertysetPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all PropertySets of an element  Required scopes: ifc:read, model:read
     * Retrieve all PropertySets of an element
     */
    async getElementPropertySetsDeprecatedRaw(requestParameters: GetElementPropertySetsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PropertySet>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementPropertySetsDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getElementPropertySetsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementPropertySetsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementPropertySetsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertySetFromJSON));
    }

    /**
     * Retrieve all PropertySets of an element  Required scopes: ifc:read, model:read
     * Retrieve all PropertySets of an element
     */
    async getElementPropertySetsDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<PropertySet>> {
        const response = await this.getElementPropertySetsDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements  Required scopes: ifc:read, model:read
     * Retrieve all elements of a model
     */
    async getElementsDeprecatedRaw(requestParameters: GetElementsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Element>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementsDeprecated.');
        }

        const queryParameters: any = {};

        if (requestParameters.classification !== undefined) {
            queryParameters['classification'] = requestParameters.classification;
        }

        if (requestParameters.classificationNotation !== undefined) {
            queryParameters['classification__notation'] = requestParameters.classificationNotation;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementFromJSON));
    }

    /**
     * Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements  Required scopes: ifc:read, model:read
     * Retrieve all elements of a model
     */
    async getElementsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, classification?: string, classificationNotation?: string, type?: string, initOverrides?: RequestInit): Promise<Array<Element>> {
        const response = await this.getElementsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, classification: classification, classificationNotation: classificationNotation, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all elements with the classification  Required scopes: ifc:read, model:read
     * Retrieve all elements with the classification
     */
    async getElementsFromClassificationDeprecatedRaw(requestParameters: GetElementsFromClassificationDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Element>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getElementsFromClassificationDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getElementsFromClassificationDeprecated.');
        }

        if (requestParameters.modelClassificationPk === null || requestParameters.modelClassificationPk === undefined) {
            throw new runtime.RequiredError('modelClassificationPk','Required parameter requestParameters.modelClassificationPk was null or undefined when calling getElementsFromClassificationDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getElementsFromClassificationDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"model_classification_pk"}}`, encodeURIComponent(String(requestParameters.modelClassificationPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementFromJSON));
    }

    /**
     * Retrieve all elements with the classification  Required scopes: ifc:read, model:read
     * Retrieve all elements with the classification
     */
    async getElementsFromClassificationDeprecated(cloudPk: number, ifcPk: number, modelClassificationPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Element>> {
        const response = await this.getElementsFromClassificationDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, modelClassificationPk: modelClassificationPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all classifications in a model  Required scopes: ifc:read, model:read
     * Retrieve all classifications in a model
     */
    async getIfcClassificationsDeprecatedRaw(requestParameters: GetIfcClassificationsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Classification>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcClassificationsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcClassificationsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcClassificationsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationFromJSON));
    }

    /**
     * Retrieve all classifications in a model  Required scopes: ifc:read, model:read
     * Retrieve all classifications in a model
     */
    async getIfcClassificationsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Classification>> {
        const response = await this.getIfcClassificationsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one model  Required scopes: ifc:read, model:read
     * Retrieve one model
     */
    async getIfcDeprecatedRaw(requestParameters: GetIfcDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Model>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * Retrieve one model  Required scopes: ifc:read, model:read
     * Retrieve one model
     */
    async getIfcDeprecated(cloudPk: number, id: number, projectPk: number, initOverrides?: RequestInit): Promise<Model> {
        const response = await this.getIfcDeprecatedRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a material of a model  Required scopes: ifc:read, model:read
     * Retrieve a material of a model
     */
    async getIfcMaterialDeprecatedRaw(requestParameters: GetIfcMaterialDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Material>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcMaterialDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcMaterialDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcMaterialDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcMaterialDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaterialFromJSON(jsonValue));
    }

    /**
     * Retrieve a material of a model  Required scopes: ifc:read, model:read
     * Retrieve a material of a model
     */
    async getIfcMaterialDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Material> {
        const response = await this.getIfcMaterialDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all materials of a model.  Required scopes: ifc:read, model:read
     * Retrieve all materials of a model
     */
    async getIfcMaterialsDeprecatedRaw(requestParameters: GetIfcMaterialsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Material>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcMaterialsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcMaterialsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcMaterialsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MaterialFromJSON));
    }

    /**
     * Retrieve all materials of a model.  Required scopes: ifc:read, model:read
     * Retrieve all materials of a model
     */
    async getIfcMaterialsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Material>> {
        const response = await this.getIfcMaterialsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all PropertySets of a model  Required scopes: ifc:read, model:read
     * Retrieve all Properties of a model
     */
    async getIfcPropertiesDeprecatedRaw(requestParameters: GetIfcPropertiesDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Property>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcPropertiesDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcPropertiesDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcPropertiesDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyFromJSON));
    }

    /**
     * Retrieve all PropertySets of a model  Required scopes: ifc:read, model:read
     * Retrieve all Properties of a model
     */
    async getIfcPropertiesDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Property>> {
        const response = await this.getIfcPropertiesDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a PropertyDefinition of a model  Required scopes: ifc:read, model:read
     * Retrieve a PropertyDefinition of a model
     */
    async getIfcPropertyDefinitionDeprecatedRaw(requestParameters: GetIfcPropertyDefinitionDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PropertyDefinition>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcPropertyDefinitionDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDefinitionFromJSON(jsonValue));
    }

    /**
     * Retrieve a PropertyDefinition of a model  Required scopes: ifc:read, model:read
     * Retrieve a PropertyDefinition of a model
     */
    async getIfcPropertyDefinitionDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<PropertyDefinition> {
        const response = await this.getIfcPropertyDefinitionDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all PropertyDefinitions of a model  Required scopes: ifc:read, model:read
     * Retrieve all PropertyDefinitions of a model
     */
    async getIfcPropertyDefinitionsDeprecatedRaw(requestParameters: GetIfcPropertyDefinitionsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PropertyDefinition>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcPropertyDefinitionsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcPropertyDefinitionsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcPropertyDefinitionsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyDefinitionFromJSON));
    }

    /**
     * Retrieve all PropertyDefinitions of a model  Required scopes: ifc:read, model:read
     * Retrieve all PropertyDefinitions of a model
     */
    async getIfcPropertyDefinitionsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<PropertyDefinition>> {
        const response = await this.getIfcPropertyDefinitionsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a Property of a model  Required scopes: ifc:read, model:read
     * Retrieve a Property of a model
     */
    async getIfcPropertyDeprecatedRaw(requestParameters: GetIfcPropertyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcPropertyDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcPropertyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcPropertyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcPropertyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Retrieve a Property of a model  Required scopes: ifc:read, model:read
     * Retrieve a Property of a model
     */
    async getIfcPropertyDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Property> {
        const response = await this.getIfcPropertyDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a Unit of a model  Required scopes: ifc:read, model:read
     * Retrieve a Unit of a model
     */
    async getIfcUnitDeprecatedRaw(requestParameters: GetIfcUnitDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Unit>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcUnitDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIfcUnitDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcUnitDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcUnitDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitFromJSON(jsonValue));
    }

    /**
     * Retrieve a Unit of a model  Required scopes: ifc:read, model:read
     * Retrieve a Unit of a model
     */
    async getIfcUnitDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Unit> {
        const response = await this.getIfcUnitDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all Units of a model  Required scopes: ifc:read, model:read
     * Retrieve all Units of a model
     */
    async getIfcUnitsDeprecatedRaw(requestParameters: GetIfcUnitsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Unit>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcUnitsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getIfcUnitsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcUnitsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UnitFromJSON));
    }

    /**
     * Retrieve all Units of a model  Required scopes: ifc:read, model:read
     * Retrieve all Units of a model
     */
    async getIfcUnitsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Unit>> {
        const response = await this.getIfcUnitsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all models. The field `type` allows you to discriminate which kind of model it is.  Required scopes: ifc:read, model:read
     * Retrieve all models
     */
    async getIfcsDeprecatedRaw(requestParameters: GetIfcsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Model>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getIfcsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getIfcsDeprecated.');
        }

        const queryParameters: any = {};

        if (requestParameters.source !== undefined) {
            queryParameters['source'] = requestParameters.source;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelFromJSON));
    }

    /**
     * Retrieve all models. The field `type` allows you to discriminate which kind of model it is.  Required scopes: ifc:read, model:read
     * Retrieve all models
     */
    async getIfcsDeprecated(cloudPk: number, projectPk: number, source?: GetIfcsDeprecatedSourceEnum, status?: Array<GetIfcsDeprecatedStatusEnum>, type?: Array<GetIfcsDeprecatedTypeEnum>, initOverrides?: RequestInit): Promise<Array<Model>> {
        const response = await this.getIfcsDeprecatedRaw({ cloudPk: cloudPk, projectPk: projectPk, source: source, status: status, type: type }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a layer of a model  Required scopes: ifc:read, model:read
     * Retrieve a layer of a model
     */
    async getLayerDeprecatedRaw(requestParameters: GetLayerDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Layer>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getLayerDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLayerDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getLayerDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getLayerDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerFromJSON(jsonValue));
    }

    /**
     * Retrieve a layer of a model  Required scopes: ifc:read, model:read
     * Retrieve a layer of a model
     */
    async getLayerDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Layer> {
        const response = await this.getLayerDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all layers of a model.  Required scopes: ifc:read, model:read
     * Retrieve all layers of a model
     */
    async getLayersDeprecatedRaw(requestParameters: GetLayersDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Layer>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getLayersDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getLayersDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getLayersDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LayerFromJSON));
    }

    /**
     * Retrieve all layers of a model.  Required scopes: ifc:read, model:read
     * Retrieve all layers of a model
     */
    async getLayersDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Layer>> {
        const response = await this.getLayersDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a material of a model  Required scopes: ifc:read, model:read
     * Retrieve a material of a model
     */
    async getMaterialDeprecatedRaw(requestParameters: GetMaterialDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Material>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getMaterialDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getMaterialDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMaterialDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getMaterialDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getMaterialDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaterialFromJSON(jsonValue));
    }

    /**
     * Retrieve a material of a model  Required scopes: ifc:read, model:read
     * Retrieve a material of a model
     */
    async getMaterialDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Material> {
        const response = await this.getMaterialDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all materials of a model.  Required scopes: ifc:read, model:read
     * Retrieve all materials of a model
     */
    async getMaterialsDeprecatedRaw(requestParameters: GetMaterialsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Material>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getMaterialsDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling getMaterialsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getMaterialsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getMaterialsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MaterialFromJSON));
    }

    /**
     * Retrieve all materials of a model.  Required scopes: ifc:read, model:read
     * Retrieve all materials of a model
     */
    async getMaterialsDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Material>> {
        const response = await this.getMaterialsDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a processor handler  Required scopes: ifc:read, model:read
     * Retrieve a processor handler
     */
    async getProcessorHandlerDeprecatedRaw(requestParameters: GetProcessorHandlerDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProcessorHandler>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getProcessorHandlerDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProcessorHandlerDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getProcessorHandlerDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getProcessorHandlerDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorHandlerFromJSON(jsonValue));
    }

    /**
     * Retrieve a processor handler  Required scopes: ifc:read, model:read
     * Retrieve a processor handler
     */
    async getProcessorHandlerDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<ProcessorHandler> {
        const response = await this.getProcessorHandlerDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Get all processor handlers  Required scopes: ifc:read, model:read
     * Get all processor handlers
     */
    async getProcessorHandlersDeprecatedRaw(requestParameters: GetProcessorHandlersDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProcessorHandler>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getProcessorHandlersDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getProcessorHandlersDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getProcessorHandlersDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProcessorHandlerFromJSON));
    }

    /**
     * Get all processor handlers  Required scopes: ifc:read, model:read
     * Get all processor handlers
     */
    async getProcessorHandlersDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<ProcessorHandler>> {
        const response = await this.getProcessorHandlersDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a PropertySet of a model  Required scopes: ifc:read, model:read
     * Retrieve a PropertySet of a model
     */
    async getPropertySetDeprecatedRaw(requestParameters: GetPropertySetDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PropertySet>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getPropertySetDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPropertySetDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getPropertySetDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getPropertySetDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertySetFromJSON(jsonValue));
    }

    /**
     * Retrieve a PropertySet of a model  Required scopes: ifc:read, model:read
     * Retrieve a PropertySet of a model
     */
    async getPropertySetDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<PropertySet> {
        const response = await this.getPropertySetDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all PropertySets of a model  Required scopes: ifc:read, model:read
     * Retrieve all PropertySets of a model
     */
    async getPropertySetsDeprecatedRaw(requestParameters: GetPropertySetsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PropertySet>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getPropertySetsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getPropertySetsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getPropertySetsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertySetFromJSON));
    }

    /**
     * Retrieve all PropertySets of a model  Required scopes: ifc:read, model:read
     * Retrieve all PropertySets of a model
     */
    async getPropertySetsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<PropertySet>> {
        const response = await this.getPropertySetsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Instead of a nested representation, this route respond with a flat structure and indices pointing to related object. The IFC file will not be updated. The created elements will be accessible over the API and when exporting an IFC file. Returns elements, property_sets, properties, definitions and units in a JSON optimized structure  Required scopes: ifc:read, model:read
     * Retrieve all elements in a optimized format
     */
    async getRawElementsDeprecatedRaw(requestParameters: GetRawElementsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RawElements>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRawElementsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getRawElementsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRawElementsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RawElementsFromJSON(jsonValue));
    }

    /**
     * Instead of a nested representation, this route respond with a flat structure and indices pointing to related object. The IFC file will not be updated. The created elements will be accessible over the API and when exporting an IFC file. Returns elements, property_sets, properties, definitions and units in a JSON optimized structure  Required scopes: ifc:read, model:read
     * Retrieve all elements in a optimized format
     */
    async getRawElementsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<RawElements> {
        const response = await this.getRawElementsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an element of a model with a simple value representation  Required scopes: ifc:read, model:read
     * Retrieve an element of a model with a simple value representation
     */
    async getSimpleElementDeprecatedRaw(requestParameters: GetSimpleElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SimpleElement>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSimpleElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSimpleElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSimpleElementDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getSimpleElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}/simple`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleElementFromJSON(jsonValue));
    }

    /**
     * Retrieve an element of a model with a simple value representation  Required scopes: ifc:read, model:read
     * Retrieve an element of a model with a simple value representation
     */
    async getSimpleElementDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<SimpleElement> {
        const response = await this.getSimpleElementDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all elements of a model with a simple value representation  Required scopes: ifc:read, model:read
     * Retrieve all elements of a model with a simple value representation
     */
    async getSimpleElementsDeprecatedRaw(requestParameters: GetSimpleElementsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SimpleElement>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSimpleElementsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSimpleElementsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSimpleElementsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/simple`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleElementFromJSON(jsonValue));
    }

    /**
     * Retrieve all elements of a model with a simple value representation  Required scopes: ifc:read, model:read
     * Retrieve all elements of a model with a simple value representation
     */
    async getSimpleElementsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<SimpleElement> {
        const response = await this.getSimpleElementsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one space of the model  Required scopes: ifc:read, model:read
     * Retrieve one space of the model
     */
    async getSpaceDeprecatedRaw(requestParameters: GetSpaceDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSpaceDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSpaceDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSpaceDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSpaceDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceFromJSON(jsonValue));
    }

    /**
     * Retrieve one space of the model  Required scopes: ifc:read, model:read
     * Retrieve one space of the model
     */
    async getSpaceDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Space> {
        const response = await this.getSpaceDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all spaces of the model  Required scopes: ifc:read, model:read
     * Retrieve all spaces of the model
     */
    async getSpacesDeprecatedRaw(requestParameters: GetSpacesDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Space>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSpacesDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSpacesDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSpacesDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpaceFromJSON));
    }

    /**
     * Retrieve all spaces of the model  Required scopes: ifc:read, model:read
     * Retrieve all spaces of the model
     */
    async getSpacesDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Space>> {
        const response = await this.getSpacesDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a storey of a model  Required scopes: ifc:read, model:read
     * Retrieve a storey of a model
     */
    async getStoreyDeprecatedRaw(requestParameters: GetStoreyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Storey>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getStoreyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getStoreyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getStoreyDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getStoreyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreyFromJSON(jsonValue));
    }

    /**
     * Retrieve a storey of a model  Required scopes: ifc:read, model:read
     * Retrieve a storey of a model
     */
    async getStoreyDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<Storey> {
        const response = await this.getStoreyDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the postioning of the plan in the storey  Required scopes: ifc:read, model:read
     * Retrieve the postioning of the plan in the storey
     */
    async getStoreyPlanPositioningDeprecatedRaw(requestParameters: GetStoreyPlanPositioningDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PositioningPlan>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getStoreyPlanPositioningDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStoreyPlanPositioningDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getStoreyPlanPositioningDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getStoreyPlanPositioningDeprecated.');
        }

        if (requestParameters.storeyUuid === null || requestParameters.storeyUuid === undefined) {
            throw new runtime.RequiredError('storeyUuid','Required parameter requestParameters.storeyUuid was null or undefined when calling getStoreyPlanPositioningDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}/positioning`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"storey_uuid"}}`, encodeURIComponent(String(requestParameters.storeyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PositioningPlanFromJSON(jsonValue));
    }

    /**
     * Retrieve the postioning of the plan in the storey  Required scopes: ifc:read, model:read
     * Retrieve the postioning of the plan in the storey
     */
    async getStoreyPlanPositioningDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, storeyUuid: string, initOverrides?: RequestInit): Promise<PositioningPlan> {
        const response = await this.getStoreyPlanPositioningDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, storeyUuid: storeyUuid }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all storeys of a model.  Required scopes: ifc:read, model:read
     * Retrieve all storeys of a model
     */
    async getStoreysDeprecatedRaw(requestParameters: GetStoreysDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Storey>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getStoreysDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getStoreysDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getStoreysDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoreyFromJSON));
    }

    /**
     * Retrieve all storeys of a model.  Required scopes: ifc:read, model:read
     * Retrieve all storeys of a model
     */
    async getStoreysDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Storey>> {
        const response = await this.getStoreysDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a system of a model  Required scopes: ifc:read, model:read
     * Retrieve a system of a model
     */
    async getSystemDeprecatedRaw(requestParameters: GetSystemDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<System>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSystemDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSystemDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSystemDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getSystemDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemFromJSON(jsonValue));
    }

    /**
     * Retrieve a system of a model  Required scopes: ifc:read, model:read
     * Retrieve a system of a model
     */
    async getSystemDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<System> {
        const response = await this.getSystemDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all systems of a model.  Required scopes: ifc:read, model:read
     * Retrieve all systems of a model
     */
    async getSystemsDeprecatedRaw(requestParameters: GetSystemsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<System>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getSystemsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getSystemsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getSystemsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SystemFromJSON));
    }

    /**
     * Retrieve all systems of a model.  Required scopes: ifc:read, model:read
     * Retrieve all systems of a model
     */
    async getSystemsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<System>> {
        const response = await this.getSystemsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one zone of a model  Required scopes: ifc:read, model:read
     * Retrieve one zone of a model
     */
    async getZoneDeprecatedRaw(requestParameters: GetZoneDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Zone>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getZoneDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getZoneDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getZoneDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getZoneDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneFromJSON(jsonValue));
    }

    /**
     * Retrieve one zone of a model  Required scopes: ifc:read, model:read
     * Retrieve one zone of a model
     */
    async getZoneDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Zone> {
        const response = await this.getZoneDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one space of a zone  Required scopes: ifc:read, model:read
     * Retrieve one space of a zone
     */
    async getZoneSpaceDeprecatedRaw(requestParameters: GetZoneSpaceDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ZoneSpace>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getZoneSpaceDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getZoneSpaceDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getZoneSpaceDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getZoneSpaceDeprecated.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling getZoneSpaceDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneSpaceFromJSON(jsonValue));
    }

    /**
     * Retrieve one space of a zone  Required scopes: ifc:read, model:read
     * Retrieve one space of a zone
     */
    async getZoneSpaceDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, zonePk: number, initOverrides?: RequestInit): Promise<ZoneSpace> {
        const response = await this.getZoneSpaceDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, zonePk: zonePk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all spaces of a zone  Required scopes: ifc:read, model:read
     * Retrieve all spaces of a zone
     */
    async getZoneSpacesDeprecatedRaw(requestParameters: GetZoneSpacesDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ZoneSpace>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getZoneSpacesDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getZoneSpacesDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getZoneSpacesDeprecated.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling getZoneSpacesDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ZoneSpaceFromJSON));
    }

    /**
     * Retrieve all spaces of a zone  Required scopes: ifc:read, model:read
     * Retrieve all spaces of a zone
     */
    async getZoneSpacesDeprecated(cloudPk: number, ifcPk: number, projectPk: number, zonePk: number, initOverrides?: RequestInit): Promise<Array<ZoneSpace>> {
        const response = await this.getZoneSpacesDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, zonePk: zonePk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve parent zones of a model. Children zones we\'ll be in the \'zones\' field  Required scopes: ifc:read, model:read
     * Retrieve zones of a model
     */
    async getZonesDeprecatedRaw(requestParameters: GetZonesDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Zone>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getZonesDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getZonesDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getZonesDeprecated.');
        }

        const queryParameters: any = {};

        if (requestParameters.color !== undefined) {
            queryParameters['color'] = requestParameters.color;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ZoneFromJSON));
    }

    /**
     * Retrieve parent zones of a model. Children zones we\'ll be in the \'zones\' field  Required scopes: ifc:read, model:read
     * Retrieve zones of a model
     */
    async getZonesDeprecated(cloudPk: number, ifcPk: number, projectPk: number, color?: string, initOverrides?: RequestInit): Promise<Array<Zone>> {
        const response = await this.getZonesDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, color: color }, initOverrides);
        return await response.value();
    }

    /**
     * A nex check will be played with the current state of elements, properties, etc.  Required scopes: check:write, ifc:read
     * Launch a new check on the model
     */
    async launchNewCheckDeprecatedRaw(requestParameters: LaunchNewCheckDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling launchNewCheckDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling launchNewCheckDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling launchNewCheckDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling launchNewCheckDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}/launch-check`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcCheckerRequestToJSON(requestParameters.ifcCheckerRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A nex check will be played with the current state of elements, properties, etc.  Required scopes: check:write, ifc:read
     * Launch a new check on the model
     */
    async launchNewCheckDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, ifcCheckerRequest?: IfcCheckerRequest, initOverrides?: RequestInit): Promise<void> {
        await this.launchNewCheckDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, ifcCheckerRequest: ifcCheckerRequest }, initOverrides);
    }

    /**
     *  Bulk relation create available. You can either post an id or a list of ids. Is you post a list, the response will be a list (in the same order) of created relation or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Link one or many documents to an element
     */
    async linkDocumentsOfElementDeprecatedRaw(requestParameters: LinkDocumentsOfElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Document>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling linkDocumentsOfElementDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling linkDocumentsOfElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling linkDocumentsOfElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling linkDocumentsOfElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocumentFromJSON));
    }

    /**
     *  Bulk relation create available. You can either post an id or a list of ids. Is you post a list, the response will be a list (in the same order) of created relation or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors   Required scopes: ifc:write, model:write
     * Link one or many documents to an element
     */
    async linkDocumentsOfElementDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Document>> {
        const response = await this.linkDocumentsOfElementDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * List all associations between classifications and elements  Required scopes: ifc:read, model:read
     * List all associations between classifications and elements
     */
    async listClassificationElementRelationsDeprecatedRaw(requestParameters: ListClassificationElementRelationsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ElementClassificationRelation>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling listClassificationElementRelationsDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling listClassificationElementRelationsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling listClassificationElementRelationsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ElementClassificationRelationFromJSON));
    }

    /**
     * List all associations between classifications and elements  Required scopes: ifc:read, model:read
     * List all associations between classifications and elements
     */
    async listClassificationElementRelationsDeprecated(cloudPk: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<ElementClassificationRelation>> {
        const response = await this.listClassificationElementRelationsDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Only works for IFC files. Merge IFC files. The merged IFC file will be put in the same folder that the first IFC of the list  Required scopes: ifc:write, model:write
     * Merge IFC files
     */
    async mergeIfcsDeprecatedRaw(requestParameters: MergeIfcsDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling mergeIfcsDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling mergeIfcsDeprecated.');
        }

        if (requestParameters.ifcMergeRequest === null || requestParameters.ifcMergeRequest === undefined) {
            throw new runtime.RequiredError('ifcMergeRequest','Required parameter requestParameters.ifcMergeRequest was null or undefined when calling mergeIfcsDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/merge`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcMergeRequestToJSON(requestParameters.ifcMergeRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Only works for IFC files. Merge IFC files. The merged IFC file will be put in the same folder that the first IFC of the list  Required scopes: ifc:write, model:write
     * Merge IFC files
     */
    async mergeIfcsDeprecated(cloudPk: number, projectPk: number, ifcMergeRequest: IfcMergeRequest, initOverrides?: RequestInit): Promise<void> {
        await this.mergeIfcsDeprecatedRaw({ cloudPk: cloudPk, projectPk: projectPk, ifcMergeRequest: ifcMergeRequest }, initOverrides);
    }

    /**
     * Only works for IFC files. Optimize the IFC. A new optimized IFC file will be put in the same folder that the original IFC  Required scopes: ifc:write, model:write
     * Optimize the IFC
     */
    async optimizeIfcDeprecatedRaw(requestParameters: OptimizeIfcDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling optimizeIfcDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling optimizeIfcDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling optimizeIfcDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/optimize`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcOptimizeRequestToJSON(requestParameters.ifcOptimizeRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Only works for IFC files. Optimize the IFC. A new optimized IFC file will be put in the same folder that the original IFC  Required scopes: ifc:write, model:write
     * Optimize the IFC
     */
    async optimizeIfcDeprecated(cloudPk: number, id: number, projectPk: number, ifcOptimizeRequest?: IfcOptimizeRequest, initOverrides?: RequestInit): Promise<void> {
        await this.optimizeIfcDeprecatedRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk, ifcOptimizeRequest: ifcOptimizeRequest }, initOverrides);
    }

    /**
     * Remove all property sets from element. Property Sets will not be deleted, just detached from element  Required scopes: ifc:write, model:write
     * Remove all property sets from element
     */
    async removeAllElementPropertySetDeprecatedRaw(requestParameters: RemoveAllElementPropertySetDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeAllElementPropertySetDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeAllElementPropertySetDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeAllElementPropertySetDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeAllElementPropertySetDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/all`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove all property sets from element. Property Sets will not be deleted, just detached from element  Required scopes: ifc:write, model:write
     * Remove all property sets from element
     */
    async removeAllElementPropertySetDeprecated(cloudPk: number, elementUuid: string, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.removeAllElementPropertySetDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * The classification will not be deleted  Required scopes: ifc:write, model:write
     * Remove a classification from an element
     */
    async removeClassificationOfElementDeprecatedRaw(requestParameters: RemoveClassificationOfElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeClassificationOfElementDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeClassificationOfElementDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeClassificationOfElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeClassificationOfElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeClassificationOfElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The classification will not be deleted  Required scopes: ifc:write, model:write
     * Remove a classification from an element
     */
    async removeClassificationOfElementDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.removeClassificationOfElementDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * The document will not be deleted  Required scopes: ifc:write, model:write
     * Remove a documents from an element
     */
    async removeDocumentOfElementDeprecatedRaw(requestParameters: RemoveDocumentOfElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeDocumentOfElementDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeDocumentOfElementDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeDocumentOfElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeDocumentOfElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeDocumentOfElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The document will not be deleted  Required scopes: ifc:write, model:write
     * Remove a documents from an element
     */
    async removeDocumentOfElementDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.removeDocumentOfElementDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete the relation between the element and the property set. Does not delete any object  Required scopes: ifc:write, model:write
     * Remove a PropertySet from an element
     */
    async removeElementPropertySetDeprecatedRaw(requestParameters: RemoveElementPropertySetDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeElementPropertySetDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeElementPropertySetDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeElementPropertySetDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeElementPropertySetDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeElementPropertySetDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the relation between the element and the property set. Does not delete any object  Required scopes: ifc:write, model:write
     * Remove a PropertySet from an element
     */
    async removeElementPropertySetDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.removeElementPropertySetDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete a Definition to a Property  Required scopes: ifc:write, model:write
     * Delete a Definition to a Property
     */
    async removeElementPropertySetPropertyDefinitionDeprecatedRaw(requestParameters: RemoveElementPropertySetPropertyDefinitionDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling removeElementPropertySetPropertyDefinitionDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling removeElementPropertySetPropertyDefinitionDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Definition to a Property  Required scopes: ifc:write, model:write
     * Delete a Definition to a Property
     */
    async removeElementPropertySetPropertyDefinitionDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, propertyPk: number, propertysetPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.removeElementPropertySetPropertyDefinitionDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk, propertyPk: propertyPk, propertysetPk: propertysetPk }, initOverrides);
    }

    /**
     * Remove a Unit from a Definition  Required scopes: ifc:write, model:write
     * Remove a Unit from a Definition
     */
    async removeElementPropertySetPropertyDefinitionUnitDeprecatedRaw(requestParameters: RemoveElementPropertySetPropertyDefinitionUnitDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.propertyPk === null || requestParameters.propertyPk === undefined) {
            throw new runtime.RequiredError('propertyPk','Required parameter requestParameters.propertyPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.propertydefinitionPk === null || requestParameters.propertydefinitionPk === undefined) {
            throw new runtime.RequiredError('propertydefinitionPk','Required parameter requestParameters.propertydefinitionPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling removeElementPropertySetPropertyDefinitionUnitDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"property_pk"}}`, encodeURIComponent(String(requestParameters.propertyPk))).replace(`{${"propertydefinition_pk"}}`, encodeURIComponent(String(requestParameters.propertydefinitionPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a Unit from a Definition  Required scopes: ifc:write, model:write
     * Remove a Unit from a Definition
     */
    async removeElementPropertySetPropertyDefinitionUnitDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, propertyPk: number, propertydefinitionPk: number, propertysetPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.removeElementPropertySetPropertyDefinitionUnitDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk, propertyPk: propertyPk, propertydefinitionPk: propertydefinitionPk, propertysetPk: propertysetPk }, initOverrides);
    }

    /**
     * Remove a property from a PropertySet  Required scopes: ifc:write, model:write
     * Remove a property from a PropertySet
     */
    async removeElementPropertySetPropertyDeprecatedRaw(requestParameters: RemoveElementPropertySetPropertyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling removeElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling removeElementPropertySetPropertyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a property from a PropertySet  Required scopes: ifc:write, model:write
     * Remove a property from a PropertySet
     */
    async removeElementPropertySetPropertyDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, propertysetPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.removeElementPropertySetPropertyDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk, propertysetPk: propertysetPk }, initOverrides);
    }

    /**
     * Remove the classification from all elements. No element nor classification will be deleted  Required scopes: ifc:write, model:write
     * Remove the classification from all elements
     */
    async removeElementsFromClassificationDeprecatedRaw(requestParameters: RemoveElementsFromClassificationDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling removeElementsFromClassificationDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling removeElementsFromClassificationDeprecated.');
        }

        if (requestParameters.modelClassificationPk === null || requestParameters.modelClassificationPk === undefined) {
            throw new runtime.RequiredError('modelClassificationPk','Required parameter requestParameters.modelClassificationPk was null or undefined when calling removeElementsFromClassificationDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling removeElementsFromClassificationDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling removeElementsFromClassificationDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"model_classification_pk"}}`, encodeURIComponent(String(requestParameters.modelClassificationPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the classification from all elements. No element nor classification will be deleted  Required scopes: ifc:write, model:write
     * Remove the classification from all elements
     */
    async removeElementsFromClassificationDeprecated(cloudPk: number, ifcPk: number, modelClassificationPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<void> {
        await this.removeElementsFromClassificationDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, modelClassificationPk: modelClassificationPk, projectPk: projectPk, uuid: uuid }, initOverrides);
    }

    /**
     * Reprocess the model. All data that are not in the original model files will be lost  Required scopes: ifc:write, model:write
     * Reprocess Model file
     */
    async reprocessIfcDeprecatedRaw(requestParameters: ReprocessIfcDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling reprocessIfcDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reprocessIfcDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling reprocessIfcDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/reprocess`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reprocess the model. All data that are not in the original model files will be lost  Required scopes: ifc:write, model:write
     * Reprocess Model file
     */
    async reprocessIfcDeprecated(cloudPk: number, id: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.reprocessIfcDeprecatedRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk }, initOverrides);
    }

    /**
     * You can update the expiration date or the read_only field  Required scopes: ifc:token_manage, model:token_manage
     * Update some fields of a token
     */
    async updateAccessTokenDeprecatedRaw(requestParameters: UpdateAccessTokenDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcAccessToken>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateAccessTokenDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateAccessTokenDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateAccessTokenDeprecated.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling updateAccessTokenDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIfcAccessTokenRequestToJSON(requestParameters.patchedIfcAccessTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcAccessTokenFromJSON(jsonValue));
    }

    /**
     * You can update the expiration date or the read_only field  Required scopes: ifc:token_manage, model:token_manage
     * Update some fields of a token
     */
    async updateAccessTokenDeprecated(cloudPk: number, ifcPk: number, projectPk: number, token: string, patchedIfcAccessTokenRequest?: PatchedIfcAccessTokenRequest, initOverrides?: RequestInit): Promise<IfcAccessToken> {
        const response = await this.updateAccessTokenDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, token: token, patchedIfcAccessTokenRequest: patchedIfcAccessTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a building  Required scopes: ifc:write, model:write
     * Update some fields of a building
     */
    async updateBuildingDeprecatedRaw(requestParameters: UpdateBuildingDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Building>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateBuildingDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateBuildingDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateBuildingDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateBuildingDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildingFromJSON(jsonValue));
    }

    /**
     * Update some fields of a building  Required scopes: ifc:write, model:write
     * Update some fields of a building
     */
    async updateBuildingDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<Building> {
        const response = await this.updateBuildingDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
        return await response.value();
    }

    /**
     * Update the postioning of the plan in the building  Required scopes: ifc:write, model:write
     * Update the postioning of the plan in the building
     */
    async updateBuildingPlanPositioningDeprecatedRaw(requestParameters: UpdateBuildingPlanPositioningDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PositioningPlan>> {
        if (requestParameters.buildingUuid === null || requestParameters.buildingUuid === undefined) {
            throw new runtime.RequiredError('buildingUuid','Required parameter requestParameters.buildingUuid was null or undefined when calling updateBuildingPlanPositioningDeprecated.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateBuildingPlanPositioningDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBuildingPlanPositioningDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateBuildingPlanPositioningDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateBuildingPlanPositioningDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}/positioning`.replace(`{${"building_uuid"}}`, encodeURIComponent(String(requestParameters.buildingUuid))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPositioningPlanRequestToJSON(requestParameters.patchedPositioningPlanRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PositioningPlanFromJSON(jsonValue));
    }

    /**
     * Update the postioning of the plan in the building  Required scopes: ifc:write, model:write
     * Update the postioning of the plan in the building
     */
    async updateBuildingPlanPositioningDeprecated(buildingUuid: string, cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedPositioningPlanRequest?: PatchedPositioningPlanRequest, initOverrides?: RequestInit): Promise<PositioningPlan> {
        const response = await this.updateBuildingPlanPositioningDeprecatedRaw({ buildingUuid: buildingUuid, cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedPositioningPlanRequest: patchedPositioningPlanRequest }, initOverrides);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Update some fields of a checker of a model
     */
    async updateCheckerDeprecatedRaw(requestParameters: UpdateCheckerDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateCheckerDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCheckerDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateCheckerDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateCheckerDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIfcCheckerRequestToJSON(requestParameters.patchedIfcCheckerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Update some fields of a checker of a model
     */
    async updateCheckerDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedIfcCheckerRequest?: PatchedIfcCheckerRequest, initOverrides?: RequestInit): Promise<IfcChecker> {
        const response = await this.updateCheckerDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedIfcCheckerRequest: patchedIfcCheckerRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a CheckerResult  Required scopes: check:write
     * Update some fields of a CheckerResult
     */
    async updateCheckerResultDeprecatedRaw(requestParameters: UpdateCheckerResultDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling updateCheckerResultDeprecated.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateCheckerResultDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCheckerResultDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateCheckerResultDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateCheckerResultDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCheckerResultRequestToJSON(requestParameters.patchedCheckerResultRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * Update some fields of a CheckerResult  Required scopes: check:write
     * Update some fields of a CheckerResult
     */
    async updateCheckerResultDeprecated(checkerPk: number, cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedCheckerResultRequest?: PatchedCheckerResultRequest, initOverrides?: RequestInit): Promise<CheckerResult> {
        const response = await this.updateCheckerResultDeprecatedRaw({ checkerPk: checkerPk, cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedCheckerResultRequest: patchedCheckerResultRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of an element
     */
    async updateElementDeprecatedRaw(requestParameters: UpdateElementDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Element>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateElementDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateElementDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateElementDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateElementDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedElementRequestToJSON(requestParameters.patchedElementRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ElementFromJSON(jsonValue));
    }

    /**
     * Update some fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of an element
     */
    async updateElementDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, patchedElementRequest?: PatchedElementRequest, initOverrides?: RequestInit): Promise<Element> {
        const response = await this.updateElementDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid, patchedElementRequest: patchedElementRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new property will be created to replace the property for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty  Required scopes: ifc:write, model:write
     * Update a property from an element
     */
    async updateElementPropertySetPropertyDeprecatedRaw(requestParameters: UpdateElementPropertySetPropertyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.elementUuid === null || requestParameters.elementUuid === undefined) {
            throw new runtime.RequiredError('elementUuid','Required parameter requestParameters.elementUuid was null or undefined when calling updateElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateElementPropertySetPropertyDeprecated.');
        }

        if (requestParameters.propertysetPk === null || requestParameters.propertysetPk === undefined) {
            throw new runtime.RequiredError('propertysetPk','Required parameter requestParameters.propertysetPk was null or undefined when calling updateElementPropertySetPropertyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"element_uuid"}}`, encodeURIComponent(String(requestParameters.elementUuid))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"propertyset_pk"}}`, encodeURIComponent(String(requestParameters.propertysetPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPropertyRequestToJSON(requestParameters.patchedPropertyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new property will be created to replace the property for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty  Required scopes: ifc:write, model:write
     * Update a property from an element
     */
    async updateElementPropertySetPropertyDeprecated(cloudPk: number, elementUuid: string, id: number, ifcPk: number, projectPk: number, propertysetPk: number, patchedPropertyRequest?: PatchedPropertyRequest, initOverrides?: RequestInit): Promise<Property> {
        const response = await this.updateElementPropertySetPropertyDeprecatedRaw({ cloudPk: cloudPk, elementUuid: elementUuid, id: id, ifcPk: ifcPk, projectPk: projectPk, propertysetPk: propertysetPk, patchedPropertyRequest: patchedPropertyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a model  Required scopes: ifc:write, model:write
     * Update some fields of a model
     */
    async updateIfcDeprecatedRaw(requestParameters: UpdateIfcDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Model>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateIfcDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIfcDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateIfcDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedModelRequestToJSON(requestParameters.patchedModelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * Update some fields of a model  Required scopes: ifc:write, model:write
     * Update some fields of a model
     */
    async updateIfcDeprecated(cloudPk: number, id: number, projectPk: number, patchedModelRequest?: PatchedModelRequest, initOverrides?: RequestInit): Promise<Model> {
        const response = await this.updateIfcDeprecatedRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk, patchedModelRequest: patchedModelRequest }, initOverrides);
        return await response.value();
    }

    /**
     * This route does not accept JSON, only files as x-www-form-urlencoded  Required scopes: ifc:write, model:write
     * Update models file (gltf, svg, structure, etc)
     */
    async updateIfcFilesDeprecatedRaw(requestParameters: UpdateIfcFilesDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ModelFiles>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateIfcFilesDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIfcFilesDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateIfcFilesDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.structureFile !== undefined) {
            formParams.append('structure_file', requestParameters.structureFile as any);
        }

        if (requestParameters.systemsFile !== undefined) {
            formParams.append('systems_file', requestParameters.systemsFile as any);
        }

        if (requestParameters.mapFile !== undefined) {
            formParams.append('map_file', requestParameters.mapFile as any);
        }

        if (requestParameters.gltfFile !== undefined) {
            formParams.append('gltf_file', requestParameters.gltfFile as any);
        }

        if (requestParameters.gltfWithOpeningsFile !== undefined) {
            formParams.append('gltf_with_openings_file', requestParameters.gltfWithOpeningsFile as any);
        }

        if (requestParameters.bvhTreeFile !== undefined) {
            formParams.append('bvh_tree_file', requestParameters.bvhTreeFile as any);
        }

        if (requestParameters.viewer360File !== undefined) {
            formParams.append('viewer_360_file', requestParameters.viewer360File as any);
        }

        if (requestParameters.xktFile !== undefined) {
            formParams.append('xkt_file', requestParameters.xktFile as any);
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/files`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFilesFromJSON(jsonValue));
    }

    /**
     * This route does not accept JSON, only files as x-www-form-urlencoded  Required scopes: ifc:write, model:write
     * Update models file (gltf, svg, structure, etc)
     */
    async updateIfcFilesDeprecated(cloudPk: number, id: number, projectPk: number, structureFile?: Blob | null, systemsFile?: Blob | null, mapFile?: Blob | null, gltfFile?: Blob | null, gltfWithOpeningsFile?: Blob | null, bvhTreeFile?: Blob | null, viewer360File?: Blob | null, xktFile?: Blob | null, initOverrides?: RequestInit): Promise<ModelFiles> {
        const response = await this.updateIfcFilesDeprecatedRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk, structureFile: structureFile, systemsFile: systemsFile, mapFile: mapFile, gltfFile: gltfFile, gltfWithOpeningsFile: gltfWithOpeningsFile, bvhTreeFile: bvhTreeFile, viewer360File: viewer360File, xktFile: xktFile }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of many PropertyDefinitions of a model  Required scopes: ifc:write, model:write
     * Update some fields of many PropertyDefinitions of a model
     */
    async updateIfcPropertyDefinitionDeprecatedRaw(requestParameters: UpdateIfcPropertyDefinitionDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PropertyDefinition>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateIfcPropertyDefinitionDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateIfcPropertyDefinitionDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPropertyDefinitionRequestToJSON(requestParameters.patchedPropertyDefinitionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDefinitionFromJSON(jsonValue));
    }

    /**
     * Update some fields of many PropertyDefinitions of a model  Required scopes: ifc:write, model:write
     * Update some fields of many PropertyDefinitions of a model
     */
    async updateIfcPropertyDefinitionDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedPropertyDefinitionRequest?: PatchedPropertyDefinitionRequest, initOverrides?: RequestInit): Promise<PropertyDefinition> {
        const response = await this.updateIfcPropertyDefinitionDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedPropertyDefinitionRequest: patchedPropertyDefinitionRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a Property  Required scopes: ifc:write, model:write
     * Update some fields of a Property
     */
    async updateIfcPropertyDeprecatedRaw(requestParameters: UpdateIfcPropertyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Property>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateIfcPropertyDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIfcPropertyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateIfcPropertyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateIfcPropertyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPropertyRequestToJSON(requestParameters.patchedPropertyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Property  Required scopes: ifc:write, model:write
     * Update some fields of a Property
     */
    async updateIfcPropertyDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedPropertyRequest?: PatchedPropertyRequest, initOverrides?: RequestInit): Promise<Property> {
        const response = await this.updateIfcPropertyDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedPropertyRequest: patchedPropertyRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a Unit of a model  Required scopes: ifc:write, model:write
     * Update some fields of a Unit of a model
     */
    async updateIfcUnitDeprecatedRaw(requestParameters: UpdateIfcUnitDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Unit>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateIfcUnitDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIfcUnitDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateIfcUnitDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateIfcUnitDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUnitRequestToJSON(requestParameters.patchedUnitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Unit of a model  Required scopes: ifc:write, model:write
     * Update some fields of a Unit of a model
     */
    async updateIfcUnitDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedUnitRequest?: PatchedUnitRequest, initOverrides?: RequestInit): Promise<Unit> {
        const response = await this.updateIfcUnitDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedUnitRequest: patchedUnitRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of a layer
     */
    async updateLayerDeprecatedRaw(requestParameters: UpdateLayerDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Layer>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateLayerDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLayerDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateLayerDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateLayerDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLayerRequestToJSON(requestParameters.patchedLayerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LayerFromJSON(jsonValue));
    }

    /**
     * Update some fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of a layer
     */
    async updateLayerDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedLayerRequest?: PatchedLayerRequest, initOverrides?: RequestInit): Promise<Layer> {
        const response = await this.updateLayerDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedLayerRequest: patchedLayerRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update order of all plan of a building  Required scopes: ifc:write, model:write
     * Update order of all plan of a building
     */
    async updateOrderBuildingPlanDeprecatedRaw(requestParameters: UpdateOrderBuildingPlanDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Storey>> {
        if (requestParameters.buildingUuid === null || requestParameters.buildingUuid === undefined) {
            throw new runtime.RequiredError('buildingUuid','Required parameter requestParameters.buildingUuid was null or undefined when calling updateOrderBuildingPlanDeprecated.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateOrderBuildingPlanDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateOrderBuildingPlanDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateOrderBuildingPlanDeprecated.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateOrderBuildingPlanDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/order`.replace(`{${"building_uuid"}}`, encodeURIComponent(String(requestParameters.buildingUuid))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreyFromJSON(jsonValue));
    }

    /**
     * Update order of all plan of a building  Required scopes: ifc:write, model:write
     * Update order of all plan of a building
     */
    async updateOrderBuildingPlanDeprecated(buildingUuid: string, cloudPk: number, ifcPk: number, projectPk: number, requestBody: Array<number>, initOverrides?: RequestInit): Promise<Storey> {
        const response = await this.updateOrderBuildingPlanDeprecatedRaw({ buildingUuid: buildingUuid, cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, requestBody: requestBody }, initOverrides);
        return await response.value();
    }

    /**
     * Update order of all plan of a storey  Required scopes: ifc:write, model:write
     * Update order of all plan of a storey
     */
    async updateOrderStoreyPlanDeprecatedRaw(requestParameters: UpdateOrderStoreyPlanDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Storey>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateOrderStoreyPlanDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateOrderStoreyPlanDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateOrderStoreyPlanDeprecated.');
        }

        if (requestParameters.storeyUuid === null || requestParameters.storeyUuid === undefined) {
            throw new runtime.RequiredError('storeyUuid','Required parameter requestParameters.storeyUuid was null or undefined when calling updateOrderStoreyPlanDeprecated.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateOrderStoreyPlanDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/order`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"storey_uuid"}}`, encodeURIComponent(String(requestParameters.storeyUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreyFromJSON(jsonValue));
    }

    /**
     * Update order of all plan of a storey  Required scopes: ifc:write, model:write
     * Update order of all plan of a storey
     */
    async updateOrderStoreyPlanDeprecated(cloudPk: number, ifcPk: number, projectPk: number, storeyUuid: string, requestBody: Array<number>, initOverrides?: RequestInit): Promise<Storey> {
        const response = await this.updateOrderStoreyPlanDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, storeyUuid: storeyUuid, requestBody: requestBody }, initOverrides);
        return await response.value();
    }

    /**
     * Update order of all storey of a model  Required scopes: ifc:write, model:write
     * Update order of all storey of a model
     */
    async updateOrderStoreysDeprecatedRaw(requestParameters: UpdateOrderStoreysDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Storey>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateOrderStoreysDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateOrderStoreysDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateOrderStoreysDeprecated.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateOrderStoreysDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/order`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoreyFromJSON));
    }

    /**
     * Update order of all storey of a model  Required scopes: ifc:write, model:write
     * Update order of all storey of a model
     */
    async updateOrderStoreysDeprecated(cloudPk: number, ifcPk: number, projectPk: number, requestBody: Array<string>, initOverrides?: RequestInit): Promise<Array<Storey>> {
        const response = await this.updateOrderStoreysDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, requestBody: requestBody }, initOverrides);
        return await response.value();
    }

    /**
     * Update the status of a processor handler  Required scopes: ifc:write, model:write
     * Update the status of a processor handler
     */
    async updateProcessorHandlerDeprecatedRaw(requestParameters: UpdateProcessorHandlerDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProcessorHandler>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateProcessorHandlerDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProcessorHandlerDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateProcessorHandlerDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateProcessorHandlerDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProcessorHandlerRequestToJSON(requestParameters.patchedProcessorHandlerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessorHandlerFromJSON(jsonValue));
    }

    /**
     * Update the status of a processor handler  Required scopes: ifc:write, model:write
     * Update the status of a processor handler
     */
    async updateProcessorHandlerDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedProcessorHandlerRequest?: PatchedProcessorHandlerRequest, initOverrides?: RequestInit): Promise<ProcessorHandler> {
        const response = await this.updateProcessorHandlerDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedProcessorHandlerRequest: patchedProcessorHandlerRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a PropertySet  Required scopes: ifc:write, model:write
     * Update some fields of a PropertySet
     */
    async updatePropertySetDeprecatedRaw(requestParameters: UpdatePropertySetDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PropertySet>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updatePropertySetDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePropertySetDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updatePropertySetDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updatePropertySetDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPropertySetRequestToJSON(requestParameters.patchedPropertySetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertySetFromJSON(jsonValue));
    }

    /**
     * Update some fields of a PropertySet  Required scopes: ifc:write, model:write
     * Update some fields of a PropertySet
     */
    async updatePropertySetDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedPropertySetRequest?: PatchedPropertySetRequest, initOverrides?: RequestInit): Promise<PropertySet> {
        const response = await this.updatePropertySetDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedPropertySetRequest: patchedPropertySetRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of a space
     */
    async updateSpaceDeprecatedRaw(requestParameters: UpdateSpaceDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Space>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateSpaceDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSpaceDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateSpaceDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateSpaceDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSpaceRequestToJSON(requestParameters.patchedSpaceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpaceFromJSON(jsonValue));
    }

    /**
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of a space
     */
    async updateSpaceDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedSpaceRequest?: PatchedSpaceRequest, initOverrides?: RequestInit): Promise<Space> {
        const response = await this.updateSpaceDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedSpaceRequest: patchedSpaceRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a storey  Required scopes: ifc:write, model:write
     * Update some fields of a storey
     */
    async updateStoreyDeprecatedRaw(requestParameters: UpdateStoreyDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Storey>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateStoreyDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateStoreyDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateStoreyDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateStoreyDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreyFromJSON(jsonValue));
    }

    /**
     * Update some fields of a storey  Required scopes: ifc:write, model:write
     * Update some fields of a storey
     */
    async updateStoreyDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, initOverrides?: RequestInit): Promise<Storey> {
        const response = await this.updateStoreyDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid }, initOverrides);
        return await response.value();
    }

    /**
     * Update the postioning of the plan in the storey  Required scopes: ifc:write, model:write
     * Update the postioning of the plan in the storey
     */
    async updateStoreyPlanPositioningDeprecatedRaw(requestParameters: UpdateStoreyPlanPositioningDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PositioningPlan>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateStoreyPlanPositioningDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStoreyPlanPositioningDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateStoreyPlanPositioningDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateStoreyPlanPositioningDeprecated.');
        }

        if (requestParameters.storeyUuid === null || requestParameters.storeyUuid === undefined) {
            throw new runtime.RequiredError('storeyUuid','Required parameter requestParameters.storeyUuid was null or undefined when calling updateStoreyPlanPositioningDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}/positioning`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"storey_uuid"}}`, encodeURIComponent(String(requestParameters.storeyUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPositioningPlanRequestToJSON(requestParameters.patchedPositioningPlanRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PositioningPlanFromJSON(jsonValue));
    }

    /**
     * Update the postioning of the plan in the storey  Required scopes: ifc:write, model:write
     * Update the postioning of the plan in the storey
     */
    async updateStoreyPlanPositioningDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, storeyUuid: string, patchedPositioningPlanRequest?: PatchedPositioningPlanRequest, initOverrides?: RequestInit): Promise<PositioningPlan> {
        const response = await this.updateStoreyPlanPositioningDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, storeyUuid: storeyUuid, patchedPositioningPlanRequest: patchedPositioningPlanRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of a system
     */
    async updateSystemDeprecatedRaw(requestParameters: UpdateSystemDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<System>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateSystemDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateSystemDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateSystemDeprecated.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateSystemDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSystemRequestToJSON(requestParameters.patchedSystemRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemFromJSON(jsonValue));
    }

    /**
     * Update some fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of a system
     */
    async updateSystemDeprecated(cloudPk: number, ifcPk: number, projectPk: number, uuid: string, patchedSystemRequest?: PatchedSystemRequest, initOverrides?: RequestInit): Promise<System> {
        const response = await this.updateSystemDeprecatedRaw({ cloudPk: cloudPk, ifcPk: ifcPk, projectPk: projectPk, uuid: uuid, patchedSystemRequest: patchedSystemRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of a zone
     */
    async updateZoneDeprecatedRaw(requestParameters: UpdateZoneDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Zone>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateZoneDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateZoneDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateZoneDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateZoneDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedZoneRequestToJSON(requestParameters.patchedZoneRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneFromJSON(jsonValue));
    }

    /**
     * Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of a zone
     */
    async updateZoneDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, patchedZoneRequest?: PatchedZoneRequest, initOverrides?: RequestInit): Promise<Zone> {
        const response = await this.updateZoneDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, patchedZoneRequest: patchedZoneRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of a space
     */
    async updateZoneSpaceDeprecatedRaw(requestParameters: UpdateZoneSpaceDeprecatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ZoneSpace>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateZoneSpaceDeprecated.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateZoneSpaceDeprecated.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateZoneSpaceDeprecated.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateZoneSpaceDeprecated.');
        }

        if (requestParameters.zonePk === null || requestParameters.zonePk === undefined) {
            throw new runtime.RequiredError('zonePk','Required parameter requestParameters.zonePk was null or undefined when calling updateZoneSpaceDeprecated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"zone_pk"}}`, encodeURIComponent(String(requestParameters.zonePk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedZoneSpaceRequestToJSON(requestParameters.patchedZoneSpaceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneSpaceFromJSON(jsonValue));
    }

    /**
     * Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write
     * Update some fields of a space
     */
    async updateZoneSpaceDeprecated(cloudPk: number, id: number, ifcPk: number, projectPk: number, zonePk: number, patchedZoneSpaceRequest?: PatchedZoneSpaceRequest, initOverrides?: RequestInit): Promise<ZoneSpace> {
        const response = await this.updateZoneSpaceDeprecatedRaw({ cloudPk: cloudPk, id: id, ifcPk: ifcPk, projectPk: projectPk, zonePk: zonePk, patchedZoneSpaceRequest: patchedZoneSpaceRequest }, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetIfcsDeprecatedSourceEnum {
    Export = 'EXPORT',
    Merge = 'MERGE',
    Optimized = 'OPTIMIZED',
    Split = 'SPLIT',
    Upload = 'UPLOAD'
}
/**
    * @export
    * @enum {string}
    */
export enum GetIfcsDeprecatedStatusEnum {
    C = 'C',
    D = 'D',
    E = 'E',
    I = 'I',
    P = 'P',
    W = 'W',
    X = 'X'
}
/**
    * @export
    * @enum {string}
    */
export enum GetIfcsDeprecatedTypeEnum {
    Bfx = 'BFX',
    Dae = 'DAE',
    Dwg = 'DWG',
    Dxf = 'DXF',
    Gltf = 'GLTF',
    Ifc = 'IFC',
    Jpeg = 'JPEG',
    Metabuilding = 'METABUILDING',
    Obj = 'OBJ',
    Pdf = 'PDF',
    Png = 'PNG'
}
