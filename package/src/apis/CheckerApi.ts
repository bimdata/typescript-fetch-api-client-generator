/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckPlan,
    CheckPlanFromJSON,
    CheckPlanToJSON,
    CheckPlanRequest,
    CheckPlanRequestFromJSON,
    CheckPlanRequestToJSON,
    CheckerResult,
    CheckerResultFromJSON,
    CheckerResultToJSON,
    CheckerResultRequest,
    CheckerResultRequestFromJSON,
    CheckerResultRequestToJSON,
    IfcChecker,
    IfcCheckerFromJSON,
    IfcCheckerToJSON,
    IfcCheckerRequest,
    IfcCheckerRequestFromJSON,
    IfcCheckerRequestToJSON,
    PatchedCheckPlanRequest,
    PatchedCheckPlanRequestFromJSON,
    PatchedCheckPlanRequestToJSON,
    PatchedCheckerResultRequest,
    PatchedCheckerResultRequestFromJSON,
    PatchedCheckerResultRequestToJSON,
    PatchedIfcCheckerRequest,
    PatchedIfcCheckerRequestFromJSON,
    PatchedIfcCheckerRequestToJSON,
    PatchedRuleComponentRequest,
    PatchedRuleComponentRequestFromJSON,
    PatchedRuleComponentRequestToJSON,
    PatchedRuleRequest,
    PatchedRuleRequestFromJSON,
    PatchedRuleRequestToJSON,
    PatchedRulesetRequest,
    PatchedRulesetRequestFromJSON,
    PatchedRulesetRequestToJSON,
    Rule,
    RuleFromJSON,
    RuleToJSON,
    RuleComponent,
    RuleComponentFromJSON,
    RuleComponentToJSON,
    RuleComponentRequest,
    RuleComponentRequestFromJSON,
    RuleComponentRequestToJSON,
    RuleRequest,
    RuleRequestFromJSON,
    RuleRequestToJSON,
    Ruleset,
    RulesetFromJSON,
    RulesetToJSON,
    RulesetRequest,
    RulesetRequestFromJSON,
    RulesetRequestToJSON,
} from '../models';

export interface CreateCheckerRequest {
    cloudPk: number;
    modelPk: number;
    projectPk: number;
    ifcCheckerRequest?: IfcCheckerRequest;
}

export interface CreateCheckerResultRequest {
    checkerPk: number;
    cloudPk: number;
    modelPk: number;
    projectPk: number;
    checkerResultRequest?: CheckerResultRequest;
}

export interface CreateCheckplanRequest {
    cloudPk: number;
    projectPk: number;
    checkPlanRequest: CheckPlanRequest;
}

export interface CreateRuleRequest {
    checkPlanPk: number;
    cloudPk: number;
    projectPk: number;
    rulesetPk: number;
    ruleRequest: RuleRequest;
}

export interface CreateRuleComponentRequest {
    checkPlanPk: number;
    cloudPk: number;
    projectPk: number;
    rulePk: number;
    rulesetPk: number;
    ruleComponentRequest?: RuleComponentRequest;
}

export interface CreateRulesetRequest {
    checkPlanPk: number;
    cloudPk: number;
    projectPk: number;
    rulesetRequest: RulesetRequest;
}

export interface DeleteCheckerRequest {
    cloudPk: number;
    id: number;
    modelPk: number;
    projectPk: number;
}

export interface DeleteCheckerResultRequest {
    checkerPk: number;
    cloudPk: number;
    id: number;
    modelPk: number;
    projectPk: number;
}

export interface DeleteCheckplanRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
}

export interface DeleteRuleRequest {
    checkPlanPk: number;
    cloudPk: number;
    id: number;
    projectPk: number;
    rulesetPk: number;
}

export interface DeleteRuleComponentRequest {
    checkPlanPk: number;
    cloudPk: number;
    id: number;
    projectPk: number;
    rulePk: number;
    rulesetPk: number;
}

export interface DeleteRulesetRequest {
    checkPlanPk: number;
    cloudPk: number;
    id: number;
    projectPk: number;
}

export interface GetCheckerRequest {
    cloudPk: number;
    id: number;
    modelPk: number;
    projectPk: number;
}

export interface GetCheckerResultRequest {
    checkerPk: number;
    cloudPk: number;
    id: number;
    modelPk: number;
    projectPk: number;
}

export interface GetCheckerResultsRequest {
    checkerPk: number;
    cloudPk: number;
    modelPk: number;
    projectPk: number;
}

export interface GetCheckersRequest {
    cloudPk: number;
    modelPk: number;
    projectPk: number;
}

export interface GetCheckplanRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
}

export interface GetCheckplansRequest {
    cloudPk: number;
    projectPk: number;
}

export interface GetRuleRequest {
    checkPlanPk: number;
    cloudPk: number;
    id: number;
    projectPk: number;
    rulesetPk: number;
}

export interface GetRuleComponentRequest {
    checkPlanPk: number;
    cloudPk: number;
    id: number;
    projectPk: number;
    rulePk: number;
    rulesetPk: number;
}

export interface GetRuleComponentsRequest {
    checkPlanPk: number;
    cloudPk: number;
    projectPk: number;
    rulePk: number;
    rulesetPk: number;
}

export interface GetRulesRequest {
    checkPlanPk: number;
    cloudPk: number;
    projectPk: number;
    rulesetPk: number;
}

export interface GetRulesetRequest {
    checkPlanPk: number;
    cloudPk: number;
    id: number;
    projectPk: number;
}

export interface GetRulesetsRequest {
    checkPlanPk: number;
    cloudPk: number;
    projectPk: number;
}

export interface LaunchNewCheckRequest {
    cloudPk: number;
    id: number;
    modelPk: number;
    projectPk: number;
    ifcCheckerRequest?: IfcCheckerRequest;
}

export interface UpdateCheckerRequest {
    cloudPk: number;
    id: number;
    modelPk: number;
    projectPk: number;
    patchedIfcCheckerRequest?: PatchedIfcCheckerRequest;
}

export interface UpdateCheckerResultRequest {
    checkerPk: number;
    cloudPk: number;
    id: number;
    modelPk: number;
    projectPk: number;
    patchedCheckerResultRequest?: PatchedCheckerResultRequest;
}

export interface UpdateCheckplanRequest {
    cloudPk: number;
    id: number;
    projectPk: number;
    patchedCheckPlanRequest?: PatchedCheckPlanRequest;
}

export interface UpdateRuleRequest {
    checkPlanPk: number;
    cloudPk: number;
    id: number;
    projectPk: number;
    rulesetPk: number;
    patchedRuleRequest?: PatchedRuleRequest;
}

export interface UpdateRuleComponentRequest {
    checkPlanPk: number;
    cloudPk: number;
    id: number;
    projectPk: number;
    rulePk: number;
    rulesetPk: number;
    patchedRuleComponentRequest?: PatchedRuleComponentRequest;
}

export interface UpdateRulesetRequest {
    checkPlanPk: number;
    cloudPk: number;
    id: number;
    projectPk: number;
    patchedRulesetRequest?: PatchedRulesetRequest;
}

/**
 * 
 */
export class CheckerApi extends runtime.BaseAPI {

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Create a checker to a model
     */
    async createCheckerRaw(requestParameters: CreateCheckerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createChecker.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling createChecker.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createChecker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcCheckerRequestToJSON(requestParameters.ifcCheckerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Create a checker to a model
     */
    async createChecker(cloudPk: number, modelPk: number, projectPk: number, ifcCheckerRequest?: IfcCheckerRequest, initOverrides?: RequestInit): Promise<IfcChecker> {
        const response = await this.createCheckerRaw({ cloudPk: cloudPk, modelPk: modelPk, projectPk: projectPk, ifcCheckerRequest: ifcCheckerRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a CheckerResult  Required scopes: check:write
     * Create a CheckerResult
     */
    async createCheckerResultRaw(requestParameters: CreateCheckerResultRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling createCheckerResult.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createCheckerResult.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling createCheckerResult.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createCheckerResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckerResultRequestToJSON(requestParameters.checkerResultRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * TCreate a CheckerResult  Required scopes: check:write
     * Create a CheckerResult
     */
    async createCheckerResult(checkerPk: number, cloudPk: number, modelPk: number, projectPk: number, checkerResultRequest?: CheckerResultRequest, initOverrides?: RequestInit): Promise<CheckerResult> {
        const response = await this.createCheckerResultRaw({ checkerPk: checkerPk, cloudPk: cloudPk, modelPk: modelPk, projectPk: projectPk, checkerResultRequest: checkerResultRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a Checkplan  Required scopes: check:write
     * Create a Checkplan
     */
    async createCheckplanRaw(requestParameters: CreateCheckplanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckPlan>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createCheckplan.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createCheckplan.');
        }

        if (requestParameters.checkPlanRequest === null || requestParameters.checkPlanRequest === undefined) {
            throw new runtime.RequiredError('checkPlanRequest','Required parameter requestParameters.checkPlanRequest was null or undefined when calling createCheckplan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPlanRequestToJSON(requestParameters.checkPlanRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPlanFromJSON(jsonValue));
    }

    /**
     * TCreate a Checkplan  Required scopes: check:write
     * Create a Checkplan
     */
    async createCheckplan(cloudPk: number, projectPk: number, checkPlanRequest: CheckPlanRequest, initOverrides?: RequestInit): Promise<CheckPlan> {
        const response = await this.createCheckplanRaw({ cloudPk: cloudPk, projectPk: projectPk, checkPlanRequest: checkPlanRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a Rule  Required scopes: check:write
     * Create a Rule
     */
    async createRuleRaw(requestParameters: CreateRuleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling createRule.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createRule.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createRule.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling createRule.');
        }

        if (requestParameters.ruleRequest === null || requestParameters.ruleRequest === undefined) {
            throw new runtime.RequiredError('ruleRequest','Required parameter requestParameters.ruleRequest was null or undefined when calling createRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RuleRequestToJSON(requestParameters.ruleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * TCreate a Rule  Required scopes: check:write
     * Create a Rule
     */
    async createRule(checkPlanPk: number, cloudPk: number, projectPk: number, rulesetPk: number, ruleRequest: RuleRequest, initOverrides?: RequestInit): Promise<Rule> {
        const response = await this.createRuleRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, projectPk: projectPk, rulesetPk: rulesetPk, ruleRequest: ruleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a RuleComponent  Required scopes: check:write
     * Create a RuleComponent
     */
    async createRuleComponentRaw(requestParameters: CreateRuleComponentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RuleComponent>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling createRuleComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RuleComponentRequestToJSON(requestParameters.ruleComponentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleComponentFromJSON(jsonValue));
    }

    /**
     * TCreate a RuleComponent  Required scopes: check:write
     * Create a RuleComponent
     */
    async createRuleComponent(checkPlanPk: number, cloudPk: number, projectPk: number, rulePk: number, rulesetPk: number, ruleComponentRequest?: RuleComponentRequest, initOverrides?: RequestInit): Promise<RuleComponent> {
        const response = await this.createRuleComponentRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, projectPk: projectPk, rulePk: rulePk, rulesetPk: rulesetPk, ruleComponentRequest: ruleComponentRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a Ruleset  Required scopes: check:write
     * Create a Ruleset
     */
    async createRulesetRaw(requestParameters: CreateRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Ruleset>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling createRuleset.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createRuleset.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createRuleset.');
        }

        if (requestParameters.rulesetRequest === null || requestParameters.rulesetRequest === undefined) {
            throw new runtime.RequiredError('rulesetRequest','Required parameter requestParameters.rulesetRequest was null or undefined when calling createRuleset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RulesetRequestToJSON(requestParameters.rulesetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesetFromJSON(jsonValue));
    }

    /**
     * TCreate a Ruleset  Required scopes: check:write
     * Create a Ruleset
     */
    async createRuleset(checkPlanPk: number, cloudPk: number, projectPk: number, rulesetRequest: RulesetRequest, initOverrides?: RequestInit): Promise<Ruleset> {
        const response = await this.createRulesetRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, projectPk: projectPk, rulesetRequest: rulesetRequest }, initOverrides);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Delete a checker of a model
     */
    async deleteCheckerRaw(requestParameters: DeleteCheckerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteChecker.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteChecker.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling deleteChecker.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteChecker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Delete a checker of a model
     */
    async deleteChecker(cloudPk: number, id: number, modelPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCheckerRaw({ cloudPk: cloudPk, id: id, modelPk: modelPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete a CheckerResult  Required scopes: check:write
     * Delete a CheckerResult
     */
    async deleteCheckerResultRaw(requestParameters: DeleteCheckerResultRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteCheckerResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a CheckerResult  Required scopes: check:write
     * Delete a CheckerResult
     */
    async deleteCheckerResult(checkerPk: number, cloudPk: number, id: number, modelPk: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCheckerResultRaw({ checkerPk: checkerPk, cloudPk: cloudPk, id: id, modelPk: modelPk, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete a Checkplan  Required scopes: check:write
     * Delete a Checkplan
     */
    async deleteCheckplanRaw(requestParameters: DeleteCheckplanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteCheckplan.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCheckplan.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteCheckplan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Checkplan  Required scopes: check:write
     * Delete a Checkplan
     */
    async deleteCheckplan(cloudPk: number, id: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCheckplanRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk }, initOverrides);
    }

    /**
     * Delete a Rule  Required scopes: check:write
     * Delete a Rule
     */
    async deleteRuleRaw(requestParameters: DeleteRuleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling deleteRule.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRule.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteRule.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling deleteRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Rule  Required scopes: check:write
     * Delete a Rule
     */
    async deleteRule(checkPlanPk: number, cloudPk: number, id: number, projectPk: number, rulesetPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteRuleRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, id: id, projectPk: projectPk, rulesetPk: rulesetPk }, initOverrides);
    }

    /**
     * Delete a RuleComponent  Required scopes: check:write
     * Delete a RuleComponent
     */
    async deleteRuleComponentRaw(requestParameters: DeleteRuleComponentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling deleteRuleComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a RuleComponent  Required scopes: check:write
     * Delete a RuleComponent
     */
    async deleteRuleComponent(checkPlanPk: number, cloudPk: number, id: number, projectPk: number, rulePk: number, rulesetPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteRuleComponentRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, id: id, projectPk: projectPk, rulePk: rulePk, rulesetPk: rulesetPk }, initOverrides);
    }

    /**
     * Delete a Ruleset  Required scopes: check:write
     * Delete a Ruleset
     */
    async deleteRulesetRaw(requestParameters: DeleteRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling deleteRuleset.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteRuleset.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRuleset.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteRuleset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Ruleset  Required scopes: check:write
     * Delete a Ruleset
     */
    async deleteRuleset(checkPlanPk: number, cloudPk: number, id: number, projectPk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteRulesetRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, id: id, projectPk: projectPk }, initOverrides);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve a checker of a model
     */
    async getCheckerRaw(requestParameters: GetCheckerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getChecker.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChecker.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling getChecker.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getChecker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve a checker of a model
     */
    async getChecker(cloudPk: number, id: number, modelPk: number, projectPk: number, initOverrides?: RequestInit): Promise<IfcChecker> {
        const response = await this.getCheckerRaw({ cloudPk: cloudPk, id: id, modelPk: modelPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one CheckerResult  Required scopes: check:read
     * Retrieve one CheckerResult
     */
    async getCheckerResultRaw(requestParameters: GetCheckerResultRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckerResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * Retrieve one CheckerResult  Required scopes: check:read
     * Retrieve one CheckerResult
     */
    async getCheckerResult(checkerPk: number, cloudPk: number, id: number, modelPk: number, projectPk: number, initOverrides?: RequestInit): Promise<CheckerResult> {
        const response = await this.getCheckerResultRaw({ checkerPk: checkerPk, cloudPk: cloudPk, id: id, modelPk: modelPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all CheckerResults  Required scopes: check:read
     * Retrieve all CheckerResults
     */
    async getCheckerResultsRaw(requestParameters: GetCheckerResultsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CheckerResult>>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling getCheckerResults.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckerResults.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling getCheckerResults.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckerResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckerResultFromJSON));
    }

    /**
     * Retrieve all CheckerResults  Required scopes: check:read
     * Retrieve all CheckerResults
     */
    async getCheckerResults(checkerPk: number, cloudPk: number, modelPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<CheckerResult>> {
        const response = await this.getCheckerResultsRaw({ checkerPk: checkerPk, cloudPk: cloudPk, modelPk: modelPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve all checkers of a model
     */
    async getCheckersRaw(requestParameters: GetCheckersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<IfcChecker>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckers.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling getCheckers.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IfcCheckerFromJSON));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve all checkers of a model
     */
    async getCheckers(cloudPk: number, modelPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<IfcChecker>> {
        const response = await this.getCheckersRaw({ cloudPk: cloudPk, modelPk: modelPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one Checkplan  Required scopes: check:read
     * Retrieve one Checkplan
     */
    async getCheckplanRaw(requestParameters: GetCheckplanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckPlan>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckplan.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckplan.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckplan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPlanFromJSON(jsonValue));
    }

    /**
     * Retrieve one Checkplan  Required scopes: check:read
     * Retrieve one Checkplan
     */
    async getCheckplan(cloudPk: number, id: number, projectPk: number, initOverrides?: RequestInit): Promise<CheckPlan> {
        const response = await this.getCheckplanRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all Checkplans  Required scopes: check:read
     * Retrieve all Checkplans
     */
    async getCheckplansRaw(requestParameters: GetCheckplansRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CheckPlan>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckplans.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckplans.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckPlanFromJSON));
    }

    /**
     * Retrieve all Checkplans  Required scopes: check:read
     * Retrieve all Checkplans
     */
    async getCheckplans(cloudPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<CheckPlan>> {
        const response = await this.getCheckplansRaw({ cloudPk: cloudPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one Rule  Required scopes: check:read
     * Retrieve one Rule
     */
    async getRuleRaw(requestParameters: GetRuleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRule.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRule.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRule.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling getRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * Retrieve one Rule  Required scopes: check:read
     * Retrieve one Rule
     */
    async getRule(checkPlanPk: number, cloudPk: number, id: number, projectPk: number, rulesetPk: number, initOverrides?: RequestInit): Promise<Rule> {
        const response = await this.getRuleRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, id: id, projectPk: projectPk, rulesetPk: rulesetPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one RuleComponent  Required scopes: check:read
     * Retrieve one RuleComponent
     */
    async getRuleComponentRaw(requestParameters: GetRuleComponentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RuleComponent>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling getRuleComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleComponentFromJSON(jsonValue));
    }

    /**
     * Retrieve one RuleComponent  Required scopes: check:read
     * Retrieve one RuleComponent
     */
    async getRuleComponent(checkPlanPk: number, cloudPk: number, id: number, projectPk: number, rulePk: number, rulesetPk: number, initOverrides?: RequestInit): Promise<RuleComponent> {
        const response = await this.getRuleComponentRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, id: id, projectPk: projectPk, rulePk: rulePk, rulesetPk: rulesetPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all RuleComponents  Required scopes: check:read
     * Retrieve all RuleComponents
     */
    async getRuleComponentsRaw(requestParameters: GetRuleComponentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RuleComponent>>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling getRuleComponents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RuleComponentFromJSON));
    }

    /**
     * Retrieve all RuleComponents  Required scopes: check:read
     * Retrieve all RuleComponents
     */
    async getRuleComponents(checkPlanPk: number, cloudPk: number, projectPk: number, rulePk: number, rulesetPk: number, initOverrides?: RequestInit): Promise<Array<RuleComponent>> {
        const response = await this.getRuleComponentsRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, projectPk: projectPk, rulePk: rulePk, rulesetPk: rulesetPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all Rules  Required scopes: check:read
     * Retrieve all Rules
     */
    async getRulesRaw(requestParameters: GetRulesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Rule>>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRules.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRules.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRules.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling getRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RuleFromJSON));
    }

    /**
     * Retrieve all Rules  Required scopes: check:read
     * Retrieve all Rules
     */
    async getRules(checkPlanPk: number, cloudPk: number, projectPk: number, rulesetPk: number, initOverrides?: RequestInit): Promise<Array<Rule>> {
        const response = await this.getRulesRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, projectPk: projectPk, rulesetPk: rulesetPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one Ruleset  Required scopes: check:read
     * Retrieve one Ruleset
     */
    async getRulesetRaw(requestParameters: GetRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Ruleset>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRuleset.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRuleset.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRuleset.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRuleset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesetFromJSON(jsonValue));
    }

    /**
     * Retrieve one Ruleset  Required scopes: check:read
     * Retrieve one Ruleset
     */
    async getRuleset(checkPlanPk: number, cloudPk: number, id: number, projectPk: number, initOverrides?: RequestInit): Promise<Ruleset> {
        const response = await this.getRulesetRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, id: id, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all Rulesets  Required scopes: check:read
     * Retrieve all Rulesets
     */
    async getRulesetsRaw(requestParameters: GetRulesetsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Ruleset>>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRulesets.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRulesets.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRulesets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RulesetFromJSON));
    }

    /**
     * Retrieve all Rulesets  Required scopes: check:read
     * Retrieve all Rulesets
     */
    async getRulesets(checkPlanPk: number, cloudPk: number, projectPk: number, initOverrides?: RequestInit): Promise<Array<Ruleset>> {
        const response = await this.getRulesetsRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, projectPk: projectPk }, initOverrides);
        return await response.value();
    }

    /**
     * A nex check will be played with the current state of elements, properties, etc.  Required scopes: check:write, ifc:read
     * Launch a new check on the model
     */
    async launchNewCheckRaw(requestParameters: LaunchNewCheckRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling launchNewCheck.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling launchNewCheck.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling launchNewCheck.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling launchNewCheck.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}/launch-check`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcCheckerRequestToJSON(requestParameters.ifcCheckerRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A nex check will be played with the current state of elements, properties, etc.  Required scopes: check:write, ifc:read
     * Launch a new check on the model
     */
    async launchNewCheck(cloudPk: number, id: number, modelPk: number, projectPk: number, ifcCheckerRequest?: IfcCheckerRequest, initOverrides?: RequestInit): Promise<void> {
        await this.launchNewCheckRaw({ cloudPk: cloudPk, id: id, modelPk: modelPk, projectPk: projectPk, ifcCheckerRequest: ifcCheckerRequest }, initOverrides);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Update some fields of a checker of a model
     */
    async updateCheckerRaw(requestParameters: UpdateCheckerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateChecker.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateChecker.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling updateChecker.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateChecker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIfcCheckerRequestToJSON(requestParameters.patchedIfcCheckerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Update some fields of a checker of a model
     */
    async updateChecker(cloudPk: number, id: number, modelPk: number, projectPk: number, patchedIfcCheckerRequest?: PatchedIfcCheckerRequest, initOverrides?: RequestInit): Promise<IfcChecker> {
        const response = await this.updateCheckerRaw({ cloudPk: cloudPk, id: id, modelPk: modelPk, projectPk: projectPk, patchedIfcCheckerRequest: patchedIfcCheckerRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a CheckerResult  Required scopes: check:write
     * Update some fields of a CheckerResult
     */
    async updateCheckerResultRaw(requestParameters: UpdateCheckerResultRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.modelPk === null || requestParameters.modelPk === undefined) {
            throw new runtime.RequiredError('modelPk','Required parameter requestParameters.modelPk was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateCheckerResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.modelPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCheckerResultRequestToJSON(requestParameters.patchedCheckerResultRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * Update some fields of a CheckerResult  Required scopes: check:write
     * Update some fields of a CheckerResult
     */
    async updateCheckerResult(checkerPk: number, cloudPk: number, id: number, modelPk: number, projectPk: number, patchedCheckerResultRequest?: PatchedCheckerResultRequest, initOverrides?: RequestInit): Promise<CheckerResult> {
        const response = await this.updateCheckerResultRaw({ checkerPk: checkerPk, cloudPk: cloudPk, id: id, modelPk: modelPk, projectPk: projectPk, patchedCheckerResultRequest: patchedCheckerResultRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a Checkplan  Required scopes: check:write
     * Update some fields of a Checkplan
     */
    async updateCheckplanRaw(requestParameters: UpdateCheckplanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckPlan>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateCheckplan.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCheckplan.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateCheckplan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCheckPlanRequestToJSON(requestParameters.patchedCheckPlanRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPlanFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Checkplan  Required scopes: check:write
     * Update some fields of a Checkplan
     */
    async updateCheckplan(cloudPk: number, id: number, projectPk: number, patchedCheckPlanRequest?: PatchedCheckPlanRequest, initOverrides?: RequestInit): Promise<CheckPlan> {
        const response = await this.updateCheckplanRaw({ cloudPk: cloudPk, id: id, projectPk: projectPk, patchedCheckPlanRequest: patchedCheckPlanRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a Rule  Required scopes: check:write
     * Update some fields of a Rule
     */
    async updateRuleRaw(requestParameters: UpdateRuleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling updateRule.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRule.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateRule.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling updateRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRuleRequestToJSON(requestParameters.patchedRuleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Rule  Required scopes: check:write
     * Update some fields of a Rule
     */
    async updateRule(checkPlanPk: number, cloudPk: number, id: number, projectPk: number, rulesetPk: number, patchedRuleRequest?: PatchedRuleRequest, initOverrides?: RequestInit): Promise<Rule> {
        const response = await this.updateRuleRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, id: id, projectPk: projectPk, rulesetPk: rulesetPk, patchedRuleRequest: patchedRuleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a RuleComponent  Required scopes: check:write
     * Update some fields of a RuleComponent
     */
    async updateRuleComponentRaw(requestParameters: UpdateRuleComponentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RuleComponent>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling updateRuleComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRuleComponentRequestToJSON(requestParameters.patchedRuleComponentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleComponentFromJSON(jsonValue));
    }

    /**
     * Update some fields of a RuleComponent  Required scopes: check:write
     * Update some fields of a RuleComponent
     */
    async updateRuleComponent(checkPlanPk: number, cloudPk: number, id: number, projectPk: number, rulePk: number, rulesetPk: number, patchedRuleComponentRequest?: PatchedRuleComponentRequest, initOverrides?: RequestInit): Promise<RuleComponent> {
        const response = await this.updateRuleComponentRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, id: id, projectPk: projectPk, rulePk: rulePk, rulesetPk: rulesetPk, patchedRuleComponentRequest: patchedRuleComponentRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a Ruleset  Required scopes: check:write
     * Update some fields of a Ruleset
     */
    async updateRulesetRaw(requestParameters: UpdateRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Ruleset>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling updateRuleset.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateRuleset.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRuleset.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateRuleset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRulesetRequestToJSON(requestParameters.patchedRulesetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesetFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Ruleset  Required scopes: check:write
     * Update some fields of a Ruleset
     */
    async updateRuleset(checkPlanPk: number, cloudPk: number, id: number, projectPk: number, patchedRulesetRequest?: PatchedRulesetRequest, initOverrides?: RequestInit): Promise<Ruleset> {
        const response = await this.updateRulesetRaw({ checkPlanPk: checkPlanPk, cloudPk: cloudPk, id: id, projectPk: projectPk, patchedRulesetRequest: patchedRulesetRequest }, initOverrides);
        return await response.value();
    }

}
