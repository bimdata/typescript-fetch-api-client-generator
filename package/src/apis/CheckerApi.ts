/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckPlan,
    CheckPlanFromJSON,
    CheckPlanToJSON,
    CheckerResult,
    CheckerResultFromJSON,
    CheckerResultToJSON,
    IfcChecker,
    IfcCheckerFromJSON,
    IfcCheckerToJSON,
    Rule,
    RuleFromJSON,
    RuleToJSON,
    RuleComponent,
    RuleComponentFromJSON,
    RuleComponentToJSON,
    Ruleset,
    RulesetFromJSON,
    RulesetToJSON,
} from '../models';

export interface CreateCheckerRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: IfcChecker;
}

export interface CreateCheckerResultRequest {
    checkerPk: string;
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
    data: CheckerResult;
}

export interface CreateCheckplanRequest {
    cloudPk: string;
    projectPk: string;
    data: CheckPlan;
}

export interface CreateRuleRequest {
    checkPlanPk: string;
    cloudPk: string;
    projectPk: string;
    rulesetPk: string;
    data: Rule;
}

export interface CreateRuleComponentRequest {
    checkPlanPk: string;
    cloudPk: string;
    projectPk: string;
    rulePk: string;
    rulesetPk: string;
    data: RuleComponent;
}

export interface CreateRulesetRequest {
    checkPlanPk: string;
    cloudPk: string;
    projectPk: string;
    data: Ruleset;
}

export interface DeleteCheckerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface DeleteCheckerResultRequest {
    checkerPk: string;
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface DeleteCheckplanRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface DeleteRuleRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
    rulesetPk: string;
}

export interface DeleteRuleComponentRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
    rulePk: string;
    rulesetPk: string;
}

export interface DeleteRulesetRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface FullUpdateCheckerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: IfcChecker;
}

export interface FullUpdateCheckerResultRequest {
    checkerPk: string;
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: CheckerResult;
}

export interface FullUpdateCheckplanRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
    data: CheckPlan;
}

export interface FullUpdateRuleRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
    rulesetPk: string;
    data: Rule;
}

export interface FullUpdateRuleComponentRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
    rulePk: string;
    rulesetPk: string;
    data: RuleComponent;
}

export interface FullUpdateRulesetRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
    data: Ruleset;
}

export interface GetCheckerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetCheckerResultRequest {
    checkerPk: string;
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
}

export interface GetCheckerResultsRequest {
    checkerPk: string;
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetCheckersRequest {
    cloudPk: string;
    ifcPk: string;
    projectPk: string;
}

export interface GetCheckplanRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface GetCheckplansRequest {
    cloudPk: string;
    projectPk: string;
}

export interface GetRuleRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
    rulesetPk: string;
}

export interface GetRuleComponentRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
    rulePk: string;
    rulesetPk: string;
}

export interface GetRuleComponentsRequest {
    checkPlanPk: string;
    cloudPk: string;
    projectPk: string;
    rulePk: string;
    rulesetPk: string;
}

export interface GetRulesRequest {
    checkPlanPk: string;
    cloudPk: string;
    projectPk: string;
    rulesetPk: string;
}

export interface GetRulesetRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
}

export interface GetRulesetsRequest {
    checkPlanPk: string;
    cloudPk: string;
    projectPk: string;
}

export interface LaunchNewCheckRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: IfcChecker;
}

export interface UpdateCheckerRequest {
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: IfcChecker;
}

export interface UpdateCheckerResultRequest {
    checkerPk: string;
    cloudPk: string;
    id: number;
    ifcPk: string;
    projectPk: string;
    data: CheckerResult;
}

export interface UpdateCheckplanRequest {
    cloudPk: string;
    id: number;
    projectPk: string;
    data: CheckPlan;
}

export interface UpdateRuleRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
    rulesetPk: string;
    data: Rule;
}

export interface UpdateRuleComponentRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
    rulePk: string;
    rulesetPk: string;
    data: RuleComponent;
}

export interface UpdateRulesetRequest {
    checkPlanPk: string;
    cloudPk: string;
    id: number;
    projectPk: string;
    data: Ruleset;
}

/**
 * no description
 */
export class CheckerApi extends runtime.BaseAPI {

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * Create a checker to a model
     */
    async createCheckerRaw(requestParameters: CreateCheckerRequest): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createChecker.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createChecker.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createChecker.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createChecker.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcCheckerToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * Create a checker to a model
     */
    async createChecker(requestParameters: CreateCheckerRequest): Promise<IfcChecker> {
        const response = await this.createCheckerRaw(requestParameters);
        return await response.value();
    }

    /**
     * TCreate a CheckerResult Required scopes: check:write
     * Create a CheckerResult
     */
    async createCheckerResultRaw(requestParameters: CreateCheckerResultRequest): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling createCheckerResult.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createCheckerResult.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling createCheckerResult.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createCheckerResult.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createCheckerResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckerResultToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * TCreate a CheckerResult Required scopes: check:write
     * Create a CheckerResult
     */
    async createCheckerResult(requestParameters: CreateCheckerResultRequest): Promise<CheckerResult> {
        const response = await this.createCheckerResultRaw(requestParameters);
        return await response.value();
    }

    /**
     * TCreate a Checkplan Required scopes: check:write
     * Create a Checkplan
     */
    async createCheckplanRaw(requestParameters: CreateCheckplanRequest): Promise<runtime.ApiResponse<CheckPlan>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createCheckplan.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createCheckplan.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createCheckplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPlanToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPlanFromJSON(jsonValue));
    }

    /**
     * TCreate a Checkplan Required scopes: check:write
     * Create a Checkplan
     */
    async createCheckplan(requestParameters: CreateCheckplanRequest): Promise<CheckPlan> {
        const response = await this.createCheckplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * TCreate a Rule Required scopes: check:write
     * Create a Rule
     */
    async createRuleRaw(requestParameters: CreateRuleRequest): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling createRule.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createRule.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createRule.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling createRule.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createRule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RuleToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * TCreate a Rule Required scopes: check:write
     * Create a Rule
     */
    async createRule(requestParameters: CreateRuleRequest): Promise<Rule> {
        const response = await this.createRuleRaw(requestParameters);
        return await response.value();
    }

    /**
     * TCreate a RuleComponent Required scopes: check:write
     * Create a RuleComponent
     */
    async createRuleComponentRaw(requestParameters: CreateRuleComponentRequest): Promise<runtime.ApiResponse<RuleComponent>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createRuleComponent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RuleComponentToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleComponentFromJSON(jsonValue));
    }

    /**
     * TCreate a RuleComponent Required scopes: check:write
     * Create a RuleComponent
     */
    async createRuleComponent(requestParameters: CreateRuleComponentRequest): Promise<RuleComponent> {
        const response = await this.createRuleComponentRaw(requestParameters);
        return await response.value();
    }

    /**
     * TCreate a Ruleset Required scopes: check:write
     * Create a Ruleset
     */
    async createRulesetRaw(requestParameters: CreateRulesetRequest): Promise<runtime.ApiResponse<Ruleset>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling createRuleset.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling createRuleset.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling createRuleset.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling createRuleset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RulesetToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesetFromJSON(jsonValue));
    }

    /**
     * TCreate a Ruleset Required scopes: check:write
     * Create a Ruleset
     */
    async createRuleset(requestParameters: CreateRulesetRequest): Promise<Ruleset> {
        const response = await this.createRulesetRaw(requestParameters);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * Delete a checker of a model
     */
    async deleteCheckerRaw(requestParameters: DeleteCheckerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteChecker.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteChecker.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteChecker.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteChecker.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * Delete a checker of a model
     */
    async deleteChecker(requestParameters: DeleteCheckerRequest): Promise<void> {
        await this.deleteCheckerRaw(requestParameters);
    }

    /**
     * Delete a CheckerResult Required scopes: check:write
     * Delete a CheckerResult
     */
    async deleteCheckerResultRaw(requestParameters: DeleteCheckerResultRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteCheckerResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a CheckerResult Required scopes: check:write
     * Delete a CheckerResult
     */
    async deleteCheckerResult(requestParameters: DeleteCheckerResultRequest): Promise<void> {
        await this.deleteCheckerResultRaw(requestParameters);
    }

    /**
     * Delete a Checkplan Required scopes: check:write
     * Delete a Checkplan
     */
    async deleteCheckplanRaw(requestParameters: DeleteCheckplanRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteCheckplan.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCheckplan.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteCheckplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Checkplan Required scopes: check:write
     * Delete a Checkplan
     */
    async deleteCheckplan(requestParameters: DeleteCheckplanRequest): Promise<void> {
        await this.deleteCheckplanRaw(requestParameters);
    }

    /**
     * Delete a Rule Required scopes: check:write
     * Delete a Rule
     */
    async deleteRuleRaw(requestParameters: DeleteRuleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling deleteRule.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRule.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteRule.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling deleteRule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Rule Required scopes: check:write
     * Delete a Rule
     */
    async deleteRule(requestParameters: DeleteRuleRequest): Promise<void> {
        await this.deleteRuleRaw(requestParameters);
    }

    /**
     * Delete a RuleComponent Required scopes: check:write
     * Delete a RuleComponent
     */
    async deleteRuleComponentRaw(requestParameters: DeleteRuleComponentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling deleteRuleComponent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a RuleComponent Required scopes: check:write
     * Delete a RuleComponent
     */
    async deleteRuleComponent(requestParameters: DeleteRuleComponentRequest): Promise<void> {
        await this.deleteRuleComponentRaw(requestParameters);
    }

    /**
     * Delete a Ruleset Required scopes: check:write
     * Delete a Ruleset
     */
    async deleteRulesetRaw(requestParameters: DeleteRulesetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling deleteRuleset.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling deleteRuleset.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRuleset.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling deleteRuleset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Ruleset Required scopes: check:write
     * Delete a Ruleset
     */
    async deleteRuleset(requestParameters: DeleteRulesetRequest): Promise<void> {
        await this.deleteRulesetRaw(requestParameters);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * Update all fields of a checker of a model
     */
    async fullUpdateCheckerRaw(requestParameters: FullUpdateCheckerRequest): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateChecker.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateChecker.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateChecker.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateChecker.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateChecker.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IfcCheckerToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * Update all fields of a checker of a model
     */
    async fullUpdateChecker(requestParameters: FullUpdateCheckerRequest): Promise<IfcChecker> {
        const response = await this.fullUpdateCheckerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a CheckerResult Required scopes: check:write
     * Update all fields of a CheckerResult
     */
    async fullUpdateCheckerResultRaw(requestParameters: FullUpdateCheckerResultRequest): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling fullUpdateCheckerResult.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateCheckerResult.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateCheckerResult.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling fullUpdateCheckerResult.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateCheckerResult.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateCheckerResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CheckerResultToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * Update all fields of a CheckerResult Required scopes: check:write
     * Update all fields of a CheckerResult
     */
    async fullUpdateCheckerResult(requestParameters: FullUpdateCheckerResultRequest): Promise<CheckerResult> {
        const response = await this.fullUpdateCheckerResultRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a Checkplan Required scopes: check:write
     * Update all fields of a Checkplan
     */
    async fullUpdateCheckplanRaw(requestParameters: FullUpdateCheckplanRequest): Promise<runtime.ApiResponse<CheckPlan>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateCheckplan.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateCheckplan.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateCheckplan.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateCheckplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPlanToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPlanFromJSON(jsonValue));
    }

    /**
     * Update all fields of a Checkplan Required scopes: check:write
     * Update all fields of a Checkplan
     */
    async fullUpdateCheckplan(requestParameters: FullUpdateCheckplanRequest): Promise<CheckPlan> {
        const response = await this.fullUpdateCheckplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a Rule Required scopes: check:write
     * Update all fields of a Rule
     */
    async fullUpdateRuleRaw(requestParameters: FullUpdateRuleRequest): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling fullUpdateRule.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateRule.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateRule.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling fullUpdateRule.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateRule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RuleToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * Update all fields of a Rule Required scopes: check:write
     * Update all fields of a Rule
     */
    async fullUpdateRule(requestParameters: FullUpdateRuleRequest): Promise<Rule> {
        const response = await this.fullUpdateRuleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a RuleComponent Required scopes: check:write
     * Update all fields of a RuleComponent
     */
    async fullUpdateRuleComponentRaw(requestParameters: FullUpdateRuleComponentRequest): Promise<runtime.ApiResponse<RuleComponent>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling fullUpdateRuleComponent.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateRuleComponent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateRuleComponent.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateRuleComponent.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling fullUpdateRuleComponent.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling fullUpdateRuleComponent.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateRuleComponent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RuleComponentToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleComponentFromJSON(jsonValue));
    }

    /**
     * Update all fields of a RuleComponent Required scopes: check:write
     * Update all fields of a RuleComponent
     */
    async fullUpdateRuleComponent(requestParameters: FullUpdateRuleComponentRequest): Promise<RuleComponent> {
        const response = await this.fullUpdateRuleComponentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update all fields of a Ruleset Required scopes: check:write
     * Update all fields of a Ruleset
     */
    async fullUpdateRulesetRaw(requestParameters: FullUpdateRulesetRequest): Promise<runtime.ApiResponse<Ruleset>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling fullUpdateRuleset.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling fullUpdateRuleset.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fullUpdateRuleset.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling fullUpdateRuleset.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling fullUpdateRuleset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RulesetToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesetFromJSON(jsonValue));
    }

    /**
     * Update all fields of a Ruleset Required scopes: check:write
     * Update all fields of a Ruleset
     */
    async fullUpdateRuleset(requestParameters: FullUpdateRulesetRequest): Promise<Ruleset> {
        const response = await this.fullUpdateRulesetRaw(requestParameters);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * Retrieve a checker of a model
     */
    async getCheckerRaw(requestParameters: GetCheckerRequest): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getChecker.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChecker.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getChecker.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getChecker.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * Retrieve a checker of a model
     */
    async getChecker(requestParameters: GetCheckerRequest): Promise<IfcChecker> {
        const response = await this.getCheckerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve one CheckerResult Required scopes: check:read
     * Retrieve one CheckerResult
     */
    async getCheckerResultRaw(requestParameters: GetCheckerResultRequest): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckerResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * Retrieve one CheckerResult Required scopes: check:read
     * Retrieve one CheckerResult
     */
    async getCheckerResult(requestParameters: GetCheckerResultRequest): Promise<CheckerResult> {
        const response = await this.getCheckerResultRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all CheckerResults Required scopes: check:read
     * Retrieve all CheckerResults
     */
    async getCheckerResultsRaw(requestParameters: GetCheckerResultsRequest): Promise<runtime.ApiResponse<Array<CheckerResult>>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling getCheckerResults.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckerResults.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getCheckerResults.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckerResults.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckerResultFromJSON));
    }

    /**
     * Retrieve all CheckerResults Required scopes: check:read
     * Retrieve all CheckerResults
     */
    async getCheckerResults(requestParameters: GetCheckerResultsRequest): Promise<Array<CheckerResult>> {
        const response = await this.getCheckerResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * Retrieve all checkers of a model
     */
    async getCheckersRaw(requestParameters: GetCheckersRequest): Promise<runtime.ApiResponse<Array<IfcChecker>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckers.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling getCheckers.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IfcCheckerFromJSON));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:read, ifc:read
     * Retrieve all checkers of a model
     */
    async getCheckers(requestParameters: GetCheckersRequest): Promise<Array<IfcChecker>> {
        const response = await this.getCheckersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve one Checkplan Required scopes: check:read
     * Retrieve one Checkplan
     */
    async getCheckplanRaw(requestParameters: GetCheckplanRequest): Promise<runtime.ApiResponse<CheckPlan>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckplan.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckplan.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPlanFromJSON(jsonValue));
    }

    /**
     * Retrieve one Checkplan Required scopes: check:read
     * Retrieve one Checkplan
     */
    async getCheckplan(requestParameters: GetCheckplanRequest): Promise<CheckPlan> {
        const response = await this.getCheckplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all Checkplans Required scopes: check:read
     * Retrieve all Checkplans
     */
    async getCheckplansRaw(requestParameters: GetCheckplansRequest): Promise<runtime.ApiResponse<Array<CheckPlan>>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getCheckplans.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getCheckplans.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckPlanFromJSON));
    }

    /**
     * Retrieve all Checkplans Required scopes: check:read
     * Retrieve all Checkplans
     */
    async getCheckplans(requestParameters: GetCheckplansRequest): Promise<Array<CheckPlan>> {
        const response = await this.getCheckplansRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve one Rule Required scopes: check:read
     * Retrieve one Rule
     */
    async getRuleRaw(requestParameters: GetRuleRequest): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRule.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRule.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRule.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling getRule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * Retrieve one Rule Required scopes: check:read
     * Retrieve one Rule
     */
    async getRule(requestParameters: GetRuleRequest): Promise<Rule> {
        const response = await this.getRuleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve one RuleComponent Required scopes: check:read
     * Retrieve one RuleComponent
     */
    async getRuleComponentRaw(requestParameters: GetRuleComponentRequest): Promise<runtime.ApiResponse<RuleComponent>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling getRuleComponent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleComponentFromJSON(jsonValue));
    }

    /**
     * Retrieve one RuleComponent Required scopes: check:read
     * Retrieve one RuleComponent
     */
    async getRuleComponent(requestParameters: GetRuleComponentRequest): Promise<RuleComponent> {
        const response = await this.getRuleComponentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all RuleComponents Required scopes: check:read
     * Retrieve all RuleComponents
     */
    async getRuleComponentsRaw(requestParameters: GetRuleComponentsRequest): Promise<runtime.ApiResponse<Array<RuleComponent>>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling getRuleComponents.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RuleComponentFromJSON));
    }

    /**
     * Retrieve all RuleComponents Required scopes: check:read
     * Retrieve all RuleComponents
     */
    async getRuleComponents(requestParameters: GetRuleComponentsRequest): Promise<Array<RuleComponent>> {
        const response = await this.getRuleComponentsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all Rules Required scopes: check:read
     * Retrieve all Rules
     */
    async getRulesRaw(requestParameters: GetRulesRequest): Promise<runtime.ApiResponse<Array<Rule>>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRules.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRules.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRules.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling getRules.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RuleFromJSON));
    }

    /**
     * Retrieve all Rules Required scopes: check:read
     * Retrieve all Rules
     */
    async getRules(requestParameters: GetRulesRequest): Promise<Array<Rule>> {
        const response = await this.getRulesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve one Ruleset Required scopes: check:read
     * Retrieve one Ruleset
     */
    async getRulesetRaw(requestParameters: GetRulesetRequest): Promise<runtime.ApiResponse<Ruleset>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRuleset.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRuleset.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRuleset.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRuleset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesetFromJSON(jsonValue));
    }

    /**
     * Retrieve one Ruleset Required scopes: check:read
     * Retrieve one Ruleset
     */
    async getRuleset(requestParameters: GetRulesetRequest): Promise<Ruleset> {
        const response = await this.getRulesetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve all Rulesets Required scopes: check:read
     * Retrieve all Rulesets
     */
    async getRulesetsRaw(requestParameters: GetRulesetsRequest): Promise<runtime.ApiResponse<Array<Ruleset>>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling getRulesets.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling getRulesets.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling getRulesets.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RulesetFromJSON));
    }

    /**
     * Retrieve all Rulesets Required scopes: check:read
     * Retrieve all Rulesets
     */
    async getRulesets(requestParameters: GetRulesetsRequest): Promise<Array<Ruleset>> {
        const response = await this.getRulesetsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Starts a new check in the checker Required scopes: check:write, ifc:read
     * Launch a new check on the model
     */
    async launchNewCheckRaw(requestParameters: LaunchNewCheckRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling launchNewCheck.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling launchNewCheck.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling launchNewCheck.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling launchNewCheck.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling launchNewCheck.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}/launch-check`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcCheckerToJSON(requestParameters.data),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Starts a new check in the checker Required scopes: check:write, ifc:read
     * Launch a new check on the model
     */
    async launchNewCheck(requestParameters: LaunchNewCheckRequest): Promise<void> {
        await this.launchNewCheckRaw(requestParameters);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * Update some fields of a checker of a model
     */
    async updateCheckerRaw(requestParameters: UpdateCheckerRequest): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateChecker.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateChecker.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateChecker.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateChecker.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateChecker.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IfcCheckerToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results Required scopes: check:write, ifc:read
     * Update some fields of a checker of a model
     */
    async updateChecker(requestParameters: UpdateCheckerRequest): Promise<IfcChecker> {
        const response = await this.updateCheckerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a CheckerResult Required scopes: check:write
     * Update some fields of a CheckerResult
     */
    async updateCheckerResultRaw(requestParameters: UpdateCheckerResultRequest): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checkerPk === null || requestParameters.checkerPk === undefined) {
            throw new runtime.RequiredError('checkerPk','Required parameter requestParameters.checkerPk was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.ifcPk === null || requestParameters.ifcPk === undefined) {
            throw new runtime.RequiredError('ifcPk','Required parameter requestParameters.ifcPk was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateCheckerResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checkerPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"ifc_pk"}}`, encodeURIComponent(String(requestParameters.ifcPk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CheckerResultToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * Update some fields of a CheckerResult Required scopes: check:write
     * Update some fields of a CheckerResult
     */
    async updateCheckerResult(requestParameters: UpdateCheckerResultRequest): Promise<CheckerResult> {
        const response = await this.updateCheckerResultRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a Checkplan Required scopes: check:write
     * Update some fields of a Checkplan
     */
    async updateCheckplanRaw(requestParameters: UpdateCheckplanRequest): Promise<runtime.ApiResponse<CheckPlan>> {
        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateCheckplan.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCheckplan.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateCheckplan.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateCheckplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPlanToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPlanFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Checkplan Required scopes: check:write
     * Update some fields of a Checkplan
     */
    async updateCheckplan(requestParameters: UpdateCheckplanRequest): Promise<CheckPlan> {
        const response = await this.updateCheckplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a Rule Required scopes: check:write
     * Update some fields of a Rule
     */
    async updateRuleRaw(requestParameters: UpdateRuleRequest): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling updateRule.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRule.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateRule.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling updateRule.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateRule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RuleToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Rule Required scopes: check:write
     * Update some fields of a Rule
     */
    async updateRule(requestParameters: UpdateRuleRequest): Promise<Rule> {
        const response = await this.updateRuleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a RuleComponent Required scopes: check:write
     * Update some fields of a RuleComponent
     */
    async updateRuleComponentRaw(requestParameters: UpdateRuleComponentRequest): Promise<runtime.ApiResponse<RuleComponent>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.rulePk === null || requestParameters.rulePk === undefined) {
            throw new runtime.RequiredError('rulePk','Required parameter requestParameters.rulePk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.rulesetPk === null || requestParameters.rulesetPk === undefined) {
            throw new runtime.RequiredError('rulesetPk','Required parameter requestParameters.rulesetPk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateRuleComponent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rulePk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.rulesetPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RuleComponentToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleComponentFromJSON(jsonValue));
    }

    /**
     * Update some fields of a RuleComponent Required scopes: check:write
     * Update some fields of a RuleComponent
     */
    async updateRuleComponent(requestParameters: UpdateRuleComponentRequest): Promise<RuleComponent> {
        const response = await this.updateRuleComponentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update some fields of a Ruleset Required scopes: check:write
     * Update some fields of a Ruleset
     */
    async updateRulesetRaw(requestParameters: UpdateRulesetRequest): Promise<runtime.ApiResponse<Ruleset>> {
        if (requestParameters.checkPlanPk === null || requestParameters.checkPlanPk === undefined) {
            throw new runtime.RequiredError('checkPlanPk','Required parameter requestParameters.checkPlanPk was null or undefined when calling updateRuleset.');
        }

        if (requestParameters.cloudPk === null || requestParameters.cloudPk === undefined) {
            throw new runtime.RequiredError('cloudPk','Required parameter requestParameters.cloudPk was null or undefined when calling updateRuleset.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRuleset.');
        }

        if (requestParameters.projectPk === null || requestParameters.projectPk === undefined) {
            throw new runtime.RequiredError('projectPk','Required parameter requestParameters.projectPk was null or undefined when calling updateRuleset.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling updateRuleset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("bimdata_connect", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("client_credentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.checkPlanPk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloudPk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.projectPk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RulesetToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesetFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Ruleset Required scopes: check:write
     * Update some fields of a Ruleset
     */
    async updateRuleset(requestParameters: UpdateRulesetRequest): Promise<Ruleset> {
        const response = await this.updateRulesetRaw(requestParameters);
        return await response.value();
    }

}
