/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckPlan,
    CheckPlanFromJSON,
    CheckPlanToJSON,
    CheckPlanRequest,
    CheckPlanRequestFromJSON,
    CheckPlanRequestToJSON,
    CheckerResult,
    CheckerResultFromJSON,
    CheckerResultToJSON,
    CheckerResultRequest,
    CheckerResultRequestFromJSON,
    CheckerResultRequestToJSON,
    IfcChecker,
    IfcCheckerFromJSON,
    IfcCheckerToJSON,
    IfcCheckerRequest,
    IfcCheckerRequestFromJSON,
    IfcCheckerRequestToJSON,
    PatchedCheckPlanRequest,
    PatchedCheckPlanRequestFromJSON,
    PatchedCheckPlanRequestToJSON,
    PatchedCheckerResultRequest,
    PatchedCheckerResultRequestFromJSON,
    PatchedCheckerResultRequestToJSON,
    PatchedIfcCheckerRequest,
    PatchedIfcCheckerRequestFromJSON,
    PatchedIfcCheckerRequestToJSON,
    PatchedRuleComponentRequest,
    PatchedRuleComponentRequestFromJSON,
    PatchedRuleComponentRequestToJSON,
    PatchedRuleRequest,
    PatchedRuleRequestFromJSON,
    PatchedRuleRequestToJSON,
    PatchedRulesetRequest,
    PatchedRulesetRequestFromJSON,
    PatchedRulesetRequestToJSON,
    Rule,
    RuleFromJSON,
    RuleToJSON,
    RuleComponent,
    RuleComponentFromJSON,
    RuleComponentToJSON,
    RuleComponentRequest,
    RuleComponentRequestFromJSON,
    RuleComponentRequestToJSON,
    RuleRequest,
    RuleRequestFromJSON,
    RuleRequestToJSON,
    Ruleset,
    RulesetFromJSON,
    RulesetToJSON,
    RulesetRequest,
    RulesetRequestFromJSON,
    RulesetRequestToJSON,
} from '../models';

export interface CreateCheckerRequest {
    cloud_pk: number;
    model_pk: number;
    project_pk: number;
    IfcCheckerRequest?: IfcCheckerRequest;
}

export interface CreateCheckerResultRequest {
    checker_pk: number;
    cloud_pk: number;
    model_pk: number;
    project_pk: number;
    CheckerResultRequest?: CheckerResultRequest;
}

export interface CreateCheckplanRequest {
    cloud_pk: number;
    project_pk: number;
    CheckPlanRequest: CheckPlanRequest;
}

export interface CreateRuleRequest {
    check_plan_pk: number;
    cloud_pk: number;
    project_pk: number;
    ruleset_pk: number;
    RuleRequest: RuleRequest;
}

export interface CreateRuleComponentRequest {
    check_plan_pk: number;
    cloud_pk: number;
    project_pk: number;
    rule_pk: number;
    ruleset_pk: number;
    RuleComponentRequest?: RuleComponentRequest;
}

export interface CreateRulesetRequest {
    check_plan_pk: number;
    cloud_pk: number;
    project_pk: number;
    RulesetRequest: RulesetRequest;
}

export interface DeleteCheckerRequest {
    cloud_pk: number;
    id: number;
    model_pk: number;
    project_pk: number;
}

export interface DeleteCheckerResultRequest {
    checker_pk: number;
    cloud_pk: number;
    id: number;
    model_pk: number;
    project_pk: number;
}

export interface DeleteCheckplanRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface DeleteRuleRequest {
    check_plan_pk: number;
    cloud_pk: number;
    id: number;
    project_pk: number;
    ruleset_pk: number;
}

export interface DeleteRuleComponentRequest {
    check_plan_pk: number;
    cloud_pk: number;
    id: number;
    project_pk: number;
    rule_pk: number;
    ruleset_pk: number;
}

export interface DeleteRulesetRequest {
    check_plan_pk: number;
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface GetCheckerRequest {
    cloud_pk: number;
    id: number;
    model_pk: number;
    project_pk: number;
}

export interface GetCheckerResultRequest {
    checker_pk: number;
    cloud_pk: number;
    id: number;
    model_pk: number;
    project_pk: number;
}

export interface GetCheckerResultsRequest {
    checker_pk: number;
    cloud_pk: number;
    model_pk: number;
    project_pk: number;
}

export interface GetCheckersRequest {
    cloud_pk: number;
    model_pk: number;
    project_pk: number;
}

export interface GetCheckplanRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface GetCheckplansRequest {
    cloud_pk: number;
    project_pk: number;
}

export interface GetRuleRequest {
    check_plan_pk: number;
    cloud_pk: number;
    id: number;
    project_pk: number;
    ruleset_pk: number;
}

export interface GetRuleComponentRequest {
    check_plan_pk: number;
    cloud_pk: number;
    id: number;
    project_pk: number;
    rule_pk: number;
    ruleset_pk: number;
}

export interface GetRuleComponentsRequest {
    check_plan_pk: number;
    cloud_pk: number;
    project_pk: number;
    rule_pk: number;
    ruleset_pk: number;
}

export interface GetRulesRequest {
    check_plan_pk: number;
    cloud_pk: number;
    project_pk: number;
    ruleset_pk: number;
}

export interface GetRulesetRequest {
    check_plan_pk: number;
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface GetRulesetsRequest {
    check_plan_pk: number;
    cloud_pk: number;
    project_pk: number;
}

export interface LaunchNewCheckRequest {
    cloud_pk: number;
    id: number;
    model_pk: number;
    project_pk: number;
    IfcCheckerRequest?: IfcCheckerRequest;
}

export interface UpdateCheckerRequest {
    cloud_pk: number;
    id: number;
    model_pk: number;
    project_pk: number;
    PatchedIfcCheckerRequest?: PatchedIfcCheckerRequest;
}

export interface UpdateCheckerResultRequest {
    checker_pk: number;
    cloud_pk: number;
    id: number;
    model_pk: number;
    project_pk: number;
    PatchedCheckerResultRequest?: PatchedCheckerResultRequest;
}

export interface UpdateCheckplanRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
    PatchedCheckPlanRequest?: PatchedCheckPlanRequest;
}

export interface UpdateRuleRequest {
    check_plan_pk: number;
    cloud_pk: number;
    id: number;
    project_pk: number;
    ruleset_pk: number;
    PatchedRuleRequest?: PatchedRuleRequest;
}

export interface UpdateRuleComponentRequest {
    check_plan_pk: number;
    cloud_pk: number;
    id: number;
    project_pk: number;
    rule_pk: number;
    ruleset_pk: number;
    PatchedRuleComponentRequest?: PatchedRuleComponentRequest;
}

export interface UpdateRulesetRequest {
    check_plan_pk: number;
    cloud_pk: number;
    id: number;
    project_pk: number;
    PatchedRulesetRequest?: PatchedRulesetRequest;
}

/**
 * 
 */
export class CheckerApi extends runtime.BaseAPI {

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Create a checker to a model
     */
    async createCheckerRaw(requestParameters: CreateCheckerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createChecker.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling createChecker.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createChecker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcCheckerRequestToJSON(requestParameters.IfcCheckerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Create a checker to a model
     */
    async createChecker(cloud_pk: number, model_pk: number, project_pk: number, IfcCheckerRequest?: IfcCheckerRequest, initOverrides?: RequestInit): Promise<IfcChecker> {
        const response = await this.createCheckerRaw({ cloud_pk: cloud_pk, model_pk: model_pk, project_pk: project_pk, IfcCheckerRequest: IfcCheckerRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a CheckerResult  Required scopes: check:write
     * Create a CheckerResult
     */
    async createCheckerResultRaw(requestParameters: CreateCheckerResultRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checker_pk === null || requestParameters.checker_pk === undefined) {
            throw new runtime.RequiredError('checker_pk','Required parameter requestParameters.checker_pk was null or undefined when calling createCheckerResult.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createCheckerResult.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling createCheckerResult.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createCheckerResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checker_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckerResultRequestToJSON(requestParameters.CheckerResultRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * TCreate a CheckerResult  Required scopes: check:write
     * Create a CheckerResult
     */
    async createCheckerResult(checker_pk: number, cloud_pk: number, model_pk: number, project_pk: number, CheckerResultRequest?: CheckerResultRequest, initOverrides?: RequestInit): Promise<CheckerResult> {
        const response = await this.createCheckerResultRaw({ checker_pk: checker_pk, cloud_pk: cloud_pk, model_pk: model_pk, project_pk: project_pk, CheckerResultRequest: CheckerResultRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a Checkplan  Required scopes: check:write
     * Create a Checkplan
     */
    async createCheckplanRaw(requestParameters: CreateCheckplanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckPlan>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createCheckplan.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createCheckplan.');
        }

        if (requestParameters.CheckPlanRequest === null || requestParameters.CheckPlanRequest === undefined) {
            throw new runtime.RequiredError('CheckPlanRequest','Required parameter requestParameters.CheckPlanRequest was null or undefined when calling createCheckplan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPlanRequestToJSON(requestParameters.CheckPlanRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPlanFromJSON(jsonValue));
    }

    /**
     * TCreate a Checkplan  Required scopes: check:write
     * Create a Checkplan
     */
    async createCheckplan(cloud_pk: number, project_pk: number, CheckPlanRequest: CheckPlanRequest, initOverrides?: RequestInit): Promise<CheckPlan> {
        const response = await this.createCheckplanRaw({ cloud_pk: cloud_pk, project_pk: project_pk, CheckPlanRequest: CheckPlanRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a Rule  Required scopes: check:write
     * Create a Rule
     */
    async createRuleRaw(requestParameters: CreateRuleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling createRule.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createRule.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createRule.');
        }

        if (requestParameters.ruleset_pk === null || requestParameters.ruleset_pk === undefined) {
            throw new runtime.RequiredError('ruleset_pk','Required parameter requestParameters.ruleset_pk was null or undefined when calling createRule.');
        }

        if (requestParameters.RuleRequest === null || requestParameters.RuleRequest === undefined) {
            throw new runtime.RequiredError('RuleRequest','Required parameter requestParameters.RuleRequest was null or undefined when calling createRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.ruleset_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RuleRequestToJSON(requestParameters.RuleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * TCreate a Rule  Required scopes: check:write
     * Create a Rule
     */
    async createRule(check_plan_pk: number, cloud_pk: number, project_pk: number, ruleset_pk: number, RuleRequest: RuleRequest, initOverrides?: RequestInit): Promise<Rule> {
        const response = await this.createRuleRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, project_pk: project_pk, ruleset_pk: ruleset_pk, RuleRequest: RuleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a RuleComponent  Required scopes: check:write
     * Create a RuleComponent
     */
    async createRuleComponentRaw(requestParameters: CreateRuleComponentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RuleComponent>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.rule_pk === null || requestParameters.rule_pk === undefined) {
            throw new runtime.RequiredError('rule_pk','Required parameter requestParameters.rule_pk was null or undefined when calling createRuleComponent.');
        }

        if (requestParameters.ruleset_pk === null || requestParameters.ruleset_pk === undefined) {
            throw new runtime.RequiredError('ruleset_pk','Required parameter requestParameters.ruleset_pk was null or undefined when calling createRuleComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rule_pk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.ruleset_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RuleComponentRequestToJSON(requestParameters.RuleComponentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleComponentFromJSON(jsonValue));
    }

    /**
     * TCreate a RuleComponent  Required scopes: check:write
     * Create a RuleComponent
     */
    async createRuleComponent(check_plan_pk: number, cloud_pk: number, project_pk: number, rule_pk: number, ruleset_pk: number, RuleComponentRequest?: RuleComponentRequest, initOverrides?: RequestInit): Promise<RuleComponent> {
        const response = await this.createRuleComponentRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, project_pk: project_pk, rule_pk: rule_pk, ruleset_pk: ruleset_pk, RuleComponentRequest: RuleComponentRequest }, initOverrides);
        return await response.value();
    }

    /**
     * TCreate a Ruleset  Required scopes: check:write
     * Create a Ruleset
     */
    async createRulesetRaw(requestParameters: CreateRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Ruleset>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling createRuleset.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createRuleset.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createRuleset.');
        }

        if (requestParameters.RulesetRequest === null || requestParameters.RulesetRequest === undefined) {
            throw new runtime.RequiredError('RulesetRequest','Required parameter requestParameters.RulesetRequest was null or undefined when calling createRuleset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RulesetRequestToJSON(requestParameters.RulesetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesetFromJSON(jsonValue));
    }

    /**
     * TCreate a Ruleset  Required scopes: check:write
     * Create a Ruleset
     */
    async createRuleset(check_plan_pk: number, cloud_pk: number, project_pk: number, RulesetRequest: RulesetRequest, initOverrides?: RequestInit): Promise<Ruleset> {
        const response = await this.createRulesetRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, project_pk: project_pk, RulesetRequest: RulesetRequest }, initOverrides);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Delete a checker of a model
     */
    async deleteCheckerRaw(requestParameters: DeleteCheckerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteChecker.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteChecker.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling deleteChecker.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteChecker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Delete a checker of a model
     */
    async deleteChecker(cloud_pk: number, id: number, model_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCheckerRaw({ cloud_pk: cloud_pk, id: id, model_pk: model_pk, project_pk: project_pk }, initOverrides);
    }

    /**
     * Delete a CheckerResult  Required scopes: check:write
     * Delete a CheckerResult
     */
    async deleteCheckerResultRaw(requestParameters: DeleteCheckerResultRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checker_pk === null || requestParameters.checker_pk === undefined) {
            throw new runtime.RequiredError('checker_pk','Required parameter requestParameters.checker_pk was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling deleteCheckerResult.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteCheckerResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checker_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a CheckerResult  Required scopes: check:write
     * Delete a CheckerResult
     */
    async deleteCheckerResult(checker_pk: number, cloud_pk: number, id: number, model_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCheckerResultRaw({ checker_pk: checker_pk, cloud_pk: cloud_pk, id: id, model_pk: model_pk, project_pk: project_pk }, initOverrides);
    }

    /**
     * Delete a Checkplan  Required scopes: check:write
     * Delete a Checkplan
     */
    async deleteCheckplanRaw(requestParameters: DeleteCheckplanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteCheckplan.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCheckplan.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteCheckplan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Checkplan  Required scopes: check:write
     * Delete a Checkplan
     */
    async deleteCheckplan(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCheckplanRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Delete a Rule  Required scopes: check:write
     * Delete a Rule
     */
    async deleteRuleRaw(requestParameters: DeleteRuleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling deleteRule.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRule.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteRule.');
        }

        if (requestParameters.ruleset_pk === null || requestParameters.ruleset_pk === undefined) {
            throw new runtime.RequiredError('ruleset_pk','Required parameter requestParameters.ruleset_pk was null or undefined when calling deleteRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.ruleset_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Rule  Required scopes: check:write
     * Delete a Rule
     */
    async deleteRule(check_plan_pk: number, cloud_pk: number, id: number, project_pk: number, ruleset_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteRuleRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, id: id, project_pk: project_pk, ruleset_pk: ruleset_pk }, initOverrides);
    }

    /**
     * Delete a RuleComponent  Required scopes: check:write
     * Delete a RuleComponent
     */
    async deleteRuleComponentRaw(requestParameters: DeleteRuleComponentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.rule_pk === null || requestParameters.rule_pk === undefined) {
            throw new runtime.RequiredError('rule_pk','Required parameter requestParameters.rule_pk was null or undefined when calling deleteRuleComponent.');
        }

        if (requestParameters.ruleset_pk === null || requestParameters.ruleset_pk === undefined) {
            throw new runtime.RequiredError('ruleset_pk','Required parameter requestParameters.ruleset_pk was null or undefined when calling deleteRuleComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rule_pk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.ruleset_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a RuleComponent  Required scopes: check:write
     * Delete a RuleComponent
     */
    async deleteRuleComponent(check_plan_pk: number, cloud_pk: number, id: number, project_pk: number, rule_pk: number, ruleset_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteRuleComponentRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, id: id, project_pk: project_pk, rule_pk: rule_pk, ruleset_pk: ruleset_pk }, initOverrides);
    }

    /**
     * Delete a Ruleset  Required scopes: check:write
     * Delete a Ruleset
     */
    async deleteRulesetRaw(requestParameters: DeleteRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling deleteRuleset.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteRuleset.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRuleset.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteRuleset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Ruleset  Required scopes: check:write
     * Delete a Ruleset
     */
    async deleteRuleset(check_plan_pk: number, cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteRulesetRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve a checker of a model
     */
    async getCheckerRaw(requestParameters: GetCheckerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getChecker.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChecker.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling getChecker.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getChecker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve a checker of a model
     */
    async getChecker(cloud_pk: number, id: number, model_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<IfcChecker> {
        const response = await this.getCheckerRaw({ cloud_pk: cloud_pk, id: id, model_pk: model_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one CheckerResult  Required scopes: check:read
     * Retrieve one CheckerResult
     */
    async getCheckerResultRaw(requestParameters: GetCheckerResultRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checker_pk === null || requestParameters.checker_pk === undefined) {
            throw new runtime.RequiredError('checker_pk','Required parameter requestParameters.checker_pk was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling getCheckerResult.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getCheckerResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checker_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * Retrieve one CheckerResult  Required scopes: check:read
     * Retrieve one CheckerResult
     */
    async getCheckerResult(checker_pk: number, cloud_pk: number, id: number, model_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<CheckerResult> {
        const response = await this.getCheckerResultRaw({ checker_pk: checker_pk, cloud_pk: cloud_pk, id: id, model_pk: model_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all CheckerResults  Required scopes: check:read
     * Retrieve all CheckerResults
     */
    async getCheckerResultsRaw(requestParameters: GetCheckerResultsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CheckerResult>>> {
        if (requestParameters.checker_pk === null || requestParameters.checker_pk === undefined) {
            throw new runtime.RequiredError('checker_pk','Required parameter requestParameters.checker_pk was null or undefined when calling getCheckerResults.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getCheckerResults.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling getCheckerResults.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getCheckerResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checker_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckerResultFromJSON));
    }

    /**
     * Retrieve all CheckerResults  Required scopes: check:read
     * Retrieve all CheckerResults
     */
    async getCheckerResults(checker_pk: number, cloud_pk: number, model_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<CheckerResult>> {
        const response = await this.getCheckerResultsRaw({ checker_pk: checker_pk, cloud_pk: cloud_pk, model_pk: model_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve all checkers of a model
     */
    async getCheckersRaw(requestParameters: GetCheckersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<IfcChecker>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getCheckers.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling getCheckers.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getCheckers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IfcCheckerFromJSON));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:read, ifc:read
     * Retrieve all checkers of a model
     */
    async getCheckers(cloud_pk: number, model_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<IfcChecker>> {
        const response = await this.getCheckersRaw({ cloud_pk: cloud_pk, model_pk: model_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one Checkplan  Required scopes: check:read
     * Retrieve one Checkplan
     */
    async getCheckplanRaw(requestParameters: GetCheckplanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckPlan>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getCheckplan.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckplan.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getCheckplan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPlanFromJSON(jsonValue));
    }

    /**
     * Retrieve one Checkplan  Required scopes: check:read
     * Retrieve one Checkplan
     */
    async getCheckplan(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<CheckPlan> {
        const response = await this.getCheckplanRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all Checkplans  Required scopes: check:read
     * Retrieve all Checkplans
     */
    async getCheckplansRaw(requestParameters: GetCheckplansRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CheckPlan>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getCheckplans.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getCheckplans.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckPlanFromJSON));
    }

    /**
     * Retrieve all Checkplans  Required scopes: check:read
     * Retrieve all Checkplans
     */
    async getCheckplans(cloud_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<CheckPlan>> {
        const response = await this.getCheckplansRaw({ cloud_pk: cloud_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one Rule  Required scopes: check:read
     * Retrieve one Rule
     */
    async getRuleRaw(requestParameters: GetRuleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling getRule.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRule.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getRule.');
        }

        if (requestParameters.ruleset_pk === null || requestParameters.ruleset_pk === undefined) {
            throw new runtime.RequiredError('ruleset_pk','Required parameter requestParameters.ruleset_pk was null or undefined when calling getRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.ruleset_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * Retrieve one Rule  Required scopes: check:read
     * Retrieve one Rule
     */
    async getRule(check_plan_pk: number, cloud_pk: number, id: number, project_pk: number, ruleset_pk: number, initOverrides?: RequestInit): Promise<Rule> {
        const response = await this.getRuleRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, id: id, project_pk: project_pk, ruleset_pk: ruleset_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one RuleComponent  Required scopes: check:read
     * Retrieve one RuleComponent
     */
    async getRuleComponentRaw(requestParameters: GetRuleComponentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RuleComponent>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.rule_pk === null || requestParameters.rule_pk === undefined) {
            throw new runtime.RequiredError('rule_pk','Required parameter requestParameters.rule_pk was null or undefined when calling getRuleComponent.');
        }

        if (requestParameters.ruleset_pk === null || requestParameters.ruleset_pk === undefined) {
            throw new runtime.RequiredError('ruleset_pk','Required parameter requestParameters.ruleset_pk was null or undefined when calling getRuleComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rule_pk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.ruleset_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleComponentFromJSON(jsonValue));
    }

    /**
     * Retrieve one RuleComponent  Required scopes: check:read
     * Retrieve one RuleComponent
     */
    async getRuleComponent(check_plan_pk: number, cloud_pk: number, id: number, project_pk: number, rule_pk: number, ruleset_pk: number, initOverrides?: RequestInit): Promise<RuleComponent> {
        const response = await this.getRuleComponentRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, id: id, project_pk: project_pk, rule_pk: rule_pk, ruleset_pk: ruleset_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all RuleComponents  Required scopes: check:read
     * Retrieve all RuleComponents
     */
    async getRuleComponentsRaw(requestParameters: GetRuleComponentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RuleComponent>>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.rule_pk === null || requestParameters.rule_pk === undefined) {
            throw new runtime.RequiredError('rule_pk','Required parameter requestParameters.rule_pk was null or undefined when calling getRuleComponents.');
        }

        if (requestParameters.ruleset_pk === null || requestParameters.ruleset_pk === undefined) {
            throw new runtime.RequiredError('ruleset_pk','Required parameter requestParameters.ruleset_pk was null or undefined when calling getRuleComponents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rule_pk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.ruleset_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RuleComponentFromJSON));
    }

    /**
     * Retrieve all RuleComponents  Required scopes: check:read
     * Retrieve all RuleComponents
     */
    async getRuleComponents(check_plan_pk: number, cloud_pk: number, project_pk: number, rule_pk: number, ruleset_pk: number, initOverrides?: RequestInit): Promise<Array<RuleComponent>> {
        const response = await this.getRuleComponentsRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, project_pk: project_pk, rule_pk: rule_pk, ruleset_pk: ruleset_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all Rules  Required scopes: check:read
     * Retrieve all Rules
     */
    async getRulesRaw(requestParameters: GetRulesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Rule>>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling getRules.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getRules.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getRules.');
        }

        if (requestParameters.ruleset_pk === null || requestParameters.ruleset_pk === undefined) {
            throw new runtime.RequiredError('ruleset_pk','Required parameter requestParameters.ruleset_pk was null or undefined when calling getRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.ruleset_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RuleFromJSON));
    }

    /**
     * Retrieve all Rules  Required scopes: check:read
     * Retrieve all Rules
     */
    async getRules(check_plan_pk: number, cloud_pk: number, project_pk: number, ruleset_pk: number, initOverrides?: RequestInit): Promise<Array<Rule>> {
        const response = await this.getRulesRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, project_pk: project_pk, ruleset_pk: ruleset_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one Ruleset  Required scopes: check:read
     * Retrieve one Ruleset
     */
    async getRulesetRaw(requestParameters: GetRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Ruleset>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling getRuleset.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getRuleset.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRuleset.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getRuleset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesetFromJSON(jsonValue));
    }

    /**
     * Retrieve one Ruleset  Required scopes: check:read
     * Retrieve one Ruleset
     */
    async getRuleset(check_plan_pk: number, cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<Ruleset> {
        const response = await this.getRulesetRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all Rulesets  Required scopes: check:read
     * Retrieve all Rulesets
     */
    async getRulesetsRaw(requestParameters: GetRulesetsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Ruleset>>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling getRulesets.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getRulesets.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getRulesets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RulesetFromJSON));
    }

    /**
     * Retrieve all Rulesets  Required scopes: check:read
     * Retrieve all Rulesets
     */
    async getRulesets(check_plan_pk: number, cloud_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<Ruleset>> {
        const response = await this.getRulesetsRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * A nex check will be played with the current state of elements, properties, etc.  Required scopes: check:write, ifc:read
     * Launch a new check on the model
     */
    async launchNewCheckRaw(requestParameters: LaunchNewCheckRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling launchNewCheck.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling launchNewCheck.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling launchNewCheck.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling launchNewCheck.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}/launch-check`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IfcCheckerRequestToJSON(requestParameters.IfcCheckerRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * A nex check will be played with the current state of elements, properties, etc.  Required scopes: check:write, ifc:read
     * Launch a new check on the model
     */
    async launchNewCheck(cloud_pk: number, id: number, model_pk: number, project_pk: number, IfcCheckerRequest?: IfcCheckerRequest, initOverrides?: RequestInit): Promise<void> {
        await this.launchNewCheckRaw({ cloud_pk: cloud_pk, id: id, model_pk: model_pk, project_pk: project_pk, IfcCheckerRequest: IfcCheckerRequest }, initOverrides);
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Update some fields of a checker of a model
     */
    async updateCheckerRaw(requestParameters: UpdateCheckerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<IfcChecker>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateChecker.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateChecker.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling updateChecker.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateChecker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIfcCheckerRequestToJSON(requestParameters.PatchedIfcCheckerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IfcCheckerFromJSON(jsonValue));
    }

    /**
     * A checker is a link between a checkplan and a model. A checker can launch a check multiple time and store all the results  Required scopes: check:write, ifc:read
     * Update some fields of a checker of a model
     */
    async updateChecker(cloud_pk: number, id: number, model_pk: number, project_pk: number, PatchedIfcCheckerRequest?: PatchedIfcCheckerRequest, initOverrides?: RequestInit): Promise<IfcChecker> {
        const response = await this.updateCheckerRaw({ cloud_pk: cloud_pk, id: id, model_pk: model_pk, project_pk: project_pk, PatchedIfcCheckerRequest: PatchedIfcCheckerRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a CheckerResult  Required scopes: check:write
     * Update some fields of a CheckerResult
     */
    async updateCheckerResultRaw(requestParameters: UpdateCheckerResultRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckerResult>> {
        if (requestParameters.checker_pk === null || requestParameters.checker_pk === undefined) {
            throw new runtime.RequiredError('checker_pk','Required parameter requestParameters.checker_pk was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.model_pk === null || requestParameters.model_pk === undefined) {
            throw new runtime.RequiredError('model_pk','Required parameter requestParameters.model_pk was null or undefined when calling updateCheckerResult.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateCheckerResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}`.replace(`{${"checker_pk"}}`, encodeURIComponent(String(requestParameters.checker_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"model_pk"}}`, encodeURIComponent(String(requestParameters.model_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCheckerResultRequestToJSON(requestParameters.PatchedCheckerResultRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckerResultFromJSON(jsonValue));
    }

    /**
     * Update some fields of a CheckerResult  Required scopes: check:write
     * Update some fields of a CheckerResult
     */
    async updateCheckerResult(checker_pk: number, cloud_pk: number, id: number, model_pk: number, project_pk: number, PatchedCheckerResultRequest?: PatchedCheckerResultRequest, initOverrides?: RequestInit): Promise<CheckerResult> {
        const response = await this.updateCheckerResultRaw({ checker_pk: checker_pk, cloud_pk: cloud_pk, id: id, model_pk: model_pk, project_pk: project_pk, PatchedCheckerResultRequest: PatchedCheckerResultRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a Checkplan  Required scopes: check:write
     * Update some fields of a Checkplan
     */
    async updateCheckplanRaw(requestParameters: UpdateCheckplanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckPlan>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateCheckplan.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCheckplan.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateCheckplan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCheckPlanRequestToJSON(requestParameters.PatchedCheckPlanRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckPlanFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Checkplan  Required scopes: check:write
     * Update some fields of a Checkplan
     */
    async updateCheckplan(cloud_pk: number, id: number, project_pk: number, PatchedCheckPlanRequest?: PatchedCheckPlanRequest, initOverrides?: RequestInit): Promise<CheckPlan> {
        const response = await this.updateCheckplanRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk, PatchedCheckPlanRequest: PatchedCheckPlanRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a Rule  Required scopes: check:write
     * Update some fields of a Rule
     */
    async updateRuleRaw(requestParameters: UpdateRuleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling updateRule.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRule.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateRule.');
        }

        if (requestParameters.ruleset_pk === null || requestParameters.ruleset_pk === undefined) {
            throw new runtime.RequiredError('ruleset_pk','Required parameter requestParameters.ruleset_pk was null or undefined when calling updateRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.ruleset_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRuleRequestToJSON(requestParameters.PatchedRuleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Rule  Required scopes: check:write
     * Update some fields of a Rule
     */
    async updateRule(check_plan_pk: number, cloud_pk: number, id: number, project_pk: number, ruleset_pk: number, PatchedRuleRequest?: PatchedRuleRequest, initOverrides?: RequestInit): Promise<Rule> {
        const response = await this.updateRuleRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, id: id, project_pk: project_pk, ruleset_pk: ruleset_pk, PatchedRuleRequest: PatchedRuleRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a RuleComponent  Required scopes: check:write
     * Update some fields of a RuleComponent
     */
    async updateRuleComponentRaw(requestParameters: UpdateRuleComponentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RuleComponent>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.rule_pk === null || requestParameters.rule_pk === undefined) {
            throw new runtime.RequiredError('rule_pk','Required parameter requestParameters.rule_pk was null or undefined when calling updateRuleComponent.');
        }

        if (requestParameters.ruleset_pk === null || requestParameters.ruleset_pk === undefined) {
            throw new runtime.RequiredError('ruleset_pk','Required parameter requestParameters.ruleset_pk was null or undefined when calling updateRuleComponent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"rule_pk"}}`, encodeURIComponent(String(requestParameters.rule_pk))).replace(`{${"ruleset_pk"}}`, encodeURIComponent(String(requestParameters.ruleset_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRuleComponentRequestToJSON(requestParameters.PatchedRuleComponentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleComponentFromJSON(jsonValue));
    }

    /**
     * Update some fields of a RuleComponent  Required scopes: check:write
     * Update some fields of a RuleComponent
     */
    async updateRuleComponent(check_plan_pk: number, cloud_pk: number, id: number, project_pk: number, rule_pk: number, ruleset_pk: number, PatchedRuleComponentRequest?: PatchedRuleComponentRequest, initOverrides?: RequestInit): Promise<RuleComponent> {
        const response = await this.updateRuleComponentRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, id: id, project_pk: project_pk, rule_pk: rule_pk, ruleset_pk: ruleset_pk, PatchedRuleComponentRequest: PatchedRuleComponentRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a Ruleset  Required scopes: check:write
     * Update some fields of a Ruleset
     */
    async updateRulesetRaw(requestParameters: UpdateRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Ruleset>> {
        if (requestParameters.check_plan_pk === null || requestParameters.check_plan_pk === undefined) {
            throw new runtime.RequiredError('check_plan_pk','Required parameter requestParameters.check_plan_pk was null or undefined when calling updateRuleset.');
        }

        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateRuleset.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRuleset.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateRuleset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}`.replace(`{${"check_plan_pk"}}`, encodeURIComponent(String(requestParameters.check_plan_pk))).replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRulesetRequestToJSON(requestParameters.PatchedRulesetRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesetFromJSON(jsonValue));
    }

    /**
     * Update some fields of a Ruleset  Required scopes: check:write
     * Update some fields of a Ruleset
     */
    async updateRuleset(check_plan_pk: number, cloud_pk: number, id: number, project_pk: number, PatchedRulesetRequest?: PatchedRulesetRequest, initOverrides?: RequestInit): Promise<Ruleset> {
        const response = await this.updateRulesetRaw({ check_plan_pk: check_plan_pk, cloud_pk: cloud_pk, id: id, project_pk: project_pk, PatchedRulesetRequest: PatchedRulesetRequest }, initOverrides);
        return await response.value();
    }

}
