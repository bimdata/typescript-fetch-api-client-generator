/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckProjectAccess,
    CheckProjectAccessFromJSON,
    CheckProjectAccessToJSON,
    Classification,
    ClassificationFromJSON,
    ClassificationToJSON,
    ClassificationRequest,
    ClassificationRequestFromJSON,
    ClassificationRequestToJSON,
    Cloud,
    CloudFromJSON,
    CloudToJSON,
    CloudInvitation,
    CloudInvitationFromJSON,
    CloudInvitationToJSON,
    CloudInvitationRequest,
    CloudInvitationRequestFromJSON,
    CloudInvitationRequestToJSON,
    CloudRequest,
    CloudRequestFromJSON,
    CloudRequestToJSON,
    Document,
    DocumentFromJSON,
    DocumentToJSON,
    DocumentPreviewFile,
    DocumentPreviewFileFromJSON,
    DocumentPreviewFileToJSON,
    DocumentText,
    DocumentTextFromJSON,
    DocumentTextToJSON,
    Folder,
    FolderFromJSON,
    FolderToJSON,
    FolderTree,
    FolderTreeFromJSON,
    FolderTreeToJSON,
    FolderUserProject,
    FolderUserProjectFromJSON,
    FolderUserProjectToJSON,
    FolderWithoutChildren,
    FolderWithoutChildrenFromJSON,
    FolderWithoutChildrenToJSON,
    FolderWithoutChildrenRequest,
    FolderWithoutChildrenRequestFromJSON,
    FolderWithoutChildrenRequestToJSON,
    Group,
    GroupFromJSON,
    GroupToJSON,
    GroupFolder,
    GroupFolderFromJSON,
    GroupFolderToJSON,
    GroupRequest,
    GroupRequestFromJSON,
    GroupRequestToJSON,
    ImportGroupRequest,
    ImportGroupRequestFromJSON,
    ImportGroupRequestToJSON,
    LogEntry,
    LogEntryFromJSON,
    LogEntryToJSON,
    PatchedClassificationRequest,
    PatchedClassificationRequestFromJSON,
    PatchedClassificationRequestToJSON,
    PatchedCloudRequest,
    PatchedCloudRequestFromJSON,
    PatchedCloudRequestToJSON,
    PatchedDocumentRequest,
    PatchedDocumentRequestFromJSON,
    PatchedDocumentRequestToJSON,
    PatchedDocumentTextRequest,
    PatchedDocumentTextRequestFromJSON,
    PatchedDocumentTextRequestToJSON,
    PatchedFolderWithoutChildrenRequest,
    PatchedFolderWithoutChildrenRequestFromJSON,
    PatchedFolderWithoutChildrenRequestToJSON,
    PatchedGroupFolderRequest,
    PatchedGroupFolderRequestFromJSON,
    PatchedGroupFolderRequestToJSON,
    PatchedGroupRequest,
    PatchedGroupRequestFromJSON,
    PatchedGroupRequestToJSON,
    PatchedProjectRequest,
    PatchedProjectRequestFromJSON,
    PatchedProjectRequestToJSON,
    PatchedTagRequest,
    PatchedTagRequestFromJSON,
    PatchedTagRequestToJSON,
    PatchedUserCloudUpdateRequest,
    PatchedUserCloudUpdateRequestFromJSON,
    PatchedUserCloudUpdateRequestToJSON,
    PatchedUserProjectUpdateRequest,
    PatchedUserProjectUpdateRequestFromJSON,
    PatchedUserProjectUpdateRequestToJSON,
    PatchedVisaCommentRequest,
    PatchedVisaCommentRequestFromJSON,
    PatchedVisaCommentRequestToJSON,
    PatchedVisaRequest,
    PatchedVisaRequestFromJSON,
    PatchedVisaRequestToJSON,
    PatchedVisaValidationRequest,
    PatchedVisaValidationRequestFromJSON,
    PatchedVisaValidationRequestToJSON,
    Project,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectAccessToken,
    ProjectAccessTokenFromJSON,
    ProjectAccessTokenToJSON,
    ProjectAccessTokenRequest,
    ProjectAccessTokenRequestFromJSON,
    ProjectAccessTokenRequestToJSON,
    ProjectImportRequest,
    ProjectImportRequestFromJSON,
    ProjectImportRequestToJSON,
    ProjectInvitation,
    ProjectInvitationFromJSON,
    ProjectInvitationToJSON,
    ProjectInvitationRequest,
    ProjectInvitationRequestFromJSON,
    ProjectInvitationRequestToJSON,
    ProjectRequest,
    ProjectRequestFromJSON,
    ProjectRequestToJSON,
    ProjectSize,
    ProjectSizeFromJSON,
    ProjectSizeToJSON,
    SelfUser,
    SelfUserFromJSON,
    SelfUserToJSON,
    Size,
    SizeFromJSON,
    SizeToJSON,
    Tag,
    TagFromJSON,
    TagToJSON,
    TagIdRequest,
    TagIdRequestFromJSON,
    TagIdRequestToJSON,
    TagRequest,
    TagRequestFromJSON,
    TagRequestToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserInvitation,
    UserInvitationFromJSON,
    UserInvitationToJSON,
    UserProject,
    UserProjectFromJSON,
    UserProjectToJSON,
    UserProjectIdRequest,
    UserProjectIdRequestFromJSON,
    UserProjectIdRequestToJSON,
    Visa,
    VisaFromJSON,
    VisaToJSON,
    VisaAttachment,
    VisaAttachmentFromJSON,
    VisaAttachmentToJSON,
    VisaComment,
    VisaCommentFromJSON,
    VisaCommentToJSON,
    VisaCommentRequest,
    VisaCommentRequestFromJSON,
    VisaCommentRequestToJSON,
    VisaRequest,
    VisaRequestFromJSON,
    VisaRequestToJSON,
    VisaValidation,
    VisaValidationFromJSON,
    VisaValidationToJSON,
    VisaValidationRequest,
    VisaValidationRequestFromJSON,
    VisaValidationRequestToJSON,
    VisaWithDocument,
    VisaWithDocumentFromJSON,
    VisaWithDocumentToJSON,
    WriteFolderRequest,
    WriteFolderRequestFromJSON,
    WriteFolderRequestToJSON,
} from '../models';

export interface AcceptUserInvitationRequest {
    id: number;
}

export interface AcceptValidationRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
    visa_pk: number;
    attachment?: Blob | null;
}

export interface AddDocumentTagRequest {
    cloud_pk: number;
    document_pk: number;
    project_pk: number;
    TagIdRequest: TagIdRequest;
}

export interface AddGroupMemberRequest {
    cloud_pk: number;
    group_pk: number;
    project_pk: number;
    UserProjectIdRequest: UserProjectIdRequest;
}

export interface CancelCloudUserInvitationRequest {
    cloud_pk: number;
    id: number;
}

export interface CancelProjectUserInvitationRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface CheckAccessRequest {
    id: number;
}

export interface CheckProjectAccessRequest {
    cloud_pk: number;
    id: number;
}

export interface CloseVisaRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
}

export interface CreateClassificationRequest {
    cloud_pk: number;
    project_pk: number;
    ClassificationRequest: Array<ClassificationRequest>;
}

export interface CreateCloudRequest {
    CloudRequest: CloudRequest;
}

export interface CreateDMSTreeRequest {
    cloud_pk: number;
    id: number;
    WriteFolderRequest: Array<WriteFolderRequest>;
}

export interface CreateDemoRequest {
    id: number;
}

export interface CreateDocumentRequest {
    cloud_pk: number;
    project_pk: number;
    name: string;
    file: Blob;
    parent_id?: number | null;
    file_name?: string;
    description?: string | null;
    model_source?: CreateDocumentModelSourceEnum;
    ifc_source?: CreateDocumentIfcSourceEnum;
    successor_of?: number;
    process_hint?: CreateDocumentProcessHintEnum;
}

export interface CreateFolderRequest {
    cloud_pk: number;
    project_pk: number;
    FolderWithoutChildrenRequest: FolderWithoutChildrenRequest;
}

export interface CreateManageGroupRequest {
    cloud_pk: number;
    project_pk: number;
    GroupRequest: GroupRequest;
}

export interface CreateProjectRequest {
    cloud_pk: number;
    ProjectRequest: ProjectRequest;
}

export interface CreateProjectAccessTokenRequest {
    cloud_pk: number;
    project_pk: number;
    ProjectAccessTokenRequest: ProjectAccessTokenRequest;
}

export interface CreateTagRequest {
    cloud_pk: number;
    project_pk: number;
    TagRequest: TagRequest;
}

export interface CreateValidationRequest {
    cloud_pk: number;
    document_pk: number;
    project_pk: number;
    visa_pk: number;
    VisaValidationRequest: VisaValidationRequest;
}

export interface CreateVisaRequest {
    cloud_pk: number;
    document_pk: number;
    project_pk: number;
    VisaRequest?: VisaRequest;
}

export interface CreateVisaCommentRequest {
    cloud_pk: number;
    document_pk: number;
    project_pk: number;
    visa_pk: number;
    VisaCommentRequest?: VisaCommentRequest;
}

export interface DeleteAllDocumentHistoryRequest {
    cloud_pk: number;
    document_pk: number;
    project_pk: number;
}

export interface DeleteClassificationRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface DeleteCloudRequest {
    id: number;
}

export interface DeleteCloudUserRequest {
    cloud_pk: number;
    id: number;
}

export interface DeleteDocumentRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface DeleteDocumentTagRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
}

export interface DeleteFolderRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface DeleteGroupMemberRequest {
    cloud_pk: number;
    group_pk: number;
    id: number;
    project_pk: number;
}

export interface DeleteManageGroupRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface DeleteProjectRequest {
    cloud_pk: number;
    id: number;
}

export interface DeleteProjectAccessTokenRequest {
    cloud_pk: number;
    project_pk: number;
    token: string;
}

export interface DeleteProjectUserRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface DeleteTagRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface DeleteValidationRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
    visa_pk: number;
}

export interface DeleteVisaRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
}

export interface DeleteVisaCommentRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
    visa_pk: number;
}

export interface DenyUserInvitationRequest {
    id: number;
}

export interface DenyValidationRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
    visa_pk: number;
    attachment?: Blob | null;
}

export interface GetClassificationRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface GetClassificationsRequest {
    cloud_pk: number;
    project_pk: number;
}

export interface GetCloudRequest {
    id: number;
}

export interface GetCloudInvitationsRequest {
    cloud_pk: number;
}

export interface GetCloudSizeRequest {
    id: number;
}

export interface GetCloudUserRequest {
    cloud_pk: number;
    id: number;
}

export interface GetCloudUsersRequest {
    cloud_pk: number;
    email?: string;
    email__contains?: string;
    email__endswith?: string;
    email__startswith?: string;
}

export interface GetDocumentRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface GetDocumentHistoriesRequest {
    cloud_pk: number;
    document_pk: number;
    project_pk: number;
}

export interface GetDocumentsRequest {
    cloud_pk: number;
    project_pk: number;
    created_after?: Date;
    created_before?: Date;
    creator_email?: string;
    description?: string;
    description__contains?: string;
    description__endswith?: string;
    description__startswith?: string;
    file_name?: string;
    file_name__contains?: string;
    file_name__endswith?: string;
    file_name__startswith?: string;
    has__visa?: boolean;
    id__in?: Array<number>;
    name?: string;
    name__contains?: string;
    name__endswith?: string;
    name__startswith?: string;
    parent_id__in?: Array<number>;
    search?: string;
    size_max?: number | null;
    size_min?: number | null;
    tags?: Array<string>;
    text?: boolean;
    visa__creator_email?: string;
    visa__deadline_after?: Date;
    visa__deadline_before?: Date;
    visa__past__deadline?: boolean;
    visa__past__deadline__strict?: boolean;
    visa__status?: GetDocumentsVisaStatusEnum;
    visa__status__strict?: GetDocumentsVisaStatusStrictEnum;
    visa__validation_status?: string;
    visa__validator_email?: string;
}

export interface GetFolderRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface GetFolderDocumentsRequest {
    cloud_pk: number;
    folder_pk: number;
    project_pk: number;
    created_after?: Date;
    created_before?: Date;
    creator_email?: string;
    description?: string;
    description__contains?: string;
    description__endswith?: string;
    description__startswith?: string;
    file_name?: string;
    file_name__contains?: string;
    file_name__endswith?: string;
    file_name__startswith?: string;
    has__visa?: boolean;
    id__in?: Array<number>;
    name?: string;
    name__contains?: string;
    name__endswith?: string;
    name__startswith?: string;
    parent_id__in?: Array<number>;
    search?: string;
    size_max?: number | null;
    size_min?: number | null;
    tags?: Array<string>;
    visa__creator_email?: string;
    visa__deadline_after?: Date;
    visa__deadline_before?: Date;
    visa__past__deadline?: boolean;
    visa__past__deadline__strict?: boolean;
    visa__status?: GetFolderDocumentsVisaStatusEnum;
    visa__status__strict?: GetFolderDocumentsVisaStatusStrictEnum;
    visa__validation_status?: string;
    visa__validator_email?: string;
}

export interface GetFolderProjectUsersRequest {
    cloud_pk: number;
    folder_pk: number;
    project_pk: number;
}

export interface GetFoldersRequest {
    cloud_pk: number;
    project_pk: number;
}

export interface GetGroupRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface GetGroupsRequest {
    cloud_pk: number;
    project_pk: number;
}

export interface GetLogsRequest {
    cloud_pk: number;
    project_pk: number;
}

export interface GetManageGroupRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface GetManageGroupsRequest {
    cloud_pk: number;
    project_pk: number;
}

export interface GetProjectRequest {
    cloud_pk: number;
    id: number;
}

export interface GetProjectAccessTokenRequest {
    cloud_pk: number;
    project_pk: number;
    token: string;
}

export interface GetProjectAccessTokensRequest {
    cloud_pk: number;
    project_pk: number;
}

export interface GetProjectCreatorVisasRequest {
    cloud_pk: number;
    project_pk: number;
    deadline_after?: Date;
    deadline_before?: Date;
    has__past_deadline?: boolean;
    status?: GetProjectCreatorVisasStatusEnum;
    validation_status?: string;
}

export interface GetProjectDMSTreeRequest {
    cloud_pk: number;
    id: number;
}

export interface GetProjectFolderTreeRequest {
    cloud_pk: number;
    id: number;
}

export interface GetProjectInvitationsRequest {
    cloud_pk: number;
    project_pk: number;
}

export interface GetProjectSizeRequest {
    cloud_pk: number;
    id: number;
}

export interface GetProjectTreeRequest {
    cloud_pk: number;
    id: number;
}

export interface GetProjectUsersRequest {
    cloud_pk: number;
    project_pk: number;
    email?: string;
    email__contains?: string;
    email__endswith?: string;
    email__startswith?: string;
}

export interface GetProjectValidatorVisasRequest {
    cloud_pk: number;
    project_pk: number;
    deadline_after?: Date;
    deadline_before?: Date;
    has__past_deadline?: boolean;
    status?: GetProjectValidatorVisasStatusEnum;
    validation_status?: string;
}

export interface GetProjectsRequest {
    cloud_pk: number;
}

export interface GetTagRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
}

export interface GetTagsRequest {
    cloud_pk: number;
    project_pk: number;
}

export interface GetUserInvitationRequest {
    id: number;
}

export interface GetValidationRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
    visa_pk: number;
}

export interface GetValidationsRequest {
    cloud_pk: number;
    document_pk: number;
    project_pk: number;
    visa_pk: number;
}

export interface GetVisaRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
}

export interface GetVisaCommentRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
    visa_pk: number;
}

export interface GetVisaCommentsRequest {
    cloud_pk: number;
    document_pk: number;
    project_pk: number;
    visa_pk: number;
}

export interface GetVisasRequest {
    cloud_pk: number;
    document_pk: number;
    project_pk: number;
}

export interface ImportFromProjectRequest {
    cloud_pk: number;
    id: number;
    ProjectImportRequest: ProjectImportRequest;
}

export interface ImportManageGroupRequest {
    cloud_pk: number;
    project_pk: number;
    ImportGroupRequest: ImportGroupRequest;
}

export interface InviteCloudUserRequest {
    cloud_pk: number;
    CloudInvitationRequest: CloudInvitationRequest;
}

export interface InviteProjectUserRequest {
    cloud_pk: number;
    project_pk: number;
    ProjectInvitationRequest: ProjectInvitationRequest;
}

export interface LeaveProjectRequest {
    cloud_pk: number;
    id: number;
}

export interface LeaveVersionDocumentHistoryRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
}

export interface MakeHeadVersionDocumentHistoryRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
}

export interface PauseVisaRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
}

export interface ResetValidationRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
    visa_pk: number;
}

export interface ResumeVisaRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
}

export interface UpdateClassificationRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
    PatchedClassificationRequest?: PatchedClassificationRequest;
}

export interface UpdateCloudRequest {
    id: number;
    PatchedCloudRequest?: PatchedCloudRequest;
}

export interface UpdateCloudUserRequest {
    cloud_pk: number;
    id: number;
    PatchedUserCloudUpdateRequest?: PatchedUserCloudUpdateRequest;
}

export interface UpdateDocumentRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
    PatchedDocumentRequest?: PatchedDocumentRequest;
}

export interface UpdateDocumentTextRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
    PatchedDocumentTextRequest?: PatchedDocumentTextRequest;
}

export interface UpdateFolderRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
    PatchedFolderWithoutChildrenRequest?: PatchedFolderWithoutChildrenRequest;
}

export interface UpdateGroupFolderRequest {
    cloud_pk: number;
    folder_pk: number;
    id: number;
    project_pk: number;
    PatchedGroupFolderRequest?: PatchedGroupFolderRequest;
}

export interface UpdateManageGroupRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
    PatchedGroupRequest?: PatchedGroupRequest;
}

export interface UpdatePreviewFileRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
    office_preview?: Blob;
}

export interface UpdateProjectRequest {
    cloud_pk: number;
    id: number;
    PatchedProjectRequest?: PatchedProjectRequest;
}

export interface UpdateProjectUserRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
    PatchedUserProjectUpdateRequest?: PatchedUserProjectUpdateRequest;
}

export interface UpdateTagRequest {
    cloud_pk: number;
    id: number;
    project_pk: number;
    PatchedTagRequest?: PatchedTagRequest;
}

export interface UpdateValidationRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
    visa_pk: number;
    PatchedVisaValidationRequest?: PatchedVisaValidationRequest;
}

export interface UpdateVisaRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
    PatchedVisaRequest?: PatchedVisaRequest;
}

export interface UpdateVisaCommentRequest {
    cloud_pk: number;
    document_pk: number;
    id: number;
    project_pk: number;
    visa_pk: number;
    PatchedVisaCommentRequest?: PatchedVisaCommentRequest;
}

/**
 * 
 */
export class CollaborationApi extends runtime.BaseAPI {

    /**
     * The user is added to the cloud and projet.  Required scopes: user:write
     * Accept an invitation
     */
    async acceptUserInvitationRaw(requestParameters: AcceptUserInvitationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling acceptUserInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/user/invitations/{id}/accept`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The user is added to the cloud and projet.  Required scopes: user:write
     * Accept an invitation
     */
    async acceptUserInvitation(id: number, initOverrides?: RequestInit): Promise<void> {
        await this.acceptUserInvitationRaw({ id: id }, initOverrides);
    }

    /**
     * Accept a validation  Required scopes: document:read
     * Accept a validation
     */
    async acceptValidationRaw(requestParameters: AcceptValidationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VisaAttachment>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling acceptValidation.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling acceptValidation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling acceptValidation.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling acceptValidation.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling acceptValidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.attachment !== undefined) {
            formParams.append('attachment', requestParameters.attachment as any);
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/accept`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaAttachmentFromJSON(jsonValue));
    }

    /**
     * Accept a validation  Required scopes: document:read
     * Accept a validation
     */
    async acceptValidation(cloud_pk: number, document_pk: number, id: number, project_pk: number, visa_pk: number, attachment?: Blob | null, initOverrides?: RequestInit): Promise<VisaAttachment> {
        const response = await this.acceptValidationRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk, visa_pk: visa_pk, attachment: attachment }, initOverrides);
        return await response.value();
    }

    /**
     * Add a tag to a document  Required scopes: document:write
     * Add a tag to a document
     */
    async addDocumentTagRaw(requestParameters: AddDocumentTagRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling addDocumentTag.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling addDocumentTag.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling addDocumentTag.');
        }

        if (requestParameters.TagIdRequest === null || requestParameters.TagIdRequest === undefined) {
            throw new runtime.RequiredError('TagIdRequest','Required parameter requestParameters.TagIdRequest was null or undefined when calling addDocumentTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/tag`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagIdRequestToJSON(requestParameters.TagIdRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Add a tag to a document  Required scopes: document:write
     * Add a tag to a document
     */
    async addDocumentTag(cloud_pk: number, document_pk: number, project_pk: number, TagIdRequest: TagIdRequest, initOverrides?: RequestInit): Promise<Document> {
        const response = await this.addDocumentTagRaw({ cloud_pk: cloud_pk, document_pk: document_pk, project_pk: project_pk, TagIdRequest: TagIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Add a userproject to a group. Must be an admin of the project  Required scopes: org:manage
     * Add a user to a group
     */
    async addGroupMemberRaw(requestParameters: AddGroupMemberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserProject>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling addGroupMember.');
        }

        if (requestParameters.group_pk === null || requestParameters.group_pk === undefined) {
            throw new runtime.RequiredError('group_pk','Required parameter requestParameters.group_pk was null or undefined when calling addGroupMember.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling addGroupMember.');
        }

        if (requestParameters.UserProjectIdRequest === null || requestParameters.UserProjectIdRequest === undefined) {
            throw new runtime.RequiredError('UserProjectIdRequest','Required parameter requestParameters.UserProjectIdRequest was null or undefined when calling addGroupMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/group/{group_pk}/member`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"group_pk"}}`, encodeURIComponent(String(requestParameters.group_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserProjectIdRequestToJSON(requestParameters.UserProjectIdRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProjectFromJSON(jsonValue));
    }

    /**
     * Add a userproject to a group. Must be an admin of the project  Required scopes: org:manage
     * Add a user to a group
     */
    async addGroupMember(cloud_pk: number, group_pk: number, project_pk: number, UserProjectIdRequest: UserProjectIdRequest, initOverrides?: RequestInit): Promise<UserProject> {
        const response = await this.addGroupMemberRaw({ cloud_pk: cloud_pk, group_pk: group_pk, project_pk: project_pk, UserProjectIdRequest: UserProjectIdRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Cancel a pending invitation  Required scopes: org:manage
     * Cancel a pending invitation
     */
    async cancelCloudUserInvitationRaw(requestParameters: CancelCloudUserInvitationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling cancelCloudUserInvitation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelCloudUserInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/invitation/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel a pending invitation  Required scopes: org:manage
     * Cancel a pending invitation
     */
    async cancelCloudUserInvitation(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<void> {
        await this.cancelCloudUserInvitationRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
    }

    /**
     * Cancel a pending invitation  Required scopes: org:manage
     * Cancel a pending invitation
     */
    async cancelProjectUserInvitationRaw(requestParameters: CancelProjectUserInvitationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling cancelProjectUserInvitation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelProjectUserInvitation.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling cancelProjectUserInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/invitation/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel a pending invitation  Required scopes: org:manage
     * Cancel a pending invitation
     */
    async cancelProjectUserInvitation(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.cancelProjectUserInvitationRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Return code 200 if the cloud has access to the marketplace app
     * Check app access from cloud
     */
    async checkAccessRaw(requestParameters: CheckAccessRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling checkAccess.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{id}/check-access`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Return code 200 if the cloud has access to the marketplace app
     * Check app access from cloud
     */
    async checkAccess(id: number, initOverrides?: RequestInit): Promise<void> {
        await this.checkAccessRaw({ id: id }, initOverrides);
    }

    /**
     *                  The response gives you details about the right of the user or app, the scopes of the token and the usable scopes (scopes filtered by the right of the user).                 It works with user tokens, app tokens and ProjectAccessToken             
     * Check if the current token has access to the requested project
     */
    async checkProjectAccessRaw(requestParameters: CheckProjectAccessRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckProjectAccess>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling checkProjectAccess.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling checkProjectAccess.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}/check-access`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckProjectAccessFromJSON(jsonValue));
    }

    /**
     *                  The response gives you details about the right of the user or app, the scopes of the token and the usable scopes (scopes filtered by the right of the user).                 It works with user tokens, app tokens and ProjectAccessToken             
     * Check if the current token has access to the requested project
     */
    async checkProjectAccess(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<CheckProjectAccess> {
        const response = await this.checkProjectAccessRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Close a visa of a document  Required scopes: document:read
     * Close a visa of a document
     */
    async closeVisaRaw(requestParameters: CloseVisaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling closeVisa.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling closeVisa.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling closeVisa.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling closeVisa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/close`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Close a visa of a document  Required scopes: document:read
     * Close a visa of a document
     */
    async closeVisa(cloud_pk: number, document_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.closeVisaRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  If created classification already exists, it will not be duplicated and the previous one will be returned. You also can add a \'classification\' filter on this endpoint. By ex: /classification?name=\'untec\'. The name is case sensitive  Required scopes: ifc:write, model:write
     * Create a classification
     */
    async createClassificationRaw(requestParameters: CreateClassificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Classification>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createClassification.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createClassification.');
        }

        if (requestParameters.ClassificationRequest === null || requestParameters.ClassificationRequest === undefined) {
            throw new runtime.RequiredError('ClassificationRequest','Required parameter requestParameters.ClassificationRequest was null or undefined when calling createClassification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/classification`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ClassificationRequest.map(ClassificationRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationFromJSON));
    }

    /**
     *  Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we\'ll be 400 with the list of errors  If created classification already exists, it will not be duplicated and the previous one will be returned. You also can add a \'classification\' filter on this endpoint. By ex: /classification?name=\'untec\'. The name is case sensitive  Required scopes: ifc:write, model:write
     * Create a classification
     */
    async createClassification(cloud_pk: number, project_pk: number, ClassificationRequest: Array<ClassificationRequest>, initOverrides?: RequestInit): Promise<Array<Classification>> {
        const response = await this.createClassificationRaw({ cloud_pk: cloud_pk, project_pk: project_pk, ClassificationRequest: ClassificationRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a cloud  Required scopes: cloud:manage
     * Create a cloud
     */
    async createCloudRaw(requestParameters: CreateCloudRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Cloud>> {
        if (requestParameters.CloudRequest === null || requestParameters.CloudRequest === undefined) {
            throw new runtime.RequiredError('CloudRequest','Required parameter requestParameters.CloudRequest was null or undefined when calling createCloud.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudRequestToJSON(requestParameters.CloudRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudFromJSON(jsonValue));
    }

    /**
     * Create a cloud  Required scopes: cloud:manage
     * Create a cloud
     */
    async createCloud(CloudRequest: CloudRequest, initOverrides?: RequestInit): Promise<Cloud> {
        const response = await this.createCloudRaw({ CloudRequest: CloudRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a DMS structure of folders  Required scopes: org:manage
     * Create a complete DMS tree
     */
    async createDMSTreeRaw(requestParameters: CreateDMSTreeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Folder>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createDMSTree.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createDMSTree.');
        }

        if (requestParameters.WriteFolderRequest === null || requestParameters.WriteFolderRequest === undefined) {
            throw new runtime.RequiredError('WriteFolderRequest','Required parameter requestParameters.WriteFolderRequest was null or undefined when calling createDMSTree.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}/dms-tree`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.WriteFolderRequest.map(WriteFolderRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderFromJSON(jsonValue));
    }

    /**
     * Create a DMS structure of folders  Required scopes: org:manage
     * Create a complete DMS tree
     */
    async createDMSTree(cloud_pk: number, id: number, WriteFolderRequest: Array<WriteFolderRequest>, initOverrides?: RequestInit): Promise<Folder> {
        const response = await this.createDMSTreeRaw({ cloud_pk: cloud_pk, id: id, WriteFolderRequest: WriteFolderRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a project name \'Demo\' with an already processed model in it  Required scopes: cloud:manage
     * Create a Demo project in a cloud
     */
    async createDemoRaw(requestParameters: CreateDemoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createDemo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{id}/create-demo`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Create a project name \'Demo\' with an already processed model in it  Required scopes: cloud:manage
     * Create a Demo project in a cloud
     */
    async createDemo(id: number, initOverrides?: RequestInit): Promise<Project> {
        const response = await this.createDemoRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Create a document. If the document is one of {\'OBJ\', \'DWG\', \'IFC\', \'GLTF\', \'POINT_CLOUD\', \'DXF\'}, a model will be created and attached to this document  Required scopes: document:write
     * Create a document
     */
    async createDocumentRaw(requestParameters: CreateDocumentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createDocument.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createDocument.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createDocument.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling createDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.parent_id !== undefined) {
            formParams.append('parent_id', requestParameters.parent_id as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.file_name !== undefined) {
            formParams.append('file_name', requestParameters.file_name as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.model_source !== undefined) {
            formParams.append('model_source', requestParameters.model_source as any);
        }

        if (requestParameters.ifc_source !== undefined) {
            formParams.append('ifc_source', requestParameters.ifc_source as any);
        }

        if (requestParameters.successor_of !== undefined) {
            formParams.append('successor_of', requestParameters.successor_of as any);
        }

        if (requestParameters.process_hint !== undefined) {
            formParams.append('process_hint', requestParameters.process_hint as any);
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Create a document. If the document is one of {\'OBJ\', \'DWG\', \'IFC\', \'GLTF\', \'POINT_CLOUD\', \'DXF\'}, a model will be created and attached to this document  Required scopes: document:write
     * Create a document
     */
    async createDocument(cloud_pk: number, project_pk: number, name: string, file: Blob, parent_id?: number | null, file_name?: string, description?: string | null, model_source?: CreateDocumentModelSourceEnum, ifc_source?: CreateDocumentIfcSourceEnum, successor_of?: number, process_hint?: CreateDocumentProcessHintEnum, initOverrides?: RequestInit): Promise<Document> {
        const response = await this.createDocumentRaw({ cloud_pk: cloud_pk, project_pk: project_pk, name: name, file: file, parent_id: parent_id, file_name: file_name, description: description, model_source: model_source, ifc_source: ifc_source, successor_of: successor_of, process_hint: process_hint }, initOverrides);
        return await response.value();
    }

    /**
     * If the created folder have no parent, it will be put as a child of the default root folder of the project  Required scopes: document:write
     * Create a folder
     */
    async createFolderRaw(requestParameters: CreateFolderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FolderWithoutChildren>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createFolder.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createFolder.');
        }

        if (requestParameters.FolderWithoutChildrenRequest === null || requestParameters.FolderWithoutChildrenRequest === undefined) {
            throw new runtime.RequiredError('FolderWithoutChildrenRequest','Required parameter requestParameters.FolderWithoutChildrenRequest was null or undefined when calling createFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/folder`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolderWithoutChildrenRequestToJSON(requestParameters.FolderWithoutChildrenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderWithoutChildrenFromJSON(jsonValue));
    }

    /**
     * If the created folder have no parent, it will be put as a child of the default root folder of the project  Required scopes: document:write
     * Create a folder
     */
    async createFolder(cloud_pk: number, project_pk: number, FolderWithoutChildrenRequest: FolderWithoutChildrenRequest, initOverrides?: RequestInit): Promise<FolderWithoutChildren> {
        const response = await this.createFolderRaw({ cloud_pk: cloud_pk, project_pk: project_pk, FolderWithoutChildrenRequest: FolderWithoutChildrenRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a group. Must be an admin of the project  Required scopes: org:manage
     * Create a group
     */
    async createManageGroupRaw(requestParameters: CreateManageGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createManageGroup.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createManageGroup.');
        }

        if (requestParameters.GroupRequest === null || requestParameters.GroupRequest === undefined) {
            throw new runtime.RequiredError('GroupRequest','Required parameter requestParameters.GroupRequest was null or undefined when calling createManageGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/group`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupRequestToJSON(requestParameters.GroupRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Create a group. Must be an admin of the project  Required scopes: org:manage
     * Create a group
     */
    async createManageGroup(cloud_pk: number, project_pk: number, GroupRequest: GroupRequest, initOverrides?: RequestInit): Promise<Group> {
        const response = await this.createManageGroupRaw({ cloud_pk: cloud_pk, project_pk: project_pk, GroupRequest: GroupRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a project  Required scopes: org:manage
     * Create a project
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createProject.');
        }

        if (requestParameters.ProjectRequest === null || requestParameters.ProjectRequest === undefined) {
            throw new runtime.RequiredError('ProjectRequest','Required parameter requestParameters.ProjectRequest was null or undefined when calling createProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectRequestToJSON(requestParameters.ProjectRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Create a project  Required scopes: org:manage
     * Create a project
     */
    async createProject(cloud_pk: number, ProjectRequest: ProjectRequest, initOverrides?: RequestInit): Promise<Project> {
        const response = await this.createProjectRaw({ cloud_pk: cloud_pk, ProjectRequest: ProjectRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Tokens are valid 1 day by default  Required scopes: org:manage
     * Create a token for this project
     */
    async createProjectAccessTokenRaw(requestParameters: CreateProjectAccessTokenRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectAccessToken>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createProjectAccessToken.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createProjectAccessToken.');
        }

        if (requestParameters.ProjectAccessTokenRequest === null || requestParameters.ProjectAccessTokenRequest === undefined) {
            throw new runtime.RequiredError('ProjectAccessTokenRequest','Required parameter requestParameters.ProjectAccessTokenRequest was null or undefined when calling createProjectAccessToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/access-token`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectAccessTokenRequestToJSON(requestParameters.ProjectAccessTokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectAccessTokenFromJSON(jsonValue));
    }

    /**
     * Tokens are valid 1 day by default  Required scopes: org:manage
     * Create a token for this project
     */
    async createProjectAccessToken(cloud_pk: number, project_pk: number, ProjectAccessTokenRequest: ProjectAccessTokenRequest, initOverrides?: RequestInit): Promise<ProjectAccessToken> {
        const response = await this.createProjectAccessTokenRaw({ cloud_pk: cloud_pk, project_pk: project_pk, ProjectAccessTokenRequest: ProjectAccessTokenRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a tag  Required scopes: document:write
     * Create a tag
     */
    async createTagRaw(requestParameters: CreateTagRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createTag.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createTag.');
        }

        if (requestParameters.TagRequest === null || requestParameters.TagRequest === undefined) {
            throw new runtime.RequiredError('TagRequest','Required parameter requestParameters.TagRequest was null or undefined when calling createTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/tag`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagRequestToJSON(requestParameters.TagRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * Create a tag  Required scopes: document:write
     * Create a tag
     */
    async createTag(cloud_pk: number, project_pk: number, TagRequest: TagRequest, initOverrides?: RequestInit): Promise<Tag> {
        const response = await this.createTagRaw({ cloud_pk: cloud_pk, project_pk: project_pk, TagRequest: TagRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Add a validation to a visa  Required scopes: document:read
     * Add a validation to a visa
     */
    async createValidationRaw(requestParameters: CreateValidationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VisaValidation>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createValidation.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling createValidation.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createValidation.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling createValidation.');
        }

        if (requestParameters.VisaValidationRequest === null || requestParameters.VisaValidationRequest === undefined) {
            throw new runtime.RequiredError('VisaValidationRequest','Required parameter requestParameters.VisaValidationRequest was null or undefined when calling createValidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VisaValidationRequestToJSON(requestParameters.VisaValidationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaValidationFromJSON(jsonValue));
    }

    /**
     * Add a validation to a visa  Required scopes: document:read
     * Add a validation to a visa
     */
    async createValidation(cloud_pk: number, document_pk: number, project_pk: number, visa_pk: number, VisaValidationRequest: VisaValidationRequest, initOverrides?: RequestInit): Promise<VisaValidation> {
        const response = await this.createValidationRaw({ cloud_pk: cloud_pk, document_pk: document_pk, project_pk: project_pk, visa_pk: visa_pk, VisaValidationRequest: VisaValidationRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a visa  Required scopes: document:read
     * Create a visa
     */
    async createVisaRaw(requestParameters: CreateVisaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Visa>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createVisa.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling createVisa.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createVisa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VisaRequestToJSON(requestParameters.VisaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaFromJSON(jsonValue));
    }

    /**
     * Create a visa  Required scopes: document:read
     * Create a visa
     */
    async createVisa(cloud_pk: number, document_pk: number, project_pk: number, VisaRequest?: VisaRequest, initOverrides?: RequestInit): Promise<Visa> {
        const response = await this.createVisaRaw({ cloud_pk: cloud_pk, document_pk: document_pk, project_pk: project_pk, VisaRequest: VisaRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Add a comment  Required scopes: document:read
     * Add a comment
     */
    async createVisaCommentRaw(requestParameters: CreateVisaCommentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VisaComment>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling createVisaComment.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling createVisaComment.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling createVisaComment.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling createVisaComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VisaCommentRequestToJSON(requestParameters.VisaCommentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaCommentFromJSON(jsonValue));
    }

    /**
     * Add a comment  Required scopes: document:read
     * Add a comment
     */
    async createVisaComment(cloud_pk: number, document_pk: number, project_pk: number, visa_pk: number, VisaCommentRequest?: VisaCommentRequest, initOverrides?: RequestInit): Promise<VisaComment> {
        const response = await this.createVisaCommentRaw({ cloud_pk: cloud_pk, document_pk: document_pk, project_pk: project_pk, visa_pk: visa_pk, VisaCommentRequest: VisaCommentRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the document from the head version and all its history  Required scopes: document:write
     * Delete all document history
     */
    async deleteAllDocumentHistoryRaw(requestParameters: DeleteAllDocumentHistoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteAllDocumentHistory.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling deleteAllDocumentHistory.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteAllDocumentHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/delete`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the document from the head version and all its history  Required scopes: document:write
     * Delete all document history
     */
    async deleteAllDocumentHistory(cloud_pk: number, document_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAllDocumentHistoryRaw({ cloud_pk: cloud_pk, document_pk: document_pk, project_pk: project_pk }, initOverrides);
    }

    /**
     * All elements having this classification will lose it  Required scopes: ifc:write, model:write
     * Delete a classification
     */
    async deleteClassificationRaw(requestParameters: DeleteClassificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteClassification.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteClassification.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteClassification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/classification/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * All elements having this classification will lose it  Required scopes: ifc:write, model:write
     * Delete a classification
     */
    async deleteClassification(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteClassificationRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Delete a cloud  Required scopes: cloud:manage
     * Delete a cloud
     */
    async deleteCloudRaw(requestParameters: DeleteCloudRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCloud.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a cloud  Required scopes: cloud:manage
     * Delete a cloud
     */
    async deleteCloud(id: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCloudRaw({ id: id }, initOverrides);
    }

    /**
     * The user will also be removed from all the projects of the cloud  Required scopes: cloud:manage
     * Remove a user from a cloud
     */
    async deleteCloudUserRaw(requestParameters: DeleteCloudUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteCloudUser.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCloudUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/user/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The user will also be removed from all the projects of the cloud  Required scopes: cloud:manage
     * Remove a user from a cloud
     */
    async deleteCloudUser(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCloudUserRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
    }

    /**
     * Delete the document  Required scopes: document:write
     * Delete the document
     */
    async deleteDocumentRaw(requestParameters: DeleteDocumentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteDocument.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDocument.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the document  Required scopes: document:write
     * Delete the document
     */
    async deleteDocument(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteDocumentRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Delete a tag from a document  Required scopes: document:write
     * Delete a tag from a document
     */
    async deleteDocumentTagRaw(requestParameters: DeleteDocumentTagRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteDocumentTag.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling deleteDocumentTag.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDocumentTag.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteDocumentTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/tag/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a tag from a document  Required scopes: document:write
     * Delete a tag from a document
     */
    async deleteDocumentTag(cloud_pk: number, document_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteDocumentTagRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * All files and subfolders will be deleted too. If folder is a project\'s root folder, only children are deleted  Required scopes: document:write
     * Delete a folder
     */
    async deleteFolderRaw(requestParameters: DeleteFolderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteFolder.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFolder.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/folder/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * All files and subfolders will be deleted too. If folder is a project\'s root folder, only children are deleted  Required scopes: document:write
     * Delete a folder
     */
    async deleteFolder(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteFolderRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Delete a userproject from a group. Id is the userproject_id. Must be an admin of the project.  Required scopes: org:manage
     * Delete a user from a group
     */
    async deleteGroupMemberRaw(requestParameters: DeleteGroupMemberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteGroupMember.');
        }

        if (requestParameters.group_pk === null || requestParameters.group_pk === undefined) {
            throw new runtime.RequiredError('group_pk','Required parameter requestParameters.group_pk was null or undefined when calling deleteGroupMember.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGroupMember.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteGroupMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/group/{group_pk}/member/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"group_pk"}}`, encodeURIComponent(String(requestParameters.group_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a userproject from a group. Id is the userproject_id. Must be an admin of the project.  Required scopes: org:manage
     * Delete a user from a group
     */
    async deleteGroupMember(cloud_pk: number, group_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteGroupMemberRaw({ cloud_pk: cloud_pk, group_pk: group_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Delete a group. Must be an admin of the project  Required scopes: org:manage
     * Delete a group
     */
    async deleteManageGroupRaw(requestParameters: DeleteManageGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteManageGroup.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteManageGroup.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteManageGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/group/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a group. Must be an admin of the project  Required scopes: org:manage
     * Delete a group
     */
    async deleteManageGroup(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteManageGroupRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * It can take a long time to respond because we may need to delete all properties of all elements of all models in the project  Required scopes: org:manage
     * Delete a project
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteProject.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * It can take a long time to respond because we may need to delete all properties of all elements of all models in the project  Required scopes: org:manage
     * Delete a project
     */
    async deleteProject(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteProjectRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
    }

    /**
     * Deleting a token will revoke it  Required scopes: org:manage
     * Delete a token
     */
    async deleteProjectAccessTokenRaw(requestParameters: DeleteProjectAccessTokenRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteProjectAccessToken.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteProjectAccessToken.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling deleteProjectAccessToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deleting a token will revoke it  Required scopes: org:manage
     * Delete a token
     */
    async deleteProjectAccessToken(cloud_pk: number, project_pk: number, token: string, initOverrides?: RequestInit): Promise<void> {
        await this.deleteProjectAccessTokenRaw({ cloud_pk: cloud_pk, project_pk: project_pk, token: token }, initOverrides);
    }

    /**
     * Remove a user from a project  Required scopes: cloud:manage
     * Remove a user from a project
     */
    async deleteProjectUserRaw(requestParameters: DeleteProjectUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteProjectUser.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProjectUser.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteProjectUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/user/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a user from a project  Required scopes: cloud:manage
     * Remove a user from a project
     */
    async deleteProjectUser(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteProjectUserRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Delete the tag  Required scopes: document:write
     * Delete the tag
     */
    async deleteTagRaw(requestParameters: DeleteTagRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteTag.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTag.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/tag/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the tag  Required scopes: document:write
     * Delete the tag
     */
    async deleteTag(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteTagRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Remove a validation  Required scopes: document:read
     * Remove a validation
     */
    async deleteValidationRaw(requestParameters: DeleteValidationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteValidation.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling deleteValidation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteValidation.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteValidation.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling deleteValidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a validation  Required scopes: document:read
     * Remove a validation
     */
    async deleteValidation(cloud_pk: number, document_pk: number, id: number, project_pk: number, visa_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteValidationRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk, visa_pk: visa_pk }, initOverrides);
    }

    /**
     * Remove a visa  Required scopes: document:read
     * Remove a visa
     */
    async deleteVisaRaw(requestParameters: DeleteVisaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteVisa.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling deleteVisa.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVisa.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteVisa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a visa  Required scopes: document:read
     * Remove a visa
     */
    async deleteVisa(cloud_pk: number, document_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteVisaRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Remove a comment  Required scopes: document:read
     * Remove a comment
     */
    async deleteVisaCommentRaw(requestParameters: DeleteVisaCommentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling deleteVisaComment.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling deleteVisaComment.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVisaComment.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling deleteVisaComment.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling deleteVisaComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a comment  Required scopes: document:read
     * Remove a comment
     */
    async deleteVisaComment(cloud_pk: number, document_pk: number, id: number, project_pk: number, visa_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.deleteVisaCommentRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk, visa_pk: visa_pk }, initOverrides);
    }

    /**
     * The invitation status change to DENIED and the user is not added to the cloud. You can accept an invitation previously denied  Required scopes: user:write
     * Deny an invitation
     */
    async denyUserInvitationRaw(requestParameters: DenyUserInvitationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling denyUserInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/user/invitations/{id}/deny`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The invitation status change to DENIED and the user is not added to the cloud. You can accept an invitation previously denied  Required scopes: user:write
     * Deny an invitation
     */
    async denyUserInvitation(id: number, initOverrides?: RequestInit): Promise<void> {
        await this.denyUserInvitationRaw({ id: id }, initOverrides);
    }

    /**
     * Deny a validation  Required scopes: document:read
     * Deny a validation
     */
    async denyValidationRaw(requestParameters: DenyValidationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VisaAttachment>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling denyValidation.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling denyValidation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling denyValidation.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling denyValidation.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling denyValidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.attachment !== undefined) {
            formParams.append('attachment', requestParameters.attachment as any);
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/deny`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaAttachmentFromJSON(jsonValue));
    }

    /**
     * Deny a validation  Required scopes: document:read
     * Deny a validation
     */
    async denyValidation(cloud_pk: number, document_pk: number, id: number, project_pk: number, visa_pk: number, attachment?: Blob | null, initOverrides?: RequestInit): Promise<VisaAttachment> {
        const response = await this.denyValidationRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk, visa_pk: visa_pk, attachment: attachment }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a classification  Required scopes: ifc:read, model:read
     * Retrieve a classification
     */
    async getClassificationRaw(requestParameters: GetClassificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Classification>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getClassification.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClassification.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getClassification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/classification/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassificationFromJSON(jsonValue));
    }

    /**
     * Retrieve a classification  Required scopes: ifc:read, model:read
     * Retrieve a classification
     */
    async getClassification(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<Classification> {
        const response = await this.getClassificationRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all classifications of all models in the project  Required scopes: ifc:read, model:read
     * Retrieve all classifications
     */
    async getClassificationsRaw(requestParameters: GetClassificationsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Classification>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getClassifications.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getClassifications.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/classification`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationFromJSON));
    }

    /**
     * Retrieve all classifications of all models in the project  Required scopes: ifc:read, model:read
     * Retrieve all classifications
     */
    async getClassifications(cloud_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<Classification>> {
        const response = await this.getClassificationsRaw({ cloud_pk: cloud_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one cloud
     * Retrieve one cloud
     */
    async getCloudRaw(requestParameters: GetCloudRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Cloud>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCloud.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudFromJSON(jsonValue));
    }

    /**
     * Retrieve one cloud
     * Retrieve one cloud
     */
    async getCloud(id: number, initOverrides?: RequestInit): Promise<Cloud> {
        const response = await this.getCloudRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Returns app\'s invitations only  Required scopes: org:manage
     * Retrieve all pending invitations in the cloud
     */
    async getCloudInvitationsRaw(requestParameters: GetCloudInvitationsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CloudInvitation>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getCloudInvitations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/invitation`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CloudInvitationFromJSON));
    }

    /**
     * Returns app\'s invitations only  Required scopes: org:manage
     * Retrieve all pending invitations in the cloud
     */
    async getCloudInvitations(cloud_pk: number, initOverrides?: RequestInit): Promise<Array<CloudInvitation>> {
        const response = await this.getCloudInvitationsRaw({ cloud_pk: cloud_pk }, initOverrides);
        return await response.value();
    }

    /**
     *  Returns the sizes of the cloud in Bytes. The response fields depends on the role of the user. If the user is an admin, all field will be returned. If the user is a standard user, only `remaining_total_size` and `remaining_smart_data_size` will be set. If the call is made from an API access, role admin (100) will be returned and all fields will be set. The fields `managed by` indicate if the subscription for this cloud is an API subscription or a BIMData Platform subscription. If the cloud is managed by an API plan, the remaining sizes will take others organizations\'s clouds size into account
     * Get size of the cloud
     */
    async getCloudSizeRaw(requestParameters: GetCloudSizeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Size>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCloudSize.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{id}/size`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SizeFromJSON(jsonValue));
    }

    /**
     *  Returns the sizes of the cloud in Bytes. The response fields depends on the role of the user. If the user is an admin, all field will be returned. If the user is a standard user, only `remaining_total_size` and `remaining_smart_data_size` will be set. If the call is made from an API access, role admin (100) will be returned and all fields will be set. The fields `managed by` indicate if the subscription for this cloud is an API subscription or a BIMData Platform subscription. If the cloud is managed by an API plan, the remaining sizes will take others organizations\'s clouds size into account
     * Get size of the cloud
     */
    async getCloudSize(id: number, initOverrides?: RequestInit): Promise<Size> {
        const response = await this.getCloudSizeRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Only administrators can see a cloud member  Required scopes: cloud:read
     * Retrieve a user in a cloud
     */
    async getCloudUserRaw(requestParameters: GetCloudUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getCloudUser.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCloudUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/user/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Only administrators can see a cloud member  Required scopes: cloud:read
     * Retrieve a user in a cloud
     */
    async getCloudUser(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<User> {
        const response = await this.getCloudUserRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Only administrators can see cloud members.  Required scopes: cloud:read
     * Retrieve all users in a cloud, or a list with a filter by email
     */
    async getCloudUsersRaw(requestParameters: GetCloudUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<User>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getCloudUsers.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.email__contains !== undefined) {
            queryParameters['email__contains'] = requestParameters.email__contains;
        }

        if (requestParameters.email__endswith !== undefined) {
            queryParameters['email__endswith'] = requestParameters.email__endswith;
        }

        if (requestParameters.email__startswith !== undefined) {
            queryParameters['email__startswith'] = requestParameters.email__startswith;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/user`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Only administrators can see cloud members.  Required scopes: cloud:read
     * Retrieve all users in a cloud, or a list with a filter by email
     */
    async getCloudUsers(cloud_pk: number, email?: string, email__contains?: string, email__endswith?: string, email__startswith?: string, initOverrides?: RequestInit): Promise<Array<User>> {
        const response = await this.getCloudUsersRaw({ cloud_pk: cloud_pk, email: email, email__contains: email__contains, email__endswith: email__endswith, email__startswith: email__startswith }, initOverrides);
        return await response.value();
    }

    /**
     * Returns user\'s (or app\'s) clouds only
     * Retrieve all clouds
     */
    async getCloudsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Cloud>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CloudFromJSON));
    }

    /**
     * Returns user\'s (or app\'s) clouds only
     * Retrieve all clouds
     */
    async getClouds(initOverrides?: RequestInit): Promise<Array<Cloud>> {
        const response = await this.getCloudsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a document in the project  Required scopes: document:read
     * Retrieve a document
     */
    async getDocumentRaw(requestParameters: GetDocumentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getDocument.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDocument.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Retrieve a document in the project  Required scopes: document:read
     * Retrieve a document
     */
    async getDocument(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<Document> {
        const response = await this.getDocumentRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all documents from the header document history  Required scopes: document:read
     * Retrieve all document histories
     */
    async getDocumentHistoriesRaw(requestParameters: GetDocumentHistoriesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Document>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getDocumentHistories.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling getDocumentHistories.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getDocumentHistories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocumentFromJSON));
    }

    /**
     * Retrieve all documents from the header document history  Required scopes: document:read
     * Retrieve all document histories
     */
    async getDocumentHistories(cloud_pk: number, document_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<Document>> {
        const response = await this.getDocumentHistoriesRaw({ cloud_pk: cloud_pk, document_pk: document_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all documents in the project. Filters are case insentive. Search filter only works if AI features are enabled.  Required scopes: document:read
     * Retrieve all documents
     */
    async getDocumentsRaw(requestParameters: GetDocumentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Document>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getDocuments.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getDocuments.');
        }

        const queryParameters: any = {};

        if (requestParameters.created_after !== undefined) {
            queryParameters['created_after'] = (requestParameters.created_after as any).toISOString();
        }

        if (requestParameters.created_before !== undefined) {
            queryParameters['created_before'] = (requestParameters.created_before as any).toISOString();
        }

        if (requestParameters.creator_email !== undefined) {
            queryParameters['creator_email'] = requestParameters.creator_email;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.description__contains !== undefined) {
            queryParameters['description__contains'] = requestParameters.description__contains;
        }

        if (requestParameters.description__endswith !== undefined) {
            queryParameters['description__endswith'] = requestParameters.description__endswith;
        }

        if (requestParameters.description__startswith !== undefined) {
            queryParameters['description__startswith'] = requestParameters.description__startswith;
        }

        if (requestParameters.file_name !== undefined) {
            queryParameters['file_name'] = requestParameters.file_name;
        }

        if (requestParameters.file_name__contains !== undefined) {
            queryParameters['file_name__contains'] = requestParameters.file_name__contains;
        }

        if (requestParameters.file_name__endswith !== undefined) {
            queryParameters['file_name__endswith'] = requestParameters.file_name__endswith;
        }

        if (requestParameters.file_name__startswith !== undefined) {
            queryParameters['file_name__startswith'] = requestParameters.file_name__startswith;
        }

        if (requestParameters.has__visa !== undefined) {
            queryParameters['has__visa'] = requestParameters.has__visa;
        }

        if (requestParameters.id__in) {
            queryParameters['id__in'] = requestParameters.id__in.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.name__contains !== undefined) {
            queryParameters['name__contains'] = requestParameters.name__contains;
        }

        if (requestParameters.name__endswith !== undefined) {
            queryParameters['name__endswith'] = requestParameters.name__endswith;
        }

        if (requestParameters.name__startswith !== undefined) {
            queryParameters['name__startswith'] = requestParameters.name__startswith;
        }

        if (requestParameters.parent_id__in) {
            queryParameters['parent_id__in'] = requestParameters.parent_id__in.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.size_max !== undefined) {
            queryParameters['size_max'] = requestParameters.size_max;
        }

        if (requestParameters.size_min !== undefined) {
            queryParameters['size_min'] = requestParameters.size_min;
        }

        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.visa__creator_email !== undefined) {
            queryParameters['visa__creator_email'] = requestParameters.visa__creator_email;
        }

        if (requestParameters.visa__deadline_after !== undefined) {
            queryParameters['visa__deadline_after'] = (requestParameters.visa__deadline_after as any).toISOString().substr(0,10);
        }

        if (requestParameters.visa__deadline_before !== undefined) {
            queryParameters['visa__deadline_before'] = (requestParameters.visa__deadline_before as any).toISOString().substr(0,10);
        }

        if (requestParameters.visa__past__deadline !== undefined) {
            queryParameters['visa__past__deadline'] = requestParameters.visa__past__deadline;
        }

        if (requestParameters.visa__past__deadline__strict !== undefined) {
            queryParameters['visa__past__deadline__strict'] = requestParameters.visa__past__deadline__strict;
        }

        if (requestParameters.visa__status !== undefined) {
            queryParameters['visa__status'] = requestParameters.visa__status;
        }

        if (requestParameters.visa__status__strict !== undefined) {
            queryParameters['visa__status__strict'] = requestParameters.visa__status__strict;
        }

        if (requestParameters.visa__validation_status !== undefined) {
            queryParameters['visa__validation_status'] = requestParameters.visa__validation_status;
        }

        if (requestParameters.visa__validator_email !== undefined) {
            queryParameters['visa__validator_email'] = requestParameters.visa__validator_email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocumentFromJSON));
    }

    /**
     * Retrieve all documents in the project. Filters are case insentive. Search filter only works if AI features are enabled.  Required scopes: document:read
     * Retrieve all documents
     */
    async getDocuments(cloud_pk: number, project_pk: number, created_after?: Date, created_before?: Date, creator_email?: string, description?: string, description__contains?: string, description__endswith?: string, description__startswith?: string, file_name?: string, file_name__contains?: string, file_name__endswith?: string, file_name__startswith?: string, has__visa?: boolean, id__in?: Array<number>, name?: string, name__contains?: string, name__endswith?: string, name__startswith?: string, parent_id__in?: Array<number>, search?: string, size_max?: number | null, size_min?: number | null, tags?: Array<string>, text?: boolean, visa__creator_email?: string, visa__deadline_after?: Date, visa__deadline_before?: Date, visa__past__deadline?: boolean, visa__past__deadline__strict?: boolean, visa__status?: GetDocumentsVisaStatusEnum, visa__status__strict?: GetDocumentsVisaStatusStrictEnum, visa__validation_status?: string, visa__validator_email?: string, initOverrides?: RequestInit): Promise<Array<Document>> {
        const response = await this.getDocumentsRaw({ cloud_pk: cloud_pk, project_pk: project_pk, created_after: created_after, created_before: created_before, creator_email: creator_email, description: description, description__contains: description__contains, description__endswith: description__endswith, description__startswith: description__startswith, file_name: file_name, file_name__contains: file_name__contains, file_name__endswith: file_name__endswith, file_name__startswith: file_name__startswith, has__visa: has__visa, id__in: id__in, name: name, name__contains: name__contains, name__endswith: name__endswith, name__startswith: name__startswith, parent_id__in: parent_id__in, search: search, size_max: size_max, size_min: size_min, tags: tags, text: text, visa__creator_email: visa__creator_email, visa__deadline_after: visa__deadline_after, visa__deadline_before: visa__deadline_before, visa__past__deadline: visa__past__deadline, visa__past__deadline__strict: visa__past__deadline__strict, visa__status: visa__status, visa__status__strict: visa__status__strict, visa__validation_status: visa__validation_status, visa__validator_email: visa__validator_email }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a folder  Required scopes: document:read
     * Retrieve a folder
     */
    async getFolderRaw(requestParameters: GetFolderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FolderWithoutChildren>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getFolder.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFolder.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/folder/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderWithoutChildrenFromJSON(jsonValue));
    }

    /**
     * Retrieve a folder  Required scopes: document:read
     * Retrieve a folder
     */
    async getFolder(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<FolderWithoutChildren> {
        const response = await this.getFolderRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Get all documents of a folder  Required scopes: document:read
     * Get all documents of a folder
     */
    async getFolderDocumentsRaw(requestParameters: GetFolderDocumentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Document>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getFolderDocuments.');
        }

        if (requestParameters.folder_pk === null || requestParameters.folder_pk === undefined) {
            throw new runtime.RequiredError('folder_pk','Required parameter requestParameters.folder_pk was null or undefined when calling getFolderDocuments.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getFolderDocuments.');
        }

        const queryParameters: any = {};

        if (requestParameters.created_after !== undefined) {
            queryParameters['created_after'] = (requestParameters.created_after as any).toISOString();
        }

        if (requestParameters.created_before !== undefined) {
            queryParameters['created_before'] = (requestParameters.created_before as any).toISOString();
        }

        if (requestParameters.creator_email !== undefined) {
            queryParameters['creator_email'] = requestParameters.creator_email;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.description__contains !== undefined) {
            queryParameters['description__contains'] = requestParameters.description__contains;
        }

        if (requestParameters.description__endswith !== undefined) {
            queryParameters['description__endswith'] = requestParameters.description__endswith;
        }

        if (requestParameters.description__startswith !== undefined) {
            queryParameters['description__startswith'] = requestParameters.description__startswith;
        }

        if (requestParameters.file_name !== undefined) {
            queryParameters['file_name'] = requestParameters.file_name;
        }

        if (requestParameters.file_name__contains !== undefined) {
            queryParameters['file_name__contains'] = requestParameters.file_name__contains;
        }

        if (requestParameters.file_name__endswith !== undefined) {
            queryParameters['file_name__endswith'] = requestParameters.file_name__endswith;
        }

        if (requestParameters.file_name__startswith !== undefined) {
            queryParameters['file_name__startswith'] = requestParameters.file_name__startswith;
        }

        if (requestParameters.has__visa !== undefined) {
            queryParameters['has__visa'] = requestParameters.has__visa;
        }

        if (requestParameters.id__in) {
            queryParameters['id__in'] = requestParameters.id__in.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.name__contains !== undefined) {
            queryParameters['name__contains'] = requestParameters.name__contains;
        }

        if (requestParameters.name__endswith !== undefined) {
            queryParameters['name__endswith'] = requestParameters.name__endswith;
        }

        if (requestParameters.name__startswith !== undefined) {
            queryParameters['name__startswith'] = requestParameters.name__startswith;
        }

        if (requestParameters.parent_id__in) {
            queryParameters['parent_id__in'] = requestParameters.parent_id__in.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.size_max !== undefined) {
            queryParameters['size_max'] = requestParameters.size_max;
        }

        if (requestParameters.size_min !== undefined) {
            queryParameters['size_min'] = requestParameters.size_min;
        }

        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.visa__creator_email !== undefined) {
            queryParameters['visa__creator_email'] = requestParameters.visa__creator_email;
        }

        if (requestParameters.visa__deadline_after !== undefined) {
            queryParameters['visa__deadline_after'] = (requestParameters.visa__deadline_after as any).toISOString().substr(0,10);
        }

        if (requestParameters.visa__deadline_before !== undefined) {
            queryParameters['visa__deadline_before'] = (requestParameters.visa__deadline_before as any).toISOString().substr(0,10);
        }

        if (requestParameters.visa__past__deadline !== undefined) {
            queryParameters['visa__past__deadline'] = requestParameters.visa__past__deadline;
        }

        if (requestParameters.visa__past__deadline__strict !== undefined) {
            queryParameters['visa__past__deadline__strict'] = requestParameters.visa__past__deadline__strict;
        }

        if (requestParameters.visa__status !== undefined) {
            queryParameters['visa__status'] = requestParameters.visa__status;
        }

        if (requestParameters.visa__status__strict !== undefined) {
            queryParameters['visa__status__strict'] = requestParameters.visa__status__strict;
        }

        if (requestParameters.visa__validation_status !== undefined) {
            queryParameters['visa__validation_status'] = requestParameters.visa__validation_status;
        }

        if (requestParameters.visa__validator_email !== undefined) {
            queryParameters['visa__validator_email'] = requestParameters.visa__validator_email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/document`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"folder_pk"}}`, encodeURIComponent(String(requestParameters.folder_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocumentFromJSON));
    }

    /**
     * Get all documents of a folder  Required scopes: document:read
     * Get all documents of a folder
     */
    async getFolderDocuments(cloud_pk: number, folder_pk: number, project_pk: number, created_after?: Date, created_before?: Date, creator_email?: string, description?: string, description__contains?: string, description__endswith?: string, description__startswith?: string, file_name?: string, file_name__contains?: string, file_name__endswith?: string, file_name__startswith?: string, has__visa?: boolean, id__in?: Array<number>, name?: string, name__contains?: string, name__endswith?: string, name__startswith?: string, parent_id__in?: Array<number>, search?: string, size_max?: number | null, size_min?: number | null, tags?: Array<string>, visa__creator_email?: string, visa__deadline_after?: Date, visa__deadline_before?: Date, visa__past__deadline?: boolean, visa__past__deadline__strict?: boolean, visa__status?: GetFolderDocumentsVisaStatusEnum, visa__status__strict?: GetFolderDocumentsVisaStatusStrictEnum, visa__validation_status?: string, visa__validator_email?: string, initOverrides?: RequestInit): Promise<Array<Document>> {
        const response = await this.getFolderDocumentsRaw({ cloud_pk: cloud_pk, folder_pk: folder_pk, project_pk: project_pk, created_after: created_after, created_before: created_before, creator_email: creator_email, description: description, description__contains: description__contains, description__endswith: description__endswith, description__startswith: description__startswith, file_name: file_name, file_name__contains: file_name__contains, file_name__endswith: file_name__endswith, file_name__startswith: file_name__startswith, has__visa: has__visa, id__in: id__in, name: name, name__contains: name__contains, name__endswith: name__endswith, name__startswith: name__startswith, parent_id__in: parent_id__in, search: search, size_max: size_max, size_min: size_min, tags: tags, visa__creator_email: visa__creator_email, visa__deadline_after: visa__deadline_after, visa__deadline_before: visa__deadline_before, visa__past__deadline: visa__past__deadline, visa__past__deadline__strict: visa__past__deadline__strict, visa__status: visa__status, visa__status__strict: visa__status__strict, visa__validation_status: visa__validation_status, visa__validator_email: visa__validator_email }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all users in a project with the permission on the folder  Required scopes: document:read
     * Retrieve all users in a project with the permission on the folder
     */
    async getFolderProjectUsersRaw(requestParameters: GetFolderProjectUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<FolderUserProject>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getFolderProjectUsers.');
        }

        if (requestParameters.folder_pk === null || requestParameters.folder_pk === undefined) {
            throw new runtime.RequiredError('folder_pk','Required parameter requestParameters.folder_pk was null or undefined when calling getFolderProjectUsers.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getFolderProjectUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/user`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"folder_pk"}}`, encodeURIComponent(String(requestParameters.folder_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FolderUserProjectFromJSON));
    }

    /**
     * Retrieve all users in a project with the permission on the folder  Required scopes: document:read
     * Retrieve all users in a project with the permission on the folder
     */
    async getFolderProjectUsers(cloud_pk: number, folder_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<FolderUserProject>> {
        const response = await this.getFolderProjectUsersRaw({ cloud_pk: cloud_pk, folder_pk: folder_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all folders in the project. This is an array of folder. If you want to get the tree of all folders, see getProjectTree  Required scopes: document:read
     * Retrieve all folders
     */
    async getFoldersRaw(requestParameters: GetFoldersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<FolderWithoutChildren>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getFolders.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getFolders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/folder`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FolderWithoutChildrenFromJSON));
    }

    /**
     * Retrieve all folders in the project. This is an array of folder. If you want to get the tree of all folders, see getProjectTree  Required scopes: document:read
     * Retrieve all folders
     */
    async getFolders(cloud_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<FolderWithoutChildren>> {
        const response = await this.getFoldersRaw({ cloud_pk: cloud_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a group to which the user belongs  Required scopes: document:read
     * Retrieve a group
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getGroup.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroup.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/me/group/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Retrieve a group to which the user belongs  Required scopes: document:read
     * Retrieve a group
     */
    async getGroup(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<Group> {
        const response = await this.getGroupRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all groups to which the user belongs  Required scopes: document:read
     * Retrieve all groups
     */
    async getGroupsRaw(requestParameters: GetGroupsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Group>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getGroups.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/me/group`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupFromJSON));
    }

    /**
     * Retrieves all groups to which the user belongs  Required scopes: document:read
     * Retrieve all groups
     */
    async getGroups(cloud_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<Group>> {
        const response = await this.getGroupsRaw({ cloud_pk: cloud_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all logs of the project  Required scopes: logs:read
     * Retrieve all logs of the project
     */
    async getLogsRaw(requestParameters: GetLogsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<LogEntry>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getLogs.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getLogs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/logs`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LogEntryFromJSON));
    }

    /**
     * Retrieve all logs of the project  Required scopes: logs:read
     * Retrieve all logs of the project
     */
    async getLogs(cloud_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<LogEntry>> {
        const response = await this.getLogsRaw({ cloud_pk: cloud_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a group. Must be an admin of the project  Required scopes: org:manage
     * Retrieve a group
     */
    async getManageGroupRaw(requestParameters: GetManageGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getManageGroup.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getManageGroup.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getManageGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/group/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Retrieve a group. Must be an admin of the project  Required scopes: org:manage
     * Retrieve a group
     */
    async getManageGroup(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<Group> {
        const response = await this.getManageGroupRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all groups in the project. Must be an admin of the project  Required scopes: org:manage
     * Retrieve all groups
     */
    async getManageGroupsRaw(requestParameters: GetManageGroupsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Group>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getManageGroups.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getManageGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/group`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupFromJSON));
    }

    /**
     * Retrieve all groups in the project. Must be an admin of the project  Required scopes: org:manage
     * Retrieve all groups
     */
    async getManageGroups(cloud_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<Group>> {
        const response = await this.getManageGroupsRaw({ cloud_pk: cloud_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a project
     * Retrieve a project
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProject.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Retrieve a project
     * Retrieve a project
     */
    async getProject(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<Project> {
        const response = await this.getProjectRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve one token created for this project  Required scopes: org:manage
     * Retrieve one token created for this project
     */
    async getProjectAccessTokenRaw(requestParameters: GetProjectAccessTokenRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectAccessToken>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjectAccessToken.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getProjectAccessToken.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling getProjectAccessToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectAccessTokenFromJSON(jsonValue));
    }

    /**
     * Retrieve one token created for this project  Required scopes: org:manage
     * Retrieve one token created for this project
     */
    async getProjectAccessToken(cloud_pk: number, project_pk: number, token: string, initOverrides?: RequestInit): Promise<ProjectAccessToken> {
        const response = await this.getProjectAccessTokenRaw({ cloud_pk: cloud_pk, project_pk: project_pk, token: token }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all tokens created for this project  Required scopes: org:manage
     * Retrieve all tokens created for this project
     */
    async getProjectAccessTokensRaw(requestParameters: GetProjectAccessTokensRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectAccessToken>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjectAccessTokens.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getProjectAccessTokens.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/access-token`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectAccessTokenFromJSON));
    }

    /**
     * Retrieve all tokens created for this project  Required scopes: org:manage
     * Retrieve all tokens created for this project
     */
    async getProjectAccessTokens(cloud_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<ProjectAccessToken>> {
        const response = await this.getProjectAccessTokensRaw({ cloud_pk: cloud_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * List visas created by user in a project  Required scopes: document:read
     * List visas created by user
     */
    async getProjectCreatorVisasRaw(requestParameters: GetProjectCreatorVisasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<VisaWithDocument>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjectCreatorVisas.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getProjectCreatorVisas.');
        }

        const queryParameters: any = {};

        if (requestParameters.deadline_after !== undefined) {
            queryParameters['deadline_after'] = (requestParameters.deadline_after as any).toISOString().substr(0,10);
        }

        if (requestParameters.deadline_before !== undefined) {
            queryParameters['deadline_before'] = (requestParameters.deadline_before as any).toISOString().substr(0,10);
        }

        if (requestParameters.has__past_deadline !== undefined) {
            queryParameters['has__past_deadline'] = requestParameters.has__past_deadline;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.validation_status !== undefined) {
            queryParameters['validation_status'] = requestParameters.validation_status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/me/visa/creator`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VisaWithDocumentFromJSON));
    }

    /**
     * List visas created by user in a project  Required scopes: document:read
     * List visas created by user
     */
    async getProjectCreatorVisas(cloud_pk: number, project_pk: number, deadline_after?: Date, deadline_before?: Date, has__past_deadline?: boolean, status?: GetProjectCreatorVisasStatusEnum, validation_status?: string, initOverrides?: RequestInit): Promise<Array<VisaWithDocument>> {
        const response = await this.getProjectCreatorVisasRaw({ cloud_pk: cloud_pk, project_pk: project_pk, deadline_after: deadline_after, deadline_before: deadline_before, has__past_deadline: has__past_deadline, status: status, validation_status: validation_status }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the complete DMS tree (all folders and all documents in the project)
     * Retrieve the complete DMS tree
     */
    async getProjectDMSTreeRaw(requestParameters: GetProjectDMSTreeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Folder>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjectDMSTree.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProjectDMSTree.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}/dms-tree`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderFromJSON(jsonValue));
    }

    /**
     * Retrieve the complete DMS tree (all folders and all documents in the project)
     * Retrieve the complete DMS tree
     */
    async getProjectDMSTree(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<Folder> {
        const response = await this.getProjectDMSTreeRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve folder tree of the project
     * Retrieve folder tree of the project
     */
    async getProjectFolderTreeRaw(requestParameters: GetProjectFolderTreeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<FolderTree>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjectFolderTree.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProjectFolderTree.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}/folder-tree`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FolderTreeFromJSON));
    }

    /**
     * Retrieve folder tree of the project
     * Retrieve folder tree of the project
     */
    async getProjectFolderTree(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<Array<FolderTree>> {
        const response = await this.getProjectFolderTreeRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Returns app\'s invitations only  Required scopes: org:manage
     * Retrieve all pending invitations in the project
     */
    async getProjectInvitationsRaw(requestParameters: GetProjectInvitationsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectInvitation>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjectInvitations.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getProjectInvitations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/invitation`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectInvitationFromJSON));
    }

    /**
     * Returns app\'s invitations only  Required scopes: org:manage
     * Retrieve all pending invitations in the project
     */
    async getProjectInvitations(cloud_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<ProjectInvitation>> {
        const response = await this.getProjectInvitationsRaw({ cloud_pk: cloud_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Returns the size of the project in Bytes
     * Get size of all model files in the project
     */
    async getProjectSizeRaw(requestParameters: GetProjectSizeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectSize>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjectSize.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProjectSize.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}/size`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectSizeFromJSON(jsonValue));
    }

    /**
     * Returns the size of the project in Bytes
     * Get size of all model files in the project
     */
    async getProjectSize(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<ProjectSize> {
        const response = await this.getProjectSizeRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the complete DMS tree (all folders and all documents in the project). DEPRECATED: renamed to getProjectDMSTree
     * Retrieve the complete DMS tree
     */
    async getProjectTreeRaw(requestParameters: GetProjectTreeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Folder>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjectTree.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProjectTree.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}/tree`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderFromJSON(jsonValue));
    }

    /**
     * Retrieve the complete DMS tree (all folders and all documents in the project). DEPRECATED: renamed to getProjectDMSTree
     * Retrieve the complete DMS tree
     */
    async getProjectTree(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<Folder> {
        const response = await this.getProjectTreeRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Each member of a project can see other members of the project  Required scopes: cloud:read, bcf:read
     * Retrieve all users in a project, or a list with a filter by email
     */
    async getProjectUsersRaw(requestParameters: GetProjectUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserProject>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjectUsers.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getProjectUsers.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.email__contains !== undefined) {
            queryParameters['email__contains'] = requestParameters.email__contains;
        }

        if (requestParameters.email__endswith !== undefined) {
            queryParameters['email__endswith'] = requestParameters.email__endswith;
        }

        if (requestParameters.email__startswith !== undefined) {
            queryParameters['email__startswith'] = requestParameters.email__startswith;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/user`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserProjectFromJSON));
    }

    /**
     * Each member of a project can see other members of the project  Required scopes: cloud:read, bcf:read
     * Retrieve all users in a project, or a list with a filter by email
     */
    async getProjectUsers(cloud_pk: number, project_pk: number, email?: string, email__contains?: string, email__endswith?: string, email__startswith?: string, initOverrides?: RequestInit): Promise<Array<UserProject>> {
        const response = await this.getProjectUsersRaw({ cloud_pk: cloud_pk, project_pk: project_pk, email: email, email__contains: email__contains, email__endswith: email__endswith, email__startswith: email__startswith }, initOverrides);
        return await response.value();
    }

    /**
     * List visas where user is a validator in a project  Required scopes: document:read
     * List visas where user is a validator
     */
    async getProjectValidatorVisasRaw(requestParameters: GetProjectValidatorVisasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<VisaWithDocument>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjectValidatorVisas.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getProjectValidatorVisas.');
        }

        const queryParameters: any = {};

        if (requestParameters.deadline_after !== undefined) {
            queryParameters['deadline_after'] = (requestParameters.deadline_after as any).toISOString().substr(0,10);
        }

        if (requestParameters.deadline_before !== undefined) {
            queryParameters['deadline_before'] = (requestParameters.deadline_before as any).toISOString().substr(0,10);
        }

        if (requestParameters.has__past_deadline !== undefined) {
            queryParameters['has__past_deadline'] = requestParameters.has__past_deadline;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.validation_status !== undefined) {
            queryParameters['validation_status'] = requestParameters.validation_status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/me/visa/validator`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VisaWithDocumentFromJSON));
    }

    /**
     * List visas where user is a validator in a project  Required scopes: document:read
     * List visas where user is a validator
     */
    async getProjectValidatorVisas(cloud_pk: number, project_pk: number, deadline_after?: Date, deadline_before?: Date, has__past_deadline?: boolean, status?: GetProjectValidatorVisasStatusEnum, validation_status?: string, initOverrides?: RequestInit): Promise<Array<VisaWithDocument>> {
        const response = await this.getProjectValidatorVisasRaw({ cloud_pk: cloud_pk, project_pk: project_pk, deadline_after: deadline_after, deadline_before: deadline_before, has__past_deadline: has__past_deadline, status: status, validation_status: validation_status }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all projects of the cloud. All project are shown at the same level. see #getProjectSubTree
     * Retrieve all projects
     */
    async getProjectsRaw(requestParameters: GetProjectsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Project>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getProjects.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectFromJSON));
    }

    /**
     * Retrieve all projects of the cloud. All project are shown at the same level. see #getProjectSubTree
     * Retrieve all projects
     */
    async getProjects(cloud_pk: number, initOverrides?: RequestInit): Promise<Array<Project>> {
        const response = await this.getProjectsRaw({ cloud_pk: cloud_pk }, initOverrides);
        return await response.value();
    }

    /**
     * List user\'s projects of all clouds  Required scopes: user:read
     * List current user\'s projects
     */
    async getSelfProjectsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Project>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/user/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectFromJSON));
    }

    /**
     * List user\'s projects of all clouds  Required scopes: user:read
     * List current user\'s projects
     */
    async getSelfProjects(initOverrides?: RequestInit): Promise<Array<Project>> {
        const response = await this.getSelfProjectsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get info about the current user  Required scopes: user:read
     * Get info about the current user
     */
    async getSelfUserRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<SelfUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SelfUserFromJSON(jsonValue));
    }

    /**
     * Get info about the current user  Required scopes: user:read
     * Get info about the current user
     */
    async getSelfUser(initOverrides?: RequestInit): Promise<SelfUser> {
        const response = await this.getSelfUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a tag in the project  Required scopes: document:read
     * Retrieve a tag
     */
    async getTagRaw(requestParameters: GetTagRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getTag.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTag.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/tag/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * Retrieve a tag in the project  Required scopes: document:read
     * Retrieve a tag
     */
    async getTag(cloud_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<Tag> {
        const response = await this.getTagRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all tags in the project  Required scopes: document:read
     * Retrieve all tags
     */
    async getTagsRaw(requestParameters: GetTagsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Tag>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getTags.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getTags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/tag`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagFromJSON));
    }

    /**
     * Retrieve all tags in the project  Required scopes: document:read
     * Retrieve all tags
     */
    async getTags(cloud_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<Tag>> {
        const response = await this.getTagsRaw({ cloud_pk: cloud_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the invitation  Required scopes: user:read
     * Retrieve an invitation
     */
    async getUserInvitationRaw(requestParameters: GetUserInvitationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserInvitation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/user/invitations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInvitationFromJSON(jsonValue));
    }

    /**
     * Retrieve the invitation  Required scopes: user:read
     * Retrieve an invitation
     */
    async getUserInvitation(id: number, initOverrides?: RequestInit): Promise<UserInvitation> {
        const response = await this.getUserInvitationRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * List all user\'s invitations  Required scopes: user:read
     * List user\'s invitations
     */
    async getUserInvitationsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserInvitation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/user/invitations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserInvitationFromJSON));
    }

    /**
     * List all user\'s invitations  Required scopes: user:read
     * List user\'s invitations
     */
    async getUserInvitations(initOverrides?: RequestInit): Promise<Array<UserInvitation>> {
        const response = await this.getUserInvitationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a validation to a visa  Required scopes: document:read
     * Retrieve a validation to a visa
     */
    async getValidationRaw(requestParameters: GetValidationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VisaValidation>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getValidation.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling getValidation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getValidation.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getValidation.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling getValidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaValidationFromJSON(jsonValue));
    }

    /**
     * Retrieve a validation to a visa  Required scopes: document:read
     * Retrieve a validation to a visa
     */
    async getValidation(cloud_pk: number, document_pk: number, id: number, project_pk: number, visa_pk: number, initOverrides?: RequestInit): Promise<VisaValidation> {
        const response = await this.getValidationRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk, visa_pk: visa_pk }, initOverrides);
        return await response.value();
    }

    /**
     * List all validations to a visa  Required scopes: document:read
     * List all validations to a visa
     */
    async getValidationsRaw(requestParameters: GetValidationsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<VisaValidation>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getValidations.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling getValidations.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getValidations.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling getValidations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VisaValidationFromJSON));
    }

    /**
     * List all validations to a visa  Required scopes: document:read
     * List all validations to a visa
     */
    async getValidations(cloud_pk: number, document_pk: number, project_pk: number, visa_pk: number, initOverrides?: RequestInit): Promise<Array<VisaValidation>> {
        const response = await this.getValidationsRaw({ cloud_pk: cloud_pk, document_pk: document_pk, project_pk: project_pk, visa_pk: visa_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a unique visa of a document  Required scopes: document:read
     * Retrieve a visa of a document
     */
    async getVisaRaw(requestParameters: GetVisaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Visa>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getVisa.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling getVisa.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVisa.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getVisa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaFromJSON(jsonValue));
    }

    /**
     * Retrieve a unique visa of a document  Required scopes: document:read
     * Retrieve a visa of a document
     */
    async getVisa(cloud_pk: number, document_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<Visa> {
        const response = await this.getVisaRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a comment  Required scopes: document:read
     * Retrieve a comment
     */
    async getVisaCommentRaw(requestParameters: GetVisaCommentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VisaComment>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getVisaComment.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling getVisaComment.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getVisaComment.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getVisaComment.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling getVisaComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaCommentFromJSON(jsonValue));
    }

    /**
     * Retrieve a comment  Required scopes: document:read
     * Retrieve a comment
     */
    async getVisaComment(cloud_pk: number, document_pk: number, id: number, project_pk: number, visa_pk: number, initOverrides?: RequestInit): Promise<VisaComment> {
        const response = await this.getVisaCommentRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk, visa_pk: visa_pk }, initOverrides);
        return await response.value();
    }

    /**
     * List all comment of a visa  Required scopes: document:read
     * List all comment of a visa
     */
    async getVisaCommentsRaw(requestParameters: GetVisaCommentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<VisaComment>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getVisaComments.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling getVisaComments.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getVisaComments.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling getVisaComments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VisaCommentFromJSON));
    }

    /**
     * List all comment of a visa  Required scopes: document:read
     * List all comment of a visa
     */
    async getVisaComments(cloud_pk: number, document_pk: number, project_pk: number, visa_pk: number, initOverrides?: RequestInit): Promise<Array<VisaComment>> {
        const response = await this.getVisaCommentsRaw({ cloud_pk: cloud_pk, document_pk: document_pk, project_pk: project_pk, visa_pk: visa_pk }, initOverrides);
        return await response.value();
    }

    /**
     * List all visas of a document  Required scopes: document:read
     * List all visas of a document
     */
    async getVisasRaw(requestParameters: GetVisasRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Visa>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling getVisas.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling getVisas.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling getVisas.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VisaFromJSON));
    }

    /**
     * List all visas of a document  Required scopes: document:read
     * List all visas of a document
     */
    async getVisas(cloud_pk: number, document_pk: number, project_pk: number, initOverrides?: RequestInit): Promise<Array<Visa>> {
        const response = await this.getVisasRaw({ cloud_pk: cloud_pk, document_pk: document_pk, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Import dms tree and/or the groups from a project  Required scopes: org:manage
     * Import data from a project
     */
    async importFromProjectRaw(requestParameters: ImportFromProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling importFromProject.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling importFromProject.');
        }

        if (requestParameters.ProjectImportRequest === null || requestParameters.ProjectImportRequest === undefined) {
            throw new runtime.RequiredError('ProjectImportRequest','Required parameter requestParameters.ProjectImportRequest was null or undefined when calling importFromProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}/import_from`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectImportRequestToJSON(requestParameters.ProjectImportRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Import dms tree and/or the groups from a project  Required scopes: org:manage
     * Import data from a project
     */
    async importFromProject(cloud_pk: number, id: number, ProjectImportRequest: ProjectImportRequest, initOverrides?: RequestInit): Promise<Project> {
        const response = await this.importFromProjectRaw({ cloud_pk: cloud_pk, id: id, ProjectImportRequest: ProjectImportRequest }, initOverrides);
        return await response.value();
    }

    /**
     * DEPECRATED: Use ImportFromProject instead  Required scopes: org:manage
     * Import a group from another project
     */
    async importManageGroupRaw(requestParameters: ImportManageGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Group>>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling importManageGroup.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling importManageGroup.');
        }

        if (requestParameters.ImportGroupRequest === null || requestParameters.ImportGroupRequest === undefined) {
            throw new runtime.RequiredError('ImportGroupRequest','Required parameter requestParameters.ImportGroupRequest was null or undefined when calling importManageGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/group/import`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportGroupRequestToJSON(requestParameters.ImportGroupRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupFromJSON));
    }

    /**
     * DEPECRATED: Use ImportFromProject instead  Required scopes: org:manage
     * Import a group from another project
     */
    async importManageGroup(cloud_pk: number, project_pk: number, ImportGroupRequest: ImportGroupRequest, initOverrides?: RequestInit): Promise<Array<Group>> {
        const response = await this.importManageGroupRaw({ cloud_pk: cloud_pk, project_pk: project_pk, ImportGroupRequest: ImportGroupRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Invite a cloud member. To invite in a project, see inviteProjectUser. You can\'t invite a user already in the cloud. Create multiple invitations of the same email in the same cloud will generate multiple invitation emails but not multiple invitation object  Required scopes: org:manage
     * Invite a cloud member
     */
    async inviteCloudUserRaw(requestParameters: InviteCloudUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CloudInvitation>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling inviteCloudUser.');
        }

        if (requestParameters.CloudInvitationRequest === null || requestParameters.CloudInvitationRequest === undefined) {
            throw new runtime.RequiredError('CloudInvitationRequest','Required parameter requestParameters.CloudInvitationRequest was null or undefined when calling inviteCloudUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/invitation`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudInvitationRequestToJSON(requestParameters.CloudInvitationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudInvitationFromJSON(jsonValue));
    }

    /**
     * Invite a cloud member. To invite in a project, see inviteProjectUser. You can\'t invite a user already in the cloud. Create multiple invitations of the same email in the same cloud will generate multiple invitation emails but not multiple invitation object  Required scopes: org:manage
     * Invite a cloud member
     */
    async inviteCloudUser(cloud_pk: number, CloudInvitationRequest: CloudInvitationRequest, initOverrides?: RequestInit): Promise<CloudInvitation> {
        const response = await this.inviteCloudUserRaw({ cloud_pk: cloud_pk, CloudInvitationRequest: CloudInvitationRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Invite a project member. If the user is not already a cloud member, they will also be invited in the cloud with USER role.  Required scopes: org:manage
     * Invite a project member
     */
    async inviteProjectUserRaw(requestParameters: InviteProjectUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectInvitation>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling inviteProjectUser.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling inviteProjectUser.');
        }

        if (requestParameters.ProjectInvitationRequest === null || requestParameters.ProjectInvitationRequest === undefined) {
            throw new runtime.RequiredError('ProjectInvitationRequest','Required parameter requestParameters.ProjectInvitationRequest was null or undefined when calling inviteProjectUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/invitation`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectInvitationRequestToJSON(requestParameters.ProjectInvitationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectInvitationFromJSON(jsonValue));
    }

    /**
     * Invite a project member. If the user is not already a cloud member, they will also be invited in the cloud with USER role.  Required scopes: org:manage
     * Invite a project member
     */
    async inviteProjectUser(cloud_pk: number, project_pk: number, ProjectInvitationRequest: ProjectInvitationRequest, initOverrides?: RequestInit): Promise<ProjectInvitation> {
        const response = await this.inviteProjectUserRaw({ cloud_pk: cloud_pk, project_pk: project_pk, ProjectInvitationRequest: ProjectInvitationRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Leave the project. Only authenticated users (no app) can call this route.  Required scopes: org:manage
     * Leave the project
     */
    async leaveProjectRaw(requestParameters: LeaveProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling leaveProject.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling leaveProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}/leave`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Leave the project. Only authenticated users (no app) can call this route.  Required scopes: org:manage
     * Leave the project
     */
    async leaveProject(cloud_pk: number, id: number, initOverrides?: RequestInit): Promise<void> {
        await this.leaveProjectRaw({ cloud_pk: cloud_pk, id: id }, initOverrides);
    }

    /**
     * This will create a new independent document in the same folder  Required scopes: document:write
     * Leave the history version
     */
    async leaveVersionDocumentHistoryRaw(requestParameters: LeaveVersionDocumentHistoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling leaveVersionDocumentHistory.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling leaveVersionDocumentHistory.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling leaveVersionDocumentHistory.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling leaveVersionDocumentHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/{id}/leave`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * This will create a new independent document in the same folder  Required scopes: document:write
     * Leave the history version
     */
    async leaveVersionDocumentHistory(cloud_pk: number, document_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<Document> {
        const response = await this.leaveVersionDocumentHistoryRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * The actual head version will be defined as the previous version  Required scopes: document:write
     * Make the head of the version
     */
    async makeHeadVersionDocumentHistoryRaw(requestParameters: MakeHeadVersionDocumentHistoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling makeHeadVersionDocumentHistory.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling makeHeadVersionDocumentHistory.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling makeHeadVersionDocumentHistory.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling makeHeadVersionDocumentHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/{id}/head-version`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * The actual head version will be defined as the previous version  Required scopes: document:write
     * Make the head of the version
     */
    async makeHeadVersionDocumentHistory(cloud_pk: number, document_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<Document> {
        const response = await this.makeHeadVersionDocumentHistoryRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk }, initOverrides);
        return await response.value();
    }

    /**
     * Pause a visa of a document  Required scopes: document:read
     * Pause a visa of a document
     */
    async pauseVisaRaw(requestParameters: PauseVisaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling pauseVisa.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling pauseVisa.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pauseVisa.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling pauseVisa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/pause`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Pause a visa of a document  Required scopes: document:read
     * Pause a visa of a document
     */
    async pauseVisa(cloud_pk: number, document_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.pauseVisaRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Reset a validation if the validation has been accepted or rejected. The attachment will be removed  Required scopes: document:read
     * Reset a validation
     */
    async resetValidationRaw(requestParameters: ResetValidationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling resetValidation.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling resetValidation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resetValidation.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling resetValidation.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling resetValidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/reset`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reset a validation if the validation has been accepted or rejected. The attachment will be removed  Required scopes: document:read
     * Reset a validation
     */
    async resetValidation(cloud_pk: number, document_pk: number, id: number, project_pk: number, visa_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.resetValidationRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk, visa_pk: visa_pk }, initOverrides);
    }

    /**
     * Resume a visa of a document after a pause  Required scopes: document:read
     * Resume a visa of a document
     */
    async resumeVisaRaw(requestParameters: ResumeVisaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling resumeVisa.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling resumeVisa.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling resumeVisa.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling resumeVisa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/resume`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resume a visa of a document after a pause  Required scopes: document:read
     * Resume a visa of a document
     */
    async resumeVisa(cloud_pk: number, document_pk: number, id: number, project_pk: number, initOverrides?: RequestInit): Promise<void> {
        await this.resumeVisaRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk }, initOverrides);
    }

    /**
     * Update some fields of a classification  Required scopes: ifc:write, model:write
     * Update some fields of a classification
     */
    async updateClassificationRaw(requestParameters: UpdateClassificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Classification>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateClassification.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateClassification.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateClassification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/classification/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedClassificationRequestToJSON(requestParameters.PatchedClassificationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClassificationFromJSON(jsonValue));
    }

    /**
     * Update some fields of a classification  Required scopes: ifc:write, model:write
     * Update some fields of a classification
     */
    async updateClassification(cloud_pk: number, id: number, project_pk: number, PatchedClassificationRequest?: PatchedClassificationRequest, initOverrides?: RequestInit): Promise<Classification> {
        const response = await this.updateClassificationRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk, PatchedClassificationRequest: PatchedClassificationRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a cloud  Required scopes: cloud:manage
     * Update some fields of a cloud
     */
    async updateCloudRaw(requestParameters: UpdateCloudRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Cloud>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCloud.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCloudRequestToJSON(requestParameters.PatchedCloudRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudFromJSON(jsonValue));
    }

    /**
     * Update some fields of a cloud  Required scopes: cloud:manage
     * Update some fields of a cloud
     */
    async updateCloud(id: number, PatchedCloudRequest?: PatchedCloudRequest, initOverrides?: RequestInit): Promise<Cloud> {
        const response = await this.updateCloudRaw({ id: id, PatchedCloudRequest: PatchedCloudRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Change the user role in the cloud  Required scopes: cloud:manage
     * Change the user role in the cloud
     */
    async updateCloudUserRaw(requestParameters: UpdateCloudUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateCloudUser.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCloudUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/user/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserCloudUpdateRequestToJSON(requestParameters.PatchedUserCloudUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Change the user role in the cloud  Required scopes: cloud:manage
     * Change the user role in the cloud
     */
    async updateCloudUser(cloud_pk: number, id: number, PatchedUserCloudUpdateRequest?: PatchedUserCloudUpdateRequest, initOverrides?: RequestInit): Promise<User> {
        const response = await this.updateCloudUserRaw({ cloud_pk: cloud_pk, id: id, PatchedUserCloudUpdateRequest: PatchedUserCloudUpdateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of the document  Required scopes: document:write
     * Update some fields of the document
     */
    async updateDocumentRaw(requestParameters: UpdateDocumentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateDocument.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDocument.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDocumentRequestToJSON(requestParameters.PatchedDocumentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Update some fields of the document  Required scopes: document:write
     * Update some fields of the document
     */
    async updateDocument(cloud_pk: number, id: number, project_pk: number, PatchedDocumentRequest?: PatchedDocumentRequest, initOverrides?: RequestInit): Promise<Document> {
        const response = await this.updateDocumentRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk, PatchedDocumentRequest: PatchedDocumentRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update the text representation of a document. The document itself will not be changed. It is useful for full text search  Required scopes: document:write
     * Update the text representation of a document
     */
    async updateDocumentTextRaw(requestParameters: UpdateDocumentTextRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DocumentText>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateDocumentText.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDocumentText.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateDocumentText.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{id}/text`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDocumentTextRequestToJSON(requestParameters.PatchedDocumentTextRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTextFromJSON(jsonValue));
    }

    /**
     * Update the text representation of a document. The document itself will not be changed. It is useful for full text search  Required scopes: document:write
     * Update the text representation of a document
     */
    async updateDocumentText(cloud_pk: number, id: number, project_pk: number, PatchedDocumentTextRequest?: PatchedDocumentTextRequest, initOverrides?: RequestInit): Promise<DocumentText> {
        const response = await this.updateDocumentTextRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk, PatchedDocumentTextRequest: PatchedDocumentTextRequest }, initOverrides);
        return await response.value();
    }

    /**
     *  Update some fields of a folder. Only project admins can update the `default_permission` field.  `default_permission` choices are : ``` 1: ACCESS_DENIED, 50: READ_ONLY, 100: READ_WRTIE ``` When propagate is set to True, the permission of all children in the folder will be updated.  Caution: The \'default_permission\' field is not applied to users belonging to one or more groups.   Required scopes: document:write
     * Update some fields of a folder
     */
    async updateFolderRaw(requestParameters: UpdateFolderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FolderWithoutChildren>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateFolder.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFolder.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/folder/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedFolderWithoutChildrenRequestToJSON(requestParameters.PatchedFolderWithoutChildrenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderWithoutChildrenFromJSON(jsonValue));
    }

    /**
     *  Update some fields of a folder. Only project admins can update the `default_permission` field.  `default_permission` choices are : ``` 1: ACCESS_DENIED, 50: READ_ONLY, 100: READ_WRTIE ``` When propagate is set to True, the permission of all children in the folder will be updated.  Caution: The \'default_permission\' field is not applied to users belonging to one or more groups.   Required scopes: document:write
     * Update some fields of a folder
     */
    async updateFolder(cloud_pk: number, id: number, project_pk: number, PatchedFolderWithoutChildrenRequest?: PatchedFolderWithoutChildrenRequest, initOverrides?: RequestInit): Promise<FolderWithoutChildren> {
        const response = await this.updateFolderRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk, PatchedFolderWithoutChildrenRequest: PatchedFolderWithoutChildrenRequest }, initOverrides);
        return await response.value();
    }

    /**
     *  Update the permission of a group on a folder. Permissions choices are : ``` 1: ACCESS_DENIED, 50: READ_ONLY, 100: READ_WRITE, None: Default value (See the default_permission field of the folder) ``` When propagate is set to True, the permission of all children in the folder will be updated.               Required scopes: org:manage
     * Update the permission of a group on a folder. When propagate is set to True, the permission of all children in the folder will be updated.
     */
    async updateGroupFolderRaw(requestParameters: UpdateGroupFolderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GroupFolder>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateGroupFolder.');
        }

        if (requestParameters.folder_pk === null || requestParameters.folder_pk === undefined) {
            throw new runtime.RequiredError('folder_pk','Required parameter requestParameters.folder_pk was null or undefined when calling updateGroupFolder.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateGroupFolder.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateGroupFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/group/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"folder_pk"}}`, encodeURIComponent(String(requestParameters.folder_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedGroupFolderRequestToJSON(requestParameters.PatchedGroupFolderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFolderFromJSON(jsonValue));
    }

    /**
     *  Update the permission of a group on a folder. Permissions choices are : ``` 1: ACCESS_DENIED, 50: READ_ONLY, 100: READ_WRITE, None: Default value (See the default_permission field of the folder) ``` When propagate is set to True, the permission of all children in the folder will be updated.               Required scopes: org:manage
     * Update the permission of a group on a folder. When propagate is set to True, the permission of all children in the folder will be updated.
     */
    async updateGroupFolder(cloud_pk: number, folder_pk: number, id: number, project_pk: number, PatchedGroupFolderRequest?: PatchedGroupFolderRequest, initOverrides?: RequestInit): Promise<GroupFolder> {
        const response = await this.updateGroupFolderRaw({ cloud_pk: cloud_pk, folder_pk: folder_pk, id: id, project_pk: project_pk, PatchedGroupFolderRequest: PatchedGroupFolderRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a group. Must be an admin of the project  Required scopes: org:manage
     * Update some fields of a group
     */
    async updateManageGroupRaw(requestParameters: UpdateManageGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateManageGroup.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateManageGroup.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateManageGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/group/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedGroupRequestToJSON(requestParameters.PatchedGroupRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Update some fields of a group. Must be an admin of the project  Required scopes: org:manage
     * Update some fields of a group
     */
    async updateManageGroup(cloud_pk: number, id: number, project_pk: number, PatchedGroupRequest?: PatchedGroupRequest, initOverrides?: RequestInit): Promise<Group> {
        const response = await this.updateManageGroupRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk, PatchedGroupRequest: PatchedGroupRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update preview of the document  Required scopes: document:write
     * Update preview of the document
     */
    async updatePreviewFileRaw(requestParameters: UpdatePreviewFileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DocumentPreviewFile>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updatePreviewFile.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePreviewFile.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updatePreviewFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.office_preview !== undefined) {
            formParams.append('office_preview', requestParameters.office_preview as any);
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{id}/preview-file`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentPreviewFileFromJSON(jsonValue));
    }

    /**
     * Update preview of the document  Required scopes: document:write
     * Update preview of the document
     */
    async updatePreviewFile(cloud_pk: number, id: number, project_pk: number, office_preview?: Blob, initOverrides?: RequestInit): Promise<DocumentPreviewFile> {
        const response = await this.updatePreviewFileRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk, office_preview: office_preview }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a project  Required scopes: org:manage
     * Update some fields of a project
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateProject.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProjectRequestToJSON(requestParameters.PatchedProjectRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Update some fields of a project  Required scopes: org:manage
     * Update some fields of a project
     */
    async updateProject(cloud_pk: number, id: number, PatchedProjectRequest?: PatchedProjectRequest, initOverrides?: RequestInit): Promise<Project> {
        const response = await this.updateProjectRaw({ cloud_pk: cloud_pk, id: id, PatchedProjectRequest: PatchedProjectRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Change the user role in the cloud  Required scopes: cloud:manage
     * Change the user role in the cloud
     */
    async updateProjectUserRaw(requestParameters: UpdateProjectUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserProject>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateProjectUser.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProjectUser.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateProjectUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/user/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserProjectUpdateRequestToJSON(requestParameters.PatchedUserProjectUpdateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProjectFromJSON(jsonValue));
    }

    /**
     * Change the user role in the cloud  Required scopes: cloud:manage
     * Change the user role in the cloud
     */
    async updateProjectUser(cloud_pk: number, id: number, project_pk: number, PatchedUserProjectUpdateRequest?: PatchedUserProjectUpdateRequest, initOverrides?: RequestInit): Promise<UserProject> {
        const response = await this.updateProjectUserRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk, PatchedUserProjectUpdateRequest: PatchedUserProjectUpdateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of the tag  Required scopes: document:write
     * Update some fields of the tag
     */
    async updateTagRaw(requestParameters: UpdateTagRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateTag.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTag.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/tag/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTagRequestToJSON(requestParameters.PatchedTagRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * Update some fields of the tag  Required scopes: document:write
     * Update some fields of the tag
     */
    async updateTag(cloud_pk: number, id: number, project_pk: number, PatchedTagRequest?: PatchedTagRequest, initOverrides?: RequestInit): Promise<Tag> {
        const response = await this.updateTagRaw({ cloud_pk: cloud_pk, id: id, project_pk: project_pk, PatchedTagRequest: PatchedTagRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update the validator of validation. This route is only useful for an App  Required scopes: document:read
     * Update the validator of validation
     */
    async updateValidationRaw(requestParameters: UpdateValidationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VisaValidation>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateValidation.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling updateValidation.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateValidation.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateValidation.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling updateValidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVisaValidationRequestToJSON(requestParameters.PatchedVisaValidationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaValidationFromJSON(jsonValue));
    }

    /**
     * Update the validator of validation. This route is only useful for an App  Required scopes: document:read
     * Update the validator of validation
     */
    async updateValidation(cloud_pk: number, document_pk: number, id: number, project_pk: number, visa_pk: number, PatchedVisaValidationRequest?: PatchedVisaValidationRequest, initOverrides?: RequestInit): Promise<VisaValidation> {
        const response = await this.updateValidationRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk, visa_pk: visa_pk, PatchedVisaValidationRequest: PatchedVisaValidationRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a visa  Required scopes: document:read
     * Update some fields of a visa
     */
    async updateVisaRaw(requestParameters: UpdateVisaRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Visa>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateVisa.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling updateVisa.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVisa.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateVisa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVisaRequestToJSON(requestParameters.PatchedVisaRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaFromJSON(jsonValue));
    }

    /**
     * Update some fields of a visa  Required scopes: document:read
     * Update some fields of a visa
     */
    async updateVisa(cloud_pk: number, document_pk: number, id: number, project_pk: number, PatchedVisaRequest?: PatchedVisaRequest, initOverrides?: RequestInit): Promise<Visa> {
        const response = await this.updateVisaRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk, PatchedVisaRequest: PatchedVisaRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Update some fields of a comment  Required scopes: document:read
     * Update some fields of a comment
     */
    async updateVisaCommentRaw(requestParameters: UpdateVisaCommentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VisaComment>> {
        if (requestParameters.cloud_pk === null || requestParameters.cloud_pk === undefined) {
            throw new runtime.RequiredError('cloud_pk','Required parameter requestParameters.cloud_pk was null or undefined when calling updateVisaComment.');
        }

        if (requestParameters.document_pk === null || requestParameters.document_pk === undefined) {
            throw new runtime.RequiredError('document_pk','Required parameter requestParameters.document_pk was null or undefined when calling updateVisaComment.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVisaComment.');
        }

        if (requestParameters.project_pk === null || requestParameters.project_pk === undefined) {
            throw new runtime.RequiredError('project_pk','Required parameter requestParameters.project_pk was null or undefined when calling updateVisaComment.');
        }

        if (requestParameters.visa_pk === null || requestParameters.visa_pk === undefined) {
            throw new runtime.RequiredError('visa_pk','Required parameter requestParameters.visa_pk was null or undefined when calling updateVisaComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}`.replace(`{${"cloud_pk"}}`, encodeURIComponent(String(requestParameters.cloud_pk))).replace(`{${"document_pk"}}`, encodeURIComponent(String(requestParameters.document_pk))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"project_pk"}}`, encodeURIComponent(String(requestParameters.project_pk))).replace(`{${"visa_pk"}}`, encodeURIComponent(String(requestParameters.visa_pk))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedVisaCommentRequestToJSON(requestParameters.PatchedVisaCommentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VisaCommentFromJSON(jsonValue));
    }

    /**
     * Update some fields of a comment  Required scopes: document:read
     * Update some fields of a comment
     */
    async updateVisaComment(cloud_pk: number, document_pk: number, id: number, project_pk: number, visa_pk: number, PatchedVisaCommentRequest?: PatchedVisaCommentRequest, initOverrides?: RequestInit): Promise<VisaComment> {
        const response = await this.updateVisaCommentRaw({ cloud_pk: cloud_pk, document_pk: document_pk, id: id, project_pk: project_pk, visa_pk: visa_pk, PatchedVisaCommentRequest: PatchedVisaCommentRequest }, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CreateDocumentModelSourceEnum {
    Upload = 'UPLOAD',
    Split = 'SPLIT',
    Merge = 'MERGE',
    Export = 'EXPORT',
    Optimized = 'OPTIMIZED'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateDocumentIfcSourceEnum {
    Upload = 'UPLOAD',
    Split = 'SPLIT',
    Merge = 'MERGE',
    Export = 'EXPORT',
    Optimized = 'OPTIMIZED'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateDocumentProcessHintEnum {
    Photosphere = 'PHOTOSPHERE'
}
/**
    * @export
    * @enum {string}
    */
export enum GetDocumentsVisaStatusEnum {
    C = 'C',
    O = 'O',
    P = 'P'
}
/**
    * @export
    * @enum {string}
    */
export enum GetDocumentsVisaStatusStrictEnum {
    C = 'C',
    O = 'O',
    P = 'P'
}
/**
    * @export
    * @enum {string}
    */
export enum GetFolderDocumentsVisaStatusEnum {
    C = 'C',
    O = 'O',
    P = 'P'
}
/**
    * @export
    * @enum {string}
    */
export enum GetFolderDocumentsVisaStatusStrictEnum {
    C = 'C',
    O = 'O',
    P = 'P'
}
/**
    * @export
    * @enum {string}
    */
export enum GetProjectCreatorVisasStatusEnum {
    C = 'C',
    O = 'O',
    P = 'P'
}
/**
    * @export
    * @enum {string}
    */
export enum GetProjectValidatorVisasStatusEnum {
    C = 'C',
    O = 'O',
    P = 'P'
}
