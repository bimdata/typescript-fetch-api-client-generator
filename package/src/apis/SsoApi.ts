/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMData’s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateUserRequest,
    CreateUserRequestFromJSON,
    CreateUserRequestToJSON,
    Invitation,
    InvitationFromJSON,
    InvitationToJSON,
    SelectUserRequest,
    SelectUserRequestFromJSON,
    SelectUserRequestToJSON,
    ShortUser,
    ShortUserFromJSON,
    ShortUserToJSON,
} from '../models';

export interface AcceptInvitationRequest {
    id: number;
}

export interface CreateUserOperationRequest {
    CreateUserRequest: CreateUserRequest;
}

export interface DeleteUserRequest {
    SelectUserRequest: SelectUserRequest;
}

export interface DenyInvitationRequest {
    id: number;
}

export interface GetInvitationRequest {
    id: number;
}

export interface GetInvitationsRequest {
    status?: GetInvitationsStatusEnum;
}

/**
 * 
 */
export class SsoApi extends runtime.BaseAPI {

    /**
     * If the user already exists, s·he is added to the cloud and projet. If not, we wait their first connection to add them.  Required scopes: org:manage
     * Accept an invitation
     */
    async acceptInvitationRaw(requestParameters: AcceptInvitationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling acceptInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/identity-provider/invitation/{id}/accept`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * If the user already exists, s·he is added to the cloud and projet. If not, we wait their first connection to add them.  Required scopes: org:manage
     * Accept an invitation
     */
    async acceptInvitation(id: number, initOverrides?: RequestInit): Promise<void> {
        await this.acceptInvitationRaw({ id: id }, initOverrides);
    }

    /**
     * Create a user, linked to the provider. This route is only useful when used with `ProjetAccessToken`s. If user already exists, it responds with a 200 instead of a 201
     * Create a user
     */
    async createUserRaw(requestParameters: CreateUserOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ShortUser>> {
        if (requestParameters.CreateUserRequest === null || requestParameters.CreateUserRequest === undefined) {
            throw new runtime.RequiredError('CreateUserRequest','Required parameter requestParameters.CreateUserRequest was null or undefined when calling createUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/identity-provider/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestToJSON(requestParameters.CreateUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShortUserFromJSON(jsonValue));
    }

    /**
     * Create a user, linked to the provider. This route is only useful when used with `ProjetAccessToken`s. If user already exists, it responds with a 200 instead of a 201
     * Create a user
     */
    async createUser(CreateUserRequest: CreateUserRequest, initOverrides?: RequestInit): Promise<ShortUser> {
        const response = await this.createUserRaw({ CreateUserRequest: CreateUserRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the user and all clouds where the user is alone
     * Delete user from BIMData
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.SelectUserRequest === null || requestParameters.SelectUserRequest === undefined) {
            throw new runtime.RequiredError('SelectUserRequest','Required parameter requestParameters.SelectUserRequest was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/identity-provider/user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: SelectUserRequestToJSON(requestParameters.SelectUserRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the user and all clouds where the user is alone
     * Delete user from BIMData
     */
    async deleteUser(SelectUserRequest: SelectUserRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteUserRaw({ SelectUserRequest: SelectUserRequest }, initOverrides);
    }

    /**
     * The invitation status change to DENIED and the user is not added to the cloud. You can accept an invitation previously denied  Required scopes: org:manage
     * Deny an invitation
     */
    async denyInvitationRaw(requestParameters: DenyInvitationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling denyInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/identity-provider/invitation/{id}/deny`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The invitation status change to DENIED and the user is not added to the cloud. You can accept an invitation previously denied  Required scopes: org:manage
     * Deny an invitation
     */
    async denyInvitation(id: number, initOverrides?: RequestInit): Promise<void> {
        await this.denyInvitationRaw({ id: id }, initOverrides);
    }

    /**
     * Retrieve all invitations of your identity provider  Required scopes: org:manage
     * Retrieve an invitation
     */
    async getInvitationRaw(requestParameters: GetInvitationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/identity-provider/invitation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Retrieve all invitations of your identity provider  Required scopes: org:manage
     * Retrieve an invitation
     */
    async getInvitation(id: number, initOverrides?: RequestInit): Promise<Invitation> {
        const response = await this.getInvitationRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all invitations of your identity provider  Required scopes: org:manage
     * Retrieve all invitations
     */
    async getInvitationsRaw(requestParameters: GetInvitationsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Invitation>>> {
        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BIMData_Connect", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/identity-provider/invitation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvitationFromJSON));
    }

    /**
     * Retrieve all invitations of your identity provider  Required scopes: org:manage
     * Retrieve all invitations
     */
    async getInvitations(status?: GetInvitationsStatusEnum, initOverrides?: RequestInit): Promise<Array<Invitation>> {
        const response = await this.getInvitationsRaw({ status: status }, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetInvitationsStatusEnum {
    A = 'A',
    D = 'D',
    P = 'P'
}
