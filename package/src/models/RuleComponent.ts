/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Default behavior: - retrieve kwargs in the route (cloud_pk, project_pk, etc) - trim the _pk (cloud_pk => cloud) - check if the object has a foreign key with the name - if so, set the foreign key to the value in the route Override: If the serializer has a method \"get_parents\", we call it and set the parents The method \"get_parents\" should return an iterable of tuples : (parent_field_name, parent_object)
 * @export
 * @interface RuleComponent
 */
export interface RuleComponent {
    /**
     * 
     * @type {number}
     * @memberof RuleComponent
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof RuleComponent
     */
    type?: string | null;
    /**
     * 
     * @type {object}
     * @memberof RuleComponent
     */
    value?: object | null;
    /**
     * 
     * @type {string}
     * @memberof RuleComponent
     */
    operator?: string | null;
    /**
     * 
     * @type {object}
     * @memberof RuleComponent
     */
    params?: object | null;
    /**
     * 
     * @type {string}
     * @memberof RuleComponent
     */
    condition?: string | null;
    /**
     * 
     * @type {object}
     * @memberof RuleComponent
     */
    ruleComponents?: object | null;
}

export function RuleComponentFromJSON(json: any): RuleComponent {
    return RuleComponentFromJSONTyped(json, false);
}

export function RuleComponentFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleComponent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'operator': !exists(json, 'operator') ? undefined : json['operator'],
        'params': !exists(json, 'params') ? undefined : json['params'],
        'condition': !exists(json, 'condition') ? undefined : json['condition'],
        'ruleComponents': !exists(json, 'rule_components') ? undefined : json['rule_components'],
    };
}

export function RuleComponentToJSON(value?: RuleComponent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'value': value.value,
        'operator': value.operator,
        'params': value.params,
        'condition': value.condition,
        'rule_components': value.ruleComponents,
    };
}


