/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ZoneSpace,
    ZoneSpaceFromJSON,
    ZoneSpaceFromJSONTyped,
    ZoneSpaceToJSON,
} from './ZoneSpace';

/**
 * Adds nested create feature
 * @export
 * @interface Zone
 */
export interface Zone {
    /**
     * 
     * @type {number}
     * @memberof Zone
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof Zone
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Zone
     */
    uuid: string;
    /**
     * 
     * @type {Array<Zone>}
     * @memberof Zone
     */
    zones?: Array<Zone>;
    /**
     * 
     * @type {number}
     * @memberof Zone
     */
    parent_id?: number | null;
    /**
     * 
     * @type {Array<ZoneSpace>}
     * @memberof Zone
     */
    spaces?: Array<ZoneSpace>;
    /**
     * 
     * @type {Date}
     * @memberof Zone
     */
    readonly created_at: Date;
    /**
     * 
     * @type {Date}
     * @memberof Zone
     */
    readonly updated_at: Date;
    /**
     * 
     * @type {string}
     * @memberof Zone
     */
    color?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Zone
     */
    order?: number;
}

export function ZoneFromJSON(json: any): Zone {
    return ZoneFromJSONTyped(json, false);
}

export function ZoneFromJSONTyped(json: any, ignoreDiscriminator: boolean): Zone {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'uuid': json['uuid'],
        'zones': !exists(json, 'zones') ? undefined : ((json['zones'] as Array<any>).map(ZoneFromJSON)),
        'parent_id': !exists(json, 'parent_id') ? undefined : json['parent_id'],
        'spaces': !exists(json, 'spaces') ? undefined : ((json['spaces'] as Array<any>).map(ZoneSpaceFromJSON)),
        'created_at': (new Date(json['created_at'])),
        'updated_at': (new Date(json['updated_at'])),
        'color': !exists(json, 'color') ? undefined : json['color'],
        'order': !exists(json, 'order') ? undefined : json['order'],
    };
}

export function ZoneToJSON(value?: Zone | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'uuid': value.uuid,
        'zones': value.zones === undefined ? undefined : ((value.zones as Array<any>).map(ZoneToJSON)),
        'parent_id': value.parent_id,
        'spaces': value.spaces === undefined ? undefined : ((value.spaces as Array<any>).map(ZoneSpaceToJSON)),
        'color': value.color,
        'order': value.order,
    };
}

