/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ProjectStatusEnum,
    ProjectStatusEnumFromJSON,
    ProjectStatusEnumFromJSONTyped,
    ProjectStatusEnumToJSON,
} from './';

/**
 * 
 * @export
 * @interface ProjectWithChildren
 */
export interface ProjectWithChildren {
    /**
     * 
     * @type {number}
     * @memberof ProjectWithChildren
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectWithChildren
     */
    logo?: string | null;
    /**
     * Name of the project
     * @type {string}
     * @memberof ProjectWithChildren
     */
    name: string;
    /**
     * 
     * @type {ProjectStatusEnum}
     * @memberof ProjectWithChildren
     */
    status?: ProjectStatusEnum;
    /**
     * Creation date
     * @type {Date}
     * @memberof ProjectWithChildren
     */
    readonly createdAt: Date;
    /**
     * Date of the last update
     * @type {Date}
     * @memberof ProjectWithChildren
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {number}
     * @memberof ProjectWithChildren
     */
    parentId?: number | null;
    /**
     * 
     * @type {Array<ProjectWithChildren>}
     * @memberof ProjectWithChildren
     */
    readonly children: Array<ProjectWithChildren>;
    /**
     * 
     * @type {number}
     * @memberof ProjectWithChildren
     */
    readonly rootFolderId: number | null;
}

export function ProjectWithChildrenFromJSON(json: any): ProjectWithChildren {
    return ProjectWithChildrenFromJSONTyped(json, false);
}

export function ProjectWithChildrenFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectWithChildren {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'logo': !exists(json, 'logo') ? undefined : json['logo'],
        'name': json['name'],
        'status': !exists(json, 'status') ? undefined : ProjectStatusEnumFromJSON(json['status']),
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'parentId': !exists(json, 'parent_id') ? undefined : json['parent_id'],
        'children': ((json['children'] as Array<any>).map(ProjectWithChildrenFromJSON)),
        'rootFolderId': json['root_folder_id'],
    };
}

export function ProjectWithChildrenToJSON(value?: ProjectWithChildren | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'logo': value.logo,
        'name': value.name,
        'status': ProjectStatusEnumToJSON(value.status),
        'parent_id': value.parentId,
    };
}


