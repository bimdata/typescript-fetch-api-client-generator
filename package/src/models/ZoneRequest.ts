/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SpaceRequest,
    SpaceRequestFromJSON,
    SpaceRequestFromJSONTyped,
    SpaceRequestToJSON,
} from './SpaceRequest';

/**
 * Adds nested create feature
 * @export
 * @interface ZoneRequest
 */
export interface ZoneRequest {
    /**
     * 
     * @type {string}
     * @memberof ZoneRequest
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ZoneRequest
     */
    uuid: string;
    /**
     * 
     * @type {Array<ZoneRequest>}
     * @memberof ZoneRequest
     */
    zones?: Array<ZoneRequest>;
    /**
     * 
     * @type {number}
     * @memberof ZoneRequest
     */
    parentId?: number;
    /**
     * 
     * @type {Array<SpaceRequest>}
     * @memberof ZoneRequest
     */
    spaces?: Array<SpaceRequest>;
    /**
     * 
     * @type {string}
     * @memberof ZoneRequest
     */
    color?: string | null;
}

export function ZoneRequestFromJSON(json: any): ZoneRequest {
    return ZoneRequestFromJSONTyped(json, false);
}

export function ZoneRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ZoneRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'uuid': json['uuid'],
        'zones': !exists(json, 'zones') ? undefined : ((json['zones'] as Array<any>).map(ZoneRequestFromJSON)),
        'parentId': !exists(json, 'parent_id') ? undefined : json['parent_id'],
        'spaces': !exists(json, 'spaces') ? undefined : ((json['spaces'] as Array<any>).map(SpaceRequestFromJSON)),
        'color': !exists(json, 'color') ? undefined : json['color'],
    };
}

export function ZoneRequestToJSON(value?: ZoneRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'uuid': value.uuid,
        'zones': value.zones === undefined ? undefined : ((value.zones as Array<any>).map(ZoneRequestToJSON)),
        'parent_id': value.parentId,
        'spaces': value.spaces === undefined ? undefined : ((value.spaces as Array<any>).map(SpaceRequestToJSON)),
        'color': value.color,
    };
}

