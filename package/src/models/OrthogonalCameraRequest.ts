/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DirectionRequest,
    DirectionRequestFromJSON,
    DirectionRequestFromJSONTyped,
    DirectionRequestToJSON,
} from './DirectionRequest';
import {
    PointRequest,
    PointRequestFromJSON,
    PointRequestFromJSONTyped,
    PointRequestToJSON,
} from './PointRequest';

/**
 * Adds nested create feature
 * @export
 * @interface OrthogonalCameraRequest
 */
export interface OrthogonalCameraRequest {
    /**
     * 
     * @type {number}
     * @memberof OrthogonalCameraRequest
     */
    viewToWorldScale: number;
    /**
     * 
     * @type {DirectionRequest}
     * @memberof OrthogonalCameraRequest
     */
    cameraDirection: DirectionRequest;
    /**
     * 
     * @type {DirectionRequest}
     * @memberof OrthogonalCameraRequest
     */
    cameraUpVector: DirectionRequest;
    /**
     * 
     * @type {PointRequest}
     * @memberof OrthogonalCameraRequest
     */
    cameraViewPoint: PointRequest;
}

export function OrthogonalCameraRequestFromJSON(json: any): OrthogonalCameraRequest {
    return OrthogonalCameraRequestFromJSONTyped(json, false);
}

export function OrthogonalCameraRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrthogonalCameraRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'viewToWorldScale': json['view_to_world_scale'],
        'cameraDirection': DirectionRequestFromJSON(json['camera_direction']),
        'cameraUpVector': DirectionRequestFromJSON(json['camera_up_vector']),
        'cameraViewPoint': PointRequestFromJSON(json['camera_view_point']),
    };
}

export function OrthogonalCameraRequestToJSON(value?: OrthogonalCameraRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'view_to_world_scale': value.viewToWorldScale,
        'camera_direction': DirectionRequestToJSON(value.cameraDirection),
        'camera_up_vector': DirectionRequestToJSON(value.cameraUpVector),
        'camera_view_point': PointRequestToJSON(value.cameraViewPoint),
    };
}

