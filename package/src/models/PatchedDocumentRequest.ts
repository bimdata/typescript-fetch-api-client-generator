/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PatchedDocumentRequest
 */
export interface PatchedDocumentRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedDocumentRequest
     */
    parent_id?: number | null;
    /**
     * Shown name of the file
     * @type {string}
     * @memberof PatchedDocumentRequest
     */
    name?: string;
    /**
     * Full name of the file
     * @type {string}
     * @memberof PatchedDocumentRequest
     */
    file_name?: string;
    /**
     * Description of the file
     * @type {string}
     * @memberof PatchedDocumentRequest
     */
    description?: string | null;
    /**
     * 
     * @type {Blob}
     * @memberof PatchedDocumentRequest
     */
    file?: Blob;
    /**
     * Define the model.source field if the upload is a Model (IFC, PDF, DWG...)
     * 
     * * `UPLOAD` - UPLOAD
     * * `SPLIT` - SPLIT
     * * `MERGE` - MERGE
     * * `EXPORT` - EXPORT
     * * `OPTIMIZED` - OPTIMIZED
     * @type {string}
     * @memberof PatchedDocumentRequest
     */
    model_source?: PatchedDocumentRequestModelSourceEnum;
    /**
     * DEPRECATED: Use 'model_source' instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...)
     * 
     * * `UPLOAD` - UPLOAD
     * * `SPLIT` - SPLIT
     * * `MERGE` - MERGE
     * * `EXPORT` - EXPORT
     * * `OPTIMIZED` - OPTIMIZED
     * @type {string}
     * @memberof PatchedDocumentRequest
     */
    ifc_source?: PatchedDocumentRequestIfcSourceEnum;
    /**
     * Old document version to replace. Only for create
     * @type {number}
     * @memberof PatchedDocumentRequest
     */
    successor_of?: number;
    /**
     * Provide a info about the document in order to customize the way it is processed.
     * 
     * * `PHOTOSPHERE` - PHOTOSPHERE
     * @type {string}
     * @memberof PatchedDocumentRequest
     */
    process_hint?: PatchedDocumentRequestProcessHintEnum;
}

/**
* @export
* @enum {string}
*/
export enum PatchedDocumentRequestModelSourceEnum {
    Upload = 'UPLOAD',
    Split = 'SPLIT',
    Merge = 'MERGE',
    Export = 'EXPORT',
    Optimized = 'OPTIMIZED'
}/**
* @export
* @enum {string}
*/
export enum PatchedDocumentRequestIfcSourceEnum {
    Upload = 'UPLOAD',
    Split = 'SPLIT',
    Merge = 'MERGE',
    Export = 'EXPORT',
    Optimized = 'OPTIMIZED'
}/**
* @export
* @enum {string}
*/
export enum PatchedDocumentRequestProcessHintEnum {
    Photosphere = 'PHOTOSPHERE'
}

export function PatchedDocumentRequestFromJSON(json: any): PatchedDocumentRequest {
    return PatchedDocumentRequestFromJSONTyped(json, false);
}

export function PatchedDocumentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedDocumentRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parent_id': !exists(json, 'parent_id') ? undefined : json['parent_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'file_name': !exists(json, 'file_name') ? undefined : json['file_name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'file': !exists(json, 'file') ? undefined : json['file'],
        'model_source': !exists(json, 'model_source') ? undefined : json['model_source'],
        'ifc_source': !exists(json, 'ifc_source') ? undefined : json['ifc_source'],
        'successor_of': !exists(json, 'successor_of') ? undefined : json['successor_of'],
        'process_hint': !exists(json, 'process_hint') ? undefined : json['process_hint'],
    };
}

export function PatchedDocumentRequestToJSON(value?: PatchedDocumentRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parent_id': value.parent_id,
        'name': value.name,
        'file_name': value.file_name,
        'description': value.description,
        'file': value.file,
        'model_source': value.model_source,
        'ifc_source': value.ifc_source,
        'successor_of': value.successor_of,
        'process_hint': value.process_hint,
    };
}

