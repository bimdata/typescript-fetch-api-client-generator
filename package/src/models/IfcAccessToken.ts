/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Default behavior: - retrieve kwargs in the route (cloud_pk, project_pk, etc) - trim the _pk (cloud_pk => cloud) - check if the object has a foreign key with the name - if so, set the foreign key to the value in the route Override: If the serializer has a method \"get_parents\", we call it and set the parents The method \"get_parents\" should return an iterable of tuples : (parent_field_name, parent_object)
 * @export
 * @interface IfcAccessToken
 */
export interface IfcAccessToken {
    /**
     * 
     * @type {string}
     * @memberof IfcAccessToken
     */
    readonly token?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IfcAccessToken
     */
    readOnly?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof IfcAccessToken
     */
    expiresAt?: Date;
}

export function IfcAccessTokenFromJSON(json: any): IfcAccessToken {
    return IfcAccessTokenFromJSONTyped(json, false);
}

export function IfcAccessTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): IfcAccessToken {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'token': !exists(json, 'token') ? undefined : json['token'],
        'readOnly': !exists(json, 'read_only') ? undefined : json['read_only'],
        'expiresAt': !exists(json, 'expires_at') ? undefined : (new Date(json['expires_at'])),
    };
}

export function IfcAccessTokenToJSON(value?: IfcAccessToken | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'read_only': value.readOnly,
        'expires_at': value.expiresAt === undefined ? undefined : (value.expiresAt.toISOString()),
    };
}


