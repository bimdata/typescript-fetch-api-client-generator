/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FolderGroupPermission,
    FolderGroupPermissionFromJSON,
    FolderGroupPermissionFromJSONTyped,
    FolderGroupPermissionToJSON,
} from './FolderGroupPermission';
import {
    FolderPermissionEnum,
    FolderPermissionEnumFromJSON,
    FolderPermissionEnumFromJSONTyped,
    FolderPermissionEnumToJSON,
} from './FolderPermissionEnum';
import {
    ModelTypeEnum | NullEnum,
    ModelTypeEnum | NullEnumFromJSON,
    ModelTypeEnum | NullEnumFromJSONTyped,
    ModelTypeEnum | NullEnumToJSON,
} from './ModelTypeEnum | NullEnum';
import {
    NatureEnum,
    NatureEnumFromJSON,
    NatureEnumFromJSONTyped,
    NatureEnumToJSON,
} from './NatureEnum';
import {
    RecursiveFolderChildrenTypeEnum,
    RecursiveFolderChildrenTypeEnumFromJSON,
    RecursiveFolderChildrenTypeEnumFromJSONTyped,
    RecursiveFolderChildrenTypeEnumToJSON,
} from './RecursiveFolderChildrenTypeEnum';
import {
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface RecursiveFolderChildren
 */
export interface RecursiveFolderChildren {
    /**
     * 
     * @type {number}
     * @memberof RecursiveFolderChildren
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof RecursiveFolderChildren
     */
    parentId: number;
    /**
     * 
     * @type {User}
     * @memberof RecursiveFolderChildren
     */
    createdBy?: User | null;
    /**
     * 
     * @type {User}
     * @memberof RecursiveFolderChildren
     */
    creator?: User | null;
    /**
     * DEPRECATED: Use 'nature' instead. Values can be 'Folder', 'Document' or 'Ifc'. It is usefull to parse the tree and discriminate folders and files
     * @type {RecursiveFolderChildrenTypeEnum}
     * @memberof RecursiveFolderChildren
     */
    readonly type: RecursiveFolderChildrenTypeEnum | null;
    /**
     * Values can be 'Folder', 'Document' or 'Model'. It is usefull to parse the tree and discriminate folders and files
     * @type {NatureEnum}
     * @memberof RecursiveFolderChildren
     */
    readonly nature: NatureEnum | null;
    /**
     * Model's type. Values can be IFC, DWG, DXF, GLTF, PDF, JPEG, PNG, OBJ, DAE, BFX
     * @type {ModelTypeEnum | NullEnum}
     * @memberof RecursiveFolderChildren
     */
    readonly modelType: ModelTypeEnum | NullEnum | null;
    /**
     * 
     * @type {string}
     * @memberof RecursiveFolderChildren
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof RecursiveFolderChildren
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof RecursiveFolderChildren
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof RecursiveFolderChildren
     */
    fileName?: string;
    /**
     * 
     * @type {string}
     * @memberof RecursiveFolderChildren
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RecursiveFolderChildren
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof RecursiveFolderChildren
     */
    readonly modelId: number | null;
    /**
     * DEPRECATED: Use 'model_id' instead
     * @type {number}
     * @memberof RecursiveFolderChildren
     */
    readonly ifcId: number | null;
    /**
     * 
     * @type {string}
     * @memberof RecursiveFolderChildren
     */
    file?: string;
    /**
     * Groups permissions of folder
     * @type {Array<FolderGroupPermission>}
     * @memberof RecursiveFolderChildren
     */
    readonly groupsPermissions: Array<FolderGroupPermission> | null;
    /**
     * Default permissions of folder
     * @type {FolderPermissionEnum}
     * @memberof RecursiveFolderChildren
     */
    readonly defaultPermission: FolderPermissionEnum | null;
    /**
     * Aggregate of group user permissions and folder default permission
     * @type {FolderPermissionEnum}
     * @memberof RecursiveFolderChildren
     */
    readonly userPermission: FolderPermissionEnum | null;
    /**
     * 
     * @type {Array<RecursiveFolderChildren>}
     * @memberof RecursiveFolderChildren
     */
    children?: Array<RecursiveFolderChildren> | null;
}

export function RecursiveFolderChildrenFromJSON(json: any): RecursiveFolderChildren {
    return RecursiveFolderChildrenFromJSONTyped(json, false);
}

export function RecursiveFolderChildrenFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecursiveFolderChildren {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'parentId': json['parent_id'],
        'createdBy': !exists(json, 'created_by') ? undefined : UserFromJSON(json['created_by']),
        'creator': !exists(json, 'creator') ? undefined : UserFromJSON(json['creator']),
        'type': RecursiveFolderChildrenTypeEnumFromJSON(json['type']),
        'nature': NatureEnumFromJSON(json['nature']),
        'modelType': ModelTypeEnum | NullEnumFromJSON(json['model_type']),
        'name': json['name'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'fileName': !exists(json, 'file_name') ? undefined : json['file_name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'modelId': json['model_id'],
        'ifcId': json['ifc_id'],
        'file': !exists(json, 'file') ? undefined : json['file'],
        'groupsPermissions': (json['groups_permissions'] === null ? null : (json['groups_permissions'] as Array<any>).map(FolderGroupPermissionFromJSON)),
        'defaultPermission': FolderPermissionEnumFromJSON(json['default_permission']),
        'userPermission': FolderPermissionEnumFromJSON(json['user_permission']),
        'children': !exists(json, 'children') ? undefined : (json['children'] === null ? null : (json['children'] as Array<any>).map(RecursiveFolderChildrenFromJSON)),
    };
}

export function RecursiveFolderChildrenToJSON(value?: RecursiveFolderChildren | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'parent_id': value.parentId,
        'created_by': UserToJSON(value.createdBy),
        'creator': UserToJSON(value.creator),
        'name': value.name,
        'created_at': (value.createdAt.toISOString()),
        'updated_at': (value.updatedAt.toISOString()),
        'file_name': value.fileName,
        'description': value.description,
        'size': value.size,
        'file': value.file,
        'children': value.children === undefined ? undefined : (value.children === null ? null : (value.children as Array<any>).map(RecursiveFolderChildrenToJSON)),
    };
}

