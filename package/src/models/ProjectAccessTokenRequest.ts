/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProjectAccessTokenRequest
 */
export interface ProjectAccessTokenRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectAccessTokenRequest
     */
    scopes: Array<ProjectAccessTokenRequestScopesEnum>;
    /**
     * 
     * @type {Date}
     * @memberof ProjectAccessTokenRequest
     */
    expires_at?: Date;
    /**
     * 
     *         If the request is made from an SSO application, you can link the token to a user.
     *         All calls made with the token will populate created_by fields with the user.
     *         If the user don't have access to some data, the token won't have access.
     *         
     * @type {string}
     * @memberof ProjectAccessTokenRequest
     */
    email_impersonation?: string | null;
}

/**
* @export
* @enum {string}
*/
export enum ProjectAccessTokenRequestScopesEnum {
    Bcfread = 'bcf:read',
    Bcfwrite = 'bcf:write',
    Documentread = 'document:read',
    Documentwrite = 'document:write',
    Ifcread = 'ifc:read',
    Ifcwrite = 'ifc:write',
    Modelread = 'model:read',
    Modelwrite = 'model:write'
}

export function ProjectAccessTokenRequestFromJSON(json: any): ProjectAccessTokenRequest {
    return ProjectAccessTokenRequestFromJSONTyped(json, false);
}

export function ProjectAccessTokenRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectAccessTokenRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'scopes': json['scopes'],
        'expires_at': !exists(json, 'expires_at') ? undefined : (new Date(json['expires_at'])),
        'email_impersonation': !exists(json, 'email_impersonation') ? undefined : json['email_impersonation'],
    };
}

export function ProjectAccessTokenRequestToJSON(value?: ProjectAccessTokenRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'scopes': value.scopes,
        'expires_at': value.expires_at === undefined ? undefined : (value.expires_at.toISOString()),
        'email_impersonation': value.email_impersonation,
    };
}

