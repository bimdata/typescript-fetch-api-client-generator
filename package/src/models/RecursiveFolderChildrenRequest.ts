/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RecursiveFolderChildrenRequest
 */
export interface RecursiveFolderChildrenRequest {
    /**
     * 
     * @type {number}
     * @memberof RecursiveFolderChildrenRequest
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof RecursiveFolderChildrenRequest
     */
    parentId: number;
    /**
     * 
     * @type {string}
     * @memberof RecursiveFolderChildrenRequest
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof RecursiveFolderChildrenRequest
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof RecursiveFolderChildrenRequest
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof RecursiveFolderChildrenRequest
     */
    fileName?: string;
    /**
     * 
     * @type {string}
     * @memberof RecursiveFolderChildrenRequest
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RecursiveFolderChildrenRequest
     */
    size?: number;
    /**
     * 
     * @type {Blob}
     * @memberof RecursiveFolderChildrenRequest
     */
    file?: Blob;
    /**
     * 
     * @type {Array<RecursiveFolderChildrenRequest>}
     * @memberof RecursiveFolderChildrenRequest
     */
    children?: Array<RecursiveFolderChildrenRequest> | null;
}

export function RecursiveFolderChildrenRequestFromJSON(json: any): RecursiveFolderChildrenRequest {
    return RecursiveFolderChildrenRequestFromJSONTyped(json, false);
}

export function RecursiveFolderChildrenRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecursiveFolderChildrenRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'parentId': json['parent_id'],
        'name': json['name'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'fileName': !exists(json, 'file_name') ? undefined : json['file_name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'file': !exists(json, 'file') ? undefined : json['file'],
        'children': !exists(json, 'children') ? undefined : (json['children'] === null ? null : (json['children'] as Array<any>).map(RecursiveFolderChildrenRequestFromJSON)),
    };
}

export function RecursiveFolderChildrenRequestToJSON(value?: RecursiveFolderChildrenRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'parent_id': value.parentId,
        'name': value.name,
        'created_at': (value.createdAt.toISOString()),
        'updated_at': (value.updatedAt.toISOString()),
        'file_name': value.fileName,
        'description': value.description,
        'size': value.size,
        'file': value.file,
        'children': value.children === undefined ? undefined : (value.children === null ? null : (value.children as Array<any>).map(RecursiveFolderChildrenRequestToJSON)),
    };
}


