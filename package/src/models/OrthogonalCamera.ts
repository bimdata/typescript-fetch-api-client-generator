/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Direction,
    DirectionFromJSON,
    DirectionFromJSONTyped,
    DirectionToJSON,
    Point,
    PointFromJSON,
    PointFromJSONTyped,
    PointToJSON,
} from './';

/**
 * Adds nested create feature
 * @export
 * @interface OrthogonalCamera
 */
export interface OrthogonalCamera {
    /**
     * 
     * @type {number}
     * @memberof OrthogonalCamera
     */
    viewToWorldScale: number;
    /**
     * 
     * @type {Direction}
     * @memberof OrthogonalCamera
     */
    cameraDirection: Direction;
    /**
     * 
     * @type {Direction}
     * @memberof OrthogonalCamera
     */
    cameraUpVector: Direction;
    /**
     * 
     * @type {Point}
     * @memberof OrthogonalCamera
     */
    cameraViewPoint: Point;
}

export function OrthogonalCameraFromJSON(json: any): OrthogonalCamera {
    return OrthogonalCameraFromJSONTyped(json, false);
}

export function OrthogonalCameraFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrthogonalCamera {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'viewToWorldScale': json['view_to_world_scale'],
        'cameraDirection': DirectionFromJSON(json['camera_direction']),
        'cameraUpVector': DirectionFromJSON(json['camera_up_vector']),
        'cameraViewPoint': PointFromJSON(json['camera_view_point']),
    };
}

export function OrthogonalCameraToJSON(value?: OrthogonalCamera | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'view_to_world_scale': value.viewToWorldScale,
        'camera_direction': DirectionToJSON(value.cameraDirection),
        'camera_up_vector': DirectionToJSON(value.cameraUpVector),
        'camera_view_point': PointToJSON(value.cameraViewPoint),
    };
}


