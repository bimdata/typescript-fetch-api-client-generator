/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Classification,
    ClassificationFromJSON,
    ClassificationFromJSONTyped,
    ClassificationToJSON,
    LayerElement,
    LayerElementFromJSON,
    LayerElementFromJSONTyped,
    LayerElementToJSON,
    MaterialListComponent,
    MaterialListComponentFromJSON,
    MaterialListComponentFromJSONTyped,
    MaterialListComponentToJSON,
    PropertySet,
    PropertySetFromJSON,
    PropertySetFromJSONTyped,
    PropertySetToJSON,
} from './';

/**
 * Default behavior: - retrieve kwargs in the route (cloud_pk, project_pk, etc) - trim the _pk (cloud_pk => cloud) - check if the object has a foreign key with the name - if so, set the foreign key to the value in the route Override: If the serializer has a method \"get_parents\", we call it and set the parents The method \"get_parents\" should return an iterable of tuples : (parent_field_name, parent_object)
 * @export
 * @interface Element
 */
export interface Element {
    /**
     * 
     * @type {number}
     * @memberof Element
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof Element
     */
    uuid?: string;
    /**
     * IFC type for the element
     * @type {string}
     * @memberof Element
     */
    type: string;
    /**
     * 
     * @type {PropertySet}
     * @memberof Element
     */
    attributes?: PropertySet;
    /**
     * 
     * @type {Array<PropertySet>}
     * @memberof Element
     */
    propertySets?: Array<PropertySet>;
    /**
     * 
     * @type {Array<Classification>}
     * @memberof Element
     */
    classifications?: Array<Classification>;
    /**
     * 
     * @type {Array<MaterialListComponent>}
     * @memberof Element
     */
    readonly materialList?: Array<MaterialListComponent>;
    /**
     * 
     * @type {Array<LayerElement>}
     * @memberof Element
     */
    layers?: Array<LayerElement>;
}

export function ElementFromJSON(json: any): Element {
    return ElementFromJSONTyped(json, false);
}

export function ElementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Element {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'type': json['type'],
        'attributes': !exists(json, 'attributes') ? undefined : PropertySetFromJSON(json['attributes']),
        'propertySets': !exists(json, 'property_sets') ? undefined : ((json['property_sets'] as Array<any>).map(PropertySetFromJSON)),
        'classifications': !exists(json, 'classifications') ? undefined : ((json['classifications'] as Array<any>).map(ClassificationFromJSON)),
        'materialList': !exists(json, 'material_list') ? undefined : ((json['material_list'] as Array<any>).map(MaterialListComponentFromJSON)),
        'layers': !exists(json, 'layers') ? undefined : ((json['layers'] as Array<any>).map(LayerElementFromJSON)),
    };
}

export function ElementToJSON(value?: Element | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'type': value.type,
        'attributes': PropertySetToJSON(value.attributes),
        'property_sets': value.propertySets === undefined ? undefined : ((value.propertySets as Array<any>).map(PropertySetToJSON)),
        'classifications': value.classifications === undefined ? undefined : ((value.classifications as Array<any>).map(ClassificationToJSON)),
        'layers': value.layers === undefined ? undefined : ((value.layers as Array<any>).map(LayerElementToJSON)),
    };
}


