/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FolderGroupPermission,
    FolderGroupPermissionFromJSON,
    FolderGroupPermissionFromJSONTyped,
    FolderGroupPermissionToJSON,
} from './FolderGroupPermission';
import {
    FolderPermissionEnum,
    FolderPermissionEnumFromJSON,
    FolderPermissionEnumFromJSONTyped,
    FolderPermissionEnumToJSON,
} from './FolderPermissionEnum';
import {
    RecursiveFolderChildren,
    RecursiveFolderChildrenFromJSON,
    RecursiveFolderChildrenFromJSONTyped,
    RecursiveFolderChildrenToJSON,
} from './RecursiveFolderChildren';
import {
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Folder
 */
export interface Folder {
    /**
     * 
     * @type {number}
     * @memberof Folder
     */
    readonly id: number;
    /**
     * 
     * @type {number}
     * @memberof Folder
     */
    parentId?: number | null;
    /**
     * DEPRECATED: Use 'nature' instead. Value is "Folder". It is usefull to parse the tree and discriminate folders and files
     * @type {string}
     * @memberof Folder
     */
    readonly type: string;
    /**
     * Value is "Folder". It is usefull to parse the tree and discriminate folders and files
     * @type {string}
     * @memberof Folder
     */
    readonly nature: string;
    /**
     * Name of the folder
     * @type {string}
     * @memberof Folder
     */
    name: string;
    /**
     * Creation date
     * @type {Date}
     * @memberof Folder
     */
    readonly createdAt: Date;
    /**
     * Date of the last update
     * @type {Date}
     * @memberof Folder
     */
    readonly updatedAt: Date;
    /**
     * 
     * @type {User}
     * @memberof Folder
     */
    readonly createdBy: User | null;
    /**
     * 
     * @type {Array<FolderGroupPermission>}
     * @memberof Folder
     */
    readonly groupsPermissions: Array<FolderGroupPermission>;
    /**
     * Permission for a Folder
     * @type {FolderPermissionEnum}
     * @memberof Folder
     */
    defaultPermission?: FolderPermissionEnum | null;
    /**
     * Aggregate of group user permissions and folder default permission
     * @type {FolderPermissionEnum}
     * @memberof Folder
     */
    readonly userPermission: FolderPermissionEnum | null;
    /**
     * 
     * @type {Array<RecursiveFolderChildren>}
     * @memberof Folder
     */
    readonly children: Array<RecursiveFolderChildren>;
}

export function FolderFromJSON(json: any): Folder {
    return FolderFromJSONTyped(json, false);
}

export function FolderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Folder {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'parentId': !exists(json, 'parent_id') ? undefined : json['parent_id'],
        'type': json['type'],
        'nature': json['nature'],
        'name': json['name'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'createdBy': UserFromJSON(json['created_by']),
        'groupsPermissions': ((json['groups_permissions'] as Array<any>).map(FolderGroupPermissionFromJSON)),
        'defaultPermission': !exists(json, 'default_permission') ? undefined : FolderPermissionEnumFromJSON(json['default_permission']),
        'userPermission': FolderPermissionEnumFromJSON(json['user_permission']),
        'children': ((json['children'] as Array<any>).map(RecursiveFolderChildrenFromJSON)),
    };
}

export function FolderToJSON(value?: Folder | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parent_id': value.parentId,
        'name': value.name,
        'default_permission': FolderPermissionEnumToJSON(value.defaultPermission),
    };
}

