/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Geometry2dPoint,
    Geometry2dPointFromJSON,
    Geometry2dPointFromJSONTyped,
    Geometry2dPointToJSON,
} from './Geometry2dPoint';
import {
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface ModelLabel
 */
export interface ModelLabel {
    /**
     * 
     * @type {number}
     * @memberof ModelLabel
     */
    readonly id: number;
    /**
     * The model to which the label is attached
     * @type {number}
     * @memberof ModelLabel
     */
    readonly model: number;
    /**
     * Name of the label
     * @type {string}
     * @memberof ModelLabel
     */
    name: string;
    /**
     * 
     *             Color of the label in hexadecimal string without the '#' prefix.
     *             Example: 'fff', 'fff0', '0f0f0f', '0f0f0f00'.
     *         
     * @type {string}
     * @memberof ModelLabel
     */
    color?: string | null;
    /**
     * 
     * @type {Array<Geometry2dPoint>}
     * @memberof ModelLabel
     */
    geometry: Array<Geometry2dPoint>;
    /**
     * Whether the label has been created or validated by a human or not
     * @type {boolean}
     * @memberof ModelLabel
     */
    human_validated?: boolean;
    /**
     * 
     * @type {User}
     * @memberof ModelLabel
     */
    readonly creator: User | null;
    /**
     * Creation date
     * @type {Date}
     * @memberof ModelLabel
     */
    readonly created_at: Date;
    /**
     * Date of the last update
     * @type {Date}
     * @memberof ModelLabel
     */
    readonly updated_at: Date;
}

export function ModelLabelFromJSON(json: any): ModelLabel {
    return ModelLabelFromJSONTyped(json, false);
}

export function ModelLabelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelLabel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'model': json['model'],
        'name': json['name'],
        'color': !exists(json, 'color') ? undefined : json['color'],
        'geometry': ((json['geometry'] as Array<any>).map(Geometry2dPointFromJSON)),
        'human_validated': !exists(json, 'human_validated') ? undefined : json['human_validated'],
        'creator': UserFromJSON(json['creator']),
        'created_at': (new Date(json['created_at'])),
        'updated_at': (new Date(json['updated_at'])),
    };
}

export function ModelLabelToJSON(value?: ModelLabel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'color': value.color,
        'geometry': ((value.geometry as Array<any>).map(Geometry2dPointToJSON)),
        'human_validated': value.human_validated,
    };
}

