/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    UnitRequest,
    UnitRequestFromJSON,
    UnitRequestFromJSONTyped,
    UnitRequestToJSON,
} from './UnitRequest';

/**
 * Adds nested create feature
 * @export
 * @interface PropertyDefinitionRequest
 */
export interface PropertyDefinitionRequest {
    /**
     * 
     * @type {UnitRequest}
     * @memberof PropertyDefinitionRequest
     */
    unit?: UnitRequest | null;
    /**
     * 
     * @type {string}
     * @memberof PropertyDefinitionRequest
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PropertyDefinitionRequest
     */
    description?: string | null;
    /**
     * IfcProperty*, Ifc*Properties, IfcComplexProperty, IfcQuantity*, IfcComplexQuantity, Attribute
     * @type {string}
     * @memberof PropertyDefinitionRequest
     */
    type?: string | null;
    /**
     * Type of the corresponding value (Boolean, integer, float, string, IfcRange, ...)
     * @type {string}
     * @memberof PropertyDefinitionRequest
     */
    valueType?: string | null;
}

export function PropertyDefinitionRequestFromJSON(json: any): PropertyDefinitionRequest {
    return PropertyDefinitionRequestFromJSONTyped(json, false);
}

export function PropertyDefinitionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PropertyDefinitionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'unit': !exists(json, 'unit') ? undefined : UnitRequestFromJSON(json['unit']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'valueType': !exists(json, 'value_type') ? undefined : json['value_type'],
    };
}

export function PropertyDefinitionRequestToJSON(value?: PropertyDefinitionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'unit': UnitRequestToJSON(value.unit),
        'name': value.name,
        'description': value.description,
        'type': value.type,
        'value_type': value.valueType,
    };
}

