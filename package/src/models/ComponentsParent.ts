/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Coloring,
    ColoringFromJSON,
    ColoringFromJSONTyped,
    ColoringToJSON,
} from './Coloring';
import {
    Component,
    ComponentFromJSON,
    ComponentFromJSONTyped,
    ComponentToJSON,
} from './Component';
import {
    Visibility,
    VisibilityFromJSON,
    VisibilityFromJSONTyped,
    VisibilityToJSON,
} from './Visibility';

/**
 * Adds nested create feature
 * @export
 * @interface ComponentsParent
 */
export interface ComponentsParent {
    /**
     * 
     * @type {Array<Coloring>}
     * @memberof ComponentsParent
     */
    coloring?: Array<Coloring>;
    /**
     * 
     * @type {Visibility}
     * @memberof ComponentsParent
     */
    visibility?: Visibility | null;
    /**
     * 
     * @type {Array<Component>}
     * @memberof ComponentsParent
     */
    selection?: Array<Component>;
}

export function ComponentsParentFromJSON(json: any): ComponentsParent {
    return ComponentsParentFromJSONTyped(json, false);
}

export function ComponentsParentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComponentsParent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'coloring': !exists(json, 'coloring') ? undefined : ((json['coloring'] as Array<any>).map(ColoringFromJSON)),
        'visibility': !exists(json, 'visibility') ? undefined : VisibilityFromJSON(json['visibility']),
        'selection': !exists(json, 'selection') ? undefined : ((json['selection'] as Array<any>).map(ComponentFromJSON)),
    };
}

export function ComponentsParentToJSON(value?: ComponentsParent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'coloring': value.coloring === undefined ? undefined : ((value.coloring as Array<any>).map(ColoringToJSON)),
        'visibility': VisibilityToJSON(value.visibility),
        'selection': value.selection === undefined ? undefined : ((value.selection as Array<any>).map(ComponentToJSON)),
    };
}

