/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SpaceRequest,
    SpaceRequestFromJSON,
    SpaceRequestFromJSONTyped,
    SpaceRequestToJSON,
} from './SpaceRequest';
import {
    ZoneRequest,
    ZoneRequestFromJSON,
    ZoneRequestFromJSONTyped,
    ZoneRequestToJSON,
} from './ZoneRequest';

/**
 * Adds nested create feature
 * @export
 * @interface PatchedZoneRequest
 */
export interface PatchedZoneRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedZoneRequest
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedZoneRequest
     */
    uuid?: string;
    /**
     * 
     * @type {Array<ZoneRequest>}
     * @memberof PatchedZoneRequest
     */
    zones?: Array<ZoneRequest>;
    /**
     * 
     * @type {number}
     * @memberof PatchedZoneRequest
     */
    parentId?: number;
    /**
     * 
     * @type {Array<SpaceRequest>}
     * @memberof PatchedZoneRequest
     */
    spaces?: Array<SpaceRequest>;
    /**
     * 
     * @type {string}
     * @memberof PatchedZoneRequest
     */
    color?: string | null;
}

export function PatchedZoneRequestFromJSON(json: any): PatchedZoneRequest {
    return PatchedZoneRequestFromJSONTyped(json, false);
}

export function PatchedZoneRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedZoneRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'zones': !exists(json, 'zones') ? undefined : ((json['zones'] as Array<any>).map(ZoneRequestFromJSON)),
        'parentId': !exists(json, 'parent_id') ? undefined : json['parent_id'],
        'spaces': !exists(json, 'spaces') ? undefined : ((json['spaces'] as Array<any>).map(SpaceRequestFromJSON)),
        'color': !exists(json, 'color') ? undefined : json['color'],
    };
}

export function PatchedZoneRequestToJSON(value?: PatchedZoneRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'uuid': value.uuid,
        'zones': value.zones === undefined ? undefined : ((value.zones as Array<any>).map(ZoneRequestToJSON)),
        'parent_id': value.parentId,
        'spaces': value.spaces === undefined ? undefined : ((value.spaces as Array<any>).map(SpaceRequestToJSON)),
        'color': value.color,
    };
}

