/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RawClassification,
    RawClassificationFromJSON,
    RawClassificationFromJSONTyped,
    RawClassificationToJSON,
    RawDefinition,
    RawDefinitionFromJSON,
    RawDefinitionFromJSONTyped,
    RawDefinitionToJSON,
    RawElement,
    RawElementFromJSON,
    RawElementFromJSONTyped,
    RawElementToJSON,
    RawLayer,
    RawLayerFromJSON,
    RawLayerFromJSONTyped,
    RawLayerToJSON,
    RawMaterialList,
    RawMaterialListFromJSON,
    RawMaterialListFromJSONTyped,
    RawMaterialListToJSON,
    RawPropertySet,
    RawPropertySetFromJSON,
    RawPropertySetFromJSONTyped,
    RawPropertySetToJSON,
    RawSystem,
    RawSystemFromJSON,
    RawSystemFromJSONTyped,
    RawSystemToJSON,
    RawUnit,
    RawUnitFromJSON,
    RawUnitFromJSONTyped,
    RawUnitToJSON,
} from './';

/**
 * 
 * @export
 * @interface RawElements
 */
export interface RawElements {
    /**
     * 
     * @type {Array<RawUnit>}
     * @memberof RawElements
     */
    units?: Array<RawUnit> | null;
    /**
     * 
     * @type {Array<RawDefinition>}
     * @memberof RawElements
     */
    definitions?: Array<RawDefinition> | null;
    /**
     * 
     * @type {Array<RawPropertySet>}
     * @memberof RawElements
     */
    propertySets?: Array<RawPropertySet> | null;
    /**
     * 
     * @type {Array<RawClassification>}
     * @memberof RawElements
     */
    classifications?: Array<RawClassification> | null;
    /**
     * 
     * @type {Array<RawLayer>}
     * @memberof RawElements
     */
    layers?: Array<RawLayer> | null;
    /**
     * 
     * @type {Array<RawSystem>}
     * @memberof RawElements
     */
    systems?: Array<RawSystem> | null;
    /**
     * 
     * @type {RawMaterialList}
     * @memberof RawElements
     */
    materialList?: RawMaterialList | null;
    /**
     * 
     * @type {Array<RawElement>}
     * @memberof RawElements
     */
    elements: Array<RawElement>;
}

export function RawElementsFromJSON(json: any): RawElements {
    return RawElementsFromJSONTyped(json, false);
}

export function RawElementsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RawElements {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'units': !exists(json, 'units') ? undefined : (json['units'] === null ? null : (json['units'] as Array<any>).map(RawUnitFromJSON)),
        'definitions': !exists(json, 'definitions') ? undefined : (json['definitions'] === null ? null : (json['definitions'] as Array<any>).map(RawDefinitionFromJSON)),
        'propertySets': !exists(json, 'property_sets') ? undefined : (json['property_sets'] === null ? null : (json['property_sets'] as Array<any>).map(RawPropertySetFromJSON)),
        'classifications': !exists(json, 'classifications') ? undefined : (json['classifications'] === null ? null : (json['classifications'] as Array<any>).map(RawClassificationFromJSON)),
        'layers': !exists(json, 'layers') ? undefined : (json['layers'] === null ? null : (json['layers'] as Array<any>).map(RawLayerFromJSON)),
        'systems': !exists(json, 'systems') ? undefined : (json['systems'] === null ? null : (json['systems'] as Array<any>).map(RawSystemFromJSON)),
        'materialList': !exists(json, 'material_list') ? undefined : RawMaterialListFromJSON(json['material_list']),
        'elements': ((json['elements'] as Array<any>).map(RawElementFromJSON)),
    };
}

export function RawElementsToJSON(value?: RawElements | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'units': value.units === undefined ? undefined : (value.units === null ? null : (value.units as Array<any>).map(RawUnitToJSON)),
        'definitions': value.definitions === undefined ? undefined : (value.definitions === null ? null : (value.definitions as Array<any>).map(RawDefinitionToJSON)),
        'property_sets': value.propertySets === undefined ? undefined : (value.propertySets === null ? null : (value.propertySets as Array<any>).map(RawPropertySetToJSON)),
        'classifications': value.classifications === undefined ? undefined : (value.classifications === null ? null : (value.classifications as Array<any>).map(RawClassificationToJSON)),
        'layers': value.layers === undefined ? undefined : (value.layers === null ? null : (value.layers as Array<any>).map(RawLayerToJSON)),
        'systems': value.systems === undefined ? undefined : (value.systems === null ? null : (value.systems as Array<any>).map(RawSystemToJSON)),
        'material_list': RawMaterialListToJSON(value.materialList),
        'elements': ((value.elements as Array<any>).map(RawElementToJSON)),
    };
}


