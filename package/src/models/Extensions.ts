/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Extensions
 */
export interface Extensions {
    /**
     * 
     * @type {Array<string>}
     * @memberof Extensions
     */
    readonly topic_type: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Extensions
     */
    readonly topic_status: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Extensions
     */
    readonly topic_label: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Extensions
     */
    readonly priority: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Extensions
     */
    readonly stage: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Extensions
     */
    readonly user_id_type: Array<string>;
    /**
     * Non standard field. Arrays of priorities and this array are in the same order.
     * @type {Array<string>}
     * @memberof Extensions
     */
    priority_colors: Array<string>;
    /**
     * Non standard field. Arrays of statuses and this array are in the same order.
     * @type {Array<string>}
     * @memberof Extensions
     */
    topic_status_colors: Array<string>;
    /**
     * Snippet are not yet supported. This field will always be null.
     * @type {Array<string>}
     * @memberof Extensions
     */
    readonly snippet_type: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Extensions
     */
    readonly project_actions: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Extensions
     */
    readonly topic_actions: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Extensions
     */
    readonly comment_actions: Array<string>;
}

export function ExtensionsFromJSON(json: any): Extensions {
    return ExtensionsFromJSONTyped(json, false);
}

export function ExtensionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Extensions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'topic_type': json['topic_type'],
        'topic_status': json['topic_status'],
        'topic_label': json['topic_label'],
        'priority': json['priority'],
        'stage': json['stage'],
        'user_id_type': json['user_id_type'],
        'priority_colors': json['priority_colors'],
        'topic_status_colors': json['topic_status_colors'],
        'snippet_type': json['snippet_type'],
        'project_actions': json['project_actions'],
        'topic_actions': json['topic_actions'],
        'comment_actions': json['comment_actions'],
    };
}

export function ExtensionsToJSON(value?: Extensions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'priority_colors': value.priority_colors,
        'topic_status_colors': value.topic_status_colors,
    };
}

