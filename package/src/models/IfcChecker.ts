/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Ifc,
    IfcFromJSON,
    IfcFromJSONTyped,
    IfcToJSON,
    IfcCheckerCheckplan,
    IfcCheckerCheckplanFromJSON,
    IfcCheckerCheckplanFromJSONTyped,
    IfcCheckerCheckplanToJSON,
    IfcCheckerResults,
    IfcCheckerResultsFromJSON,
    IfcCheckerResultsFromJSONTyped,
    IfcCheckerResultsToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * Default behavior: - retrieve kwargs in the route (cloud_pk, project_pk, etc) - trim the _pk (cloud_pk => cloud) - check if the object has a foreign key with the name - if so, set the foreign key to the value in the route Override: If the serializer has a method \"get_parents\", we call it and set the parents The method \"get_parents\" should return an iterable of tuples : (parent_field_name, parent_object)
 * @export
 * @interface IfcChecker
 */
export interface IfcChecker {
    /**
     * 
     * @type {number}
     * @memberof IfcChecker
     */
    readonly id?: number;
    /**
     * 
     * @type {Ifc}
     * @memberof IfcChecker
     */
    ifc?: Ifc;
    /**
     * 
     * @type {User}
     * @memberof IfcChecker
     */
    creator?: User;
    /**
     * 
     * @type {string}
     * @memberof IfcChecker
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IfcChecker
     */
    checkplanId?: number;
    /**
     * 
     * @type {Array<IfcCheckerResults>}
     * @memberof IfcChecker
     */
    readonly results?: Array<IfcCheckerResults>;
    /**
     * 
     * @type {Date}
     * @memberof IfcChecker
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof IfcChecker
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {IfcCheckerCheckplan}
     * @memberof IfcChecker
     */
    checkplan?: IfcCheckerCheckplan;
}

export function IfcCheckerFromJSON(json: any): IfcChecker {
    return IfcCheckerFromJSONTyped(json, false);
}

export function IfcCheckerFromJSONTyped(json: any, ignoreDiscriminator: boolean): IfcChecker {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ifc': !exists(json, 'ifc') ? undefined : IfcFromJSON(json['ifc']),
        'creator': !exists(json, 'creator') ? undefined : UserFromJSON(json['creator']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'checkplanId': !exists(json, 'checkplan_id') ? undefined : json['checkplan_id'],
        'results': !exists(json, 'results') ? undefined : ((json['results'] as Array<any>).map(IfcCheckerResultsFromJSON)),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'checkplan': !exists(json, 'checkplan') ? undefined : IfcCheckerCheckplanFromJSON(json['checkplan']),
    };
}

export function IfcCheckerToJSON(value?: IfcChecker | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ifc': IfcToJSON(value.ifc),
        'creator': UserToJSON(value.creator),
        'name': value.name,
        'checkplan_id': value.checkplanId,
        'checkplan': IfcCheckerCheckplanToJSON(value.checkplan),
    };
}


