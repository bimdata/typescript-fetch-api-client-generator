/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1 (v1)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Unit,
    UnitFromJSON,
    UnitFromJSONTyped,
    UnitToJSON,
} from './Unit';

/**
 * Adds nested create feature
 * @export
 * @interface PropertyDefinition
 */
export interface PropertyDefinition {
    /**
     * 
     * @type {number}
     * @memberof PropertyDefinition
     */
    readonly id: number;
    /**
     * 
     * @type {Unit}
     * @memberof PropertyDefinition
     */
    unit?: Unit | null;
    /**
     * 
     * @type {string}
     * @memberof PropertyDefinition
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PropertyDefinition
     */
    description?: string | null;
    /**
     * IfcProperty*, Ifc*Properties, IfcComplexProperty, IfcQuantity*, IfcComplexQuantity, Attribute
     * @type {string}
     * @memberof PropertyDefinition
     */
    type?: string | null;
    /**
     * Type of the corresponding value (Boolean, integer, float, string, IfcRange, ...)
     * @type {string}
     * @memberof PropertyDefinition
     */
    valueType?: string | null;
}

export function PropertyDefinitionFromJSON(json: any): PropertyDefinition {
    return PropertyDefinitionFromJSONTyped(json, false);
}

export function PropertyDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PropertyDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'unit': !exists(json, 'unit') ? undefined : UnitFromJSON(json['unit']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'valueType': !exists(json, 'value_type') ? undefined : json['value_type'],
    };
}

export function PropertyDefinitionToJSON(value?: PropertyDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'unit': UnitToJSON(value.unit),
        'name': value.name,
        'description': value.description,
        'type': value.type,
        'value_type': value.valueType,
    };
}

