/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PropertySet,
    PropertySetFromJSON,
    PropertySetFromJSONTyped,
    PropertySetToJSON,
} from './';

/**
 * Default behavior: - retrieve kwargs in the route (cloud_pk, project_pk, etc) - trim the _pk (cloud_pk => cloud) - check if the object has a foreign key with the name - if so, set the foreign key to the value in the route Override: If the serializer has a method \"get_parents\", we call it and set the parents The method \"get_parents\" should return an iterable of tuples : (parent_field_name, parent_object)
 * @export
 * @interface Material
 */
export interface Material {
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    category?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    description?: string | null;
    /**
     * 
     * @type {Array<PropertySet>}
     * @memberof Material
     */
    propertySets: Array<PropertySet>;
}

export function MaterialFromJSON(json: any): Material {
    return MaterialFromJSONTyped(json, false);
}

export function MaterialFromJSONTyped(json: any, ignoreDiscriminator: boolean): Material {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'propertySets': ((json['property_sets'] as Array<any>).map(PropertySetFromJSON)),
    };
}

export function MaterialToJSON(value?: Material | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'category': value.category,
        'description': value.description,
        'property_sets': ((value.propertySets as Array<any>).map(PropertySetToJSON)),
    };
}


