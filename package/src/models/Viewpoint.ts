/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ClippingPlane,
    ClippingPlaneFromJSON,
    ClippingPlaneFromJSONTyped,
    ClippingPlaneToJSON,
    ComponentsParent,
    ComponentsParentFromJSON,
    ComponentsParentFromJSONTyped,
    ComponentsParentToJSON,
    Line,
    LineFromJSON,
    LineFromJSONTyped,
    LineToJSON,
    OrthogonalCamera,
    OrthogonalCameraFromJSON,
    OrthogonalCameraFromJSONTyped,
    OrthogonalCameraToJSON,
    PerspectiveCamera,
    PerspectiveCameraFromJSON,
    PerspectiveCameraFromJSONTyped,
    PerspectiveCameraToJSON,
    Snapshot,
    SnapshotFromJSON,
    SnapshotFromJSONTyped,
    SnapshotToJSON,
} from './';

/**
 * Default behavior: - retrieve kwargs in the route (cloud_pk, project_pk, etc) - trim the _pk (cloud_pk => cloud) - check if the object has a foreign key with the name - if so, set the foreign key to the value in the route Override: If the serializer has a method \"get_parents\", we call it and set the parents The method \"get_parents\" should return an iterable of tuples : (parent_field_name, parent_object)
 * @export
 * @interface Viewpoint
 */
export interface Viewpoint {
    /**
     * 
     * @type {number}
     * @memberof Viewpoint
     */
    index?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Viewpoint
     */
    guid?: string;
    /**
     * 
     * @type {OrthogonalCamera}
     * @memberof Viewpoint
     */
    orthogonalCamera?: OrthogonalCamera;
    /**
     * 
     * @type {PerspectiveCamera}
     * @memberof Viewpoint
     */
    perspectiveCamera?: PerspectiveCamera;
    /**
     * 
     * @type {Array<Line>}
     * @memberof Viewpoint
     */
    lines?: Array<Line> | null;
    /**
     * 
     * @type {Array<ClippingPlane>}
     * @memberof Viewpoint
     */
    clippingPlanes?: Array<ClippingPlane> | null;
    /**
     * 
     * @type {Snapshot}
     * @memberof Viewpoint
     */
    snapshot?: Snapshot;
    /**
     * 
     * @type {ComponentsParent}
     * @memberof Viewpoint
     */
    components?: ComponentsParent | null;
    /**
     * Only used when using POST on the full-topic route to bind viewpoint with comment
     * @type {number}
     * @memberof Viewpoint
     */
    tempId?: number | null;
}

export function ViewpointFromJSON(json: any): Viewpoint {
    return ViewpointFromJSONTyped(json, false);
}

export function ViewpointFromJSONTyped(json: any, ignoreDiscriminator: boolean): Viewpoint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'index': !exists(json, 'index') ? undefined : json['index'],
        'guid': !exists(json, 'guid') ? undefined : json['guid'],
        'orthogonalCamera': !exists(json, 'orthogonal_camera') ? undefined : OrthogonalCameraFromJSON(json['orthogonal_camera']),
        'perspectiveCamera': !exists(json, 'perspective_camera') ? undefined : PerspectiveCameraFromJSON(json['perspective_camera']),
        'lines': !exists(json, 'lines') ? undefined : (json['lines'] === null ? null : (json['lines'] as Array<any>).map(LineFromJSON)),
        'clippingPlanes': !exists(json, 'clipping_planes') ? undefined : (json['clipping_planes'] === null ? null : (json['clipping_planes'] as Array<any>).map(ClippingPlaneFromJSON)),
        'snapshot': !exists(json, 'snapshot') ? undefined : SnapshotFromJSON(json['snapshot']),
        'components': !exists(json, 'components') ? undefined : ComponentsParentFromJSON(json['components']),
        'tempId': !exists(json, 'temp_id') ? undefined : json['temp_id'],
    };
}

export function ViewpointToJSON(value?: Viewpoint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'index': value.index,
        'guid': value.guid,
        'orthogonal_camera': OrthogonalCameraToJSON(value.orthogonalCamera),
        'perspective_camera': PerspectiveCameraToJSON(value.perspectiveCamera),
        'lines': value.lines === undefined ? undefined : (value.lines === null ? null : (value.lines as Array<any>).map(LineToJSON)),
        'clipping_planes': value.clippingPlanes === undefined ? undefined : (value.clippingPlanes === null ? null : (value.clippingPlanes as Array<any>).map(ClippingPlaneToJSON)),
        'snapshot': SnapshotToJSON(value.snapshot),
        'components': ComponentsParentToJSON(value.components),
        'temp_id': value.tempId,
    };
}


