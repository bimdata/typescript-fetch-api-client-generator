/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CommentEventAction,
    CommentEventActionFromJSON,
    CommentEventActionFromJSONTyped,
    CommentEventActionToJSON,
} from './CommentEventAction';

/**
 * 
 * @export
 * @interface CommentEvent
 */
export interface CommentEvent {
    /**
     * 
     * @type {string}
     * @memberof CommentEvent
     */
    readonly topic_guid: string;
    /**
     * 
     * @type {string}
     * @memberof CommentEvent
     */
    readonly comment_guid: string;
    /**
     * 
     * @type {string}
     * @memberof CommentEvent
     */
    readonly author: string | null;
    /**
     * 
     * @type {Date}
     * @memberof CommentEvent
     */
    readonly date: Date;
    /**
     * 
     * @type {Array<CommentEventAction>}
     * @memberof CommentEvent
     */
    events: Array<CommentEventAction>;
}

export function CommentEventFromJSON(json: any): CommentEvent {
    return CommentEventFromJSONTyped(json, false);
}

export function CommentEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'topic_guid': json['topic_guid'],
        'comment_guid': json['comment_guid'],
        'author': json['author'],
        'date': (new Date(json['date'])),
        'events': ((json['events'] as Array<any>).map(CommentEventActionFromJSON)),
    };
}

export function CommentEventToJSON(value?: CommentEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'events': ((value.events as Array<any>).map(CommentEventActionToJSON)),
    };
}

