/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Default behavior: - retrieve kwargs in the route (cloud_pk, project_pk, etc) - trim the _pk (cloud_pk => cloud) - check if the object has a foreign key with the name - if so, set the foreign key to the value in the route Override: If the serializer has a method \"get_parents\", we call it and set the parents The method \"get_parents\" should return an iterable of tuples : (parent_field_name, parent_object)
 * @export
 * @interface System
 */
export interface System {
    /**
     * 
     * @type {number}
     * @memberof System
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof System
     */
    uuid?: string;
    /**
     * Name of the system
     * @type {string}
     * @memberof System
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof System
     */
    objectType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof System
     */
    description?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof System
     */
    elements: Array<string>;
}

export function SystemFromJSON(json: any): System {
    return SystemFromJSONTyped(json, false);
}

export function SystemFromJSONTyped(json: any, ignoreDiscriminator: boolean): System {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'objectType': !exists(json, 'object_type') ? undefined : json['object_type'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'elements': json['elements'],
    };
}

export function SystemToJSON(value?: System | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'name': value.name,
        'object_type': value.objectType,
        'description': value.description,
        'elements': value.elements,
    };
}


