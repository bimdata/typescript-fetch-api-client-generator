/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface CheckProjectAccess
 */
export interface CheckProjectAccess {
    /**
     * 
     * @type {boolean}
     * @memberof CheckProjectAccess
     */
    has_read_permission: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CheckProjectAccess
     */
    has_write_permission: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CheckProjectAccess
     */
    has_admin_permission: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CheckProjectAccess
     */
    token_scopes: Array<string>;
    /**
     * Some tokens may have write scopes (eg: model:write) but the user of the token is a guest in the project so they can't use the scopes.
     * @type {Array<string>}
     * @memberof CheckProjectAccess
     */
    usable_scopes: Array<string>;
    /**
     * * `100` - admin
     * * `50` - user
     * * `25` - guest
     * @type {number}
     * @memberof CheckProjectAccess
     */
    user_role?: CheckProjectAccessUserRoleEnum;
    /**
     * 
     * @type {User}
     * @memberof CheckProjectAccess
     */
    user?: User;
}

/**
* @export
* @enum {string}
*/
export enum CheckProjectAccessUserRoleEnum {
    NUMBER_100 = 100,
    NUMBER_50 = 50,
    NUMBER_25 = 25
}

export function CheckProjectAccessFromJSON(json: any): CheckProjectAccess {
    return CheckProjectAccessFromJSONTyped(json, false);
}

export function CheckProjectAccessFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckProjectAccess {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'has_read_permission': json['has_read_permission'],
        'has_write_permission': json['has_write_permission'],
        'has_admin_permission': json['has_admin_permission'],
        'token_scopes': json['token_scopes'],
        'usable_scopes': json['usable_scopes'],
        'user_role': !exists(json, 'user_role') ? undefined : json['user_role'],
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
    };
}

export function CheckProjectAccessToJSON(value?: CheckProjectAccess | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'has_read_permission': value.has_read_permission,
        'has_write_permission': value.has_write_permission,
        'has_admin_permission': value.has_admin_permission,
        'token_scopes': value.token_scopes,
        'usable_scopes': value.usable_scopes,
        'user_role': value.user_role,
        'user': UserToJSON(value.user),
    };
}

