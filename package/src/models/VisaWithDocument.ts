/* tslint:disable */
/* eslint-disable */
/**
 * BIMData API
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LightDocument,
    LightDocumentFromJSON,
    LightDocumentFromJSONTyped,
    LightDocumentToJSON,
} from './LightDocument';
import {
    UserProject,
    UserProjectFromJSON,
    UserProjectFromJSONTyped,
    UserProjectToJSON,
} from './UserProject';
import {
    VisaComment,
    VisaCommentFromJSON,
    VisaCommentFromJSONTyped,
    VisaCommentToJSON,
} from './VisaComment';
import {
    VisaValidation,
    VisaValidationFromJSON,
    VisaValidationFromJSONTyped,
    VisaValidationToJSON,
} from './VisaValidation';

/**
 * 
 * @export
 * @interface VisaWithDocument
 */
export interface VisaWithDocument {
    /**
     * 
     * @type {number}
     * @memberof VisaWithDocument
     */
    readonly id: number;
    /**
     * 
     * @type {Array<VisaValidation>}
     * @memberof VisaWithDocument
     */
    readonly validations: Array<VisaValidation>;
    /**
     * Validation IDs where one or more validators have no longer access to the visa document.
     * @type {Array<number>}
     * @memberof VisaWithDocument
     */
    readonly validations_in_error: Array<number>;
    /**
     * 
     * @type {UserProject}
     * @memberof VisaWithDocument
     */
    readonly creator: UserProject | null;
    /**
     * 
     * @type {number}
     * @memberof VisaWithDocument
     */
    readonly document_id: number;
    /**
     * * `O` - opened
     * * `P` - paused
     * * `C` - closed
     * @type {string}
     * @memberof VisaWithDocument
     */
    readonly status: VisaWithDocumentStatusEnum;
    /**
     * Description of the visa
     * @type {string}
     * @memberof VisaWithDocument
     */
    description?: string | null;
    /**
     * 
     * @type {Array<VisaComment>}
     * @memberof VisaWithDocument
     */
    readonly comments: Array<VisaComment>;
    /**
     * 
     * @type {Date}
     * @memberof VisaWithDocument
     */
    deadline?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof VisaWithDocument
     */
    readonly created_at: Date;
    /**
     * 
     * @type {Date}
     * @memberof VisaWithDocument
     */
    readonly updated_at: Date;
    /**
     * 
     * @type {LightDocument}
     * @memberof VisaWithDocument
     */
    readonly document: LightDocument | null;
}

/**
* @export
* @enum {string}
*/
export enum VisaWithDocumentStatusEnum {
    O = 'O',
    P = 'P',
    C = 'C'
}

export function VisaWithDocumentFromJSON(json: any): VisaWithDocument {
    return VisaWithDocumentFromJSONTyped(json, false);
}

export function VisaWithDocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): VisaWithDocument {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'validations': ((json['validations'] as Array<any>).map(VisaValidationFromJSON)),
        'validations_in_error': json['validations_in_error'],
        'creator': UserProjectFromJSON(json['creator']),
        'document_id': json['document_id'],
        'status': json['status'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'comments': ((json['comments'] as Array<any>).map(VisaCommentFromJSON)),
        'deadline': !exists(json, 'deadline') ? undefined : (json['deadline'] === null ? null : new Date(json['deadline'])),
        'created_at': (new Date(json['created_at'])),
        'updated_at': (new Date(json['updated_at'])),
        'document': LightDocumentFromJSON(json['document']),
    };
}

export function VisaWithDocumentToJSON(value?: VisaWithDocument | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'deadline': value.deadline === undefined ? undefined : (value.deadline === null ? null : value.deadline.toISOString().substr(0,10)),
    };
}

